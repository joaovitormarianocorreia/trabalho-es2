{"ast":null,"code":"import _get from \"/home/joao/Documents/TFES2/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/home/joao/Documents/TFES2/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/joao/Documents/TFES2/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/joao/Documents/TFES2/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/home/joao/Documents/TFES2/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/joao/Documents/TFES2/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { EventEmitter, Output, Injectable, InjectionToken, Inject, Optional, NgZone, Component, ElementRef, ViewEncapsulation, Directive, ViewChild, ViewContainerRef, Input, NgModule } from '@angular/core';\nimport { Observable, ReplaySubject, Subject } from 'rxjs';\nimport { debounceTime, tap, first } from 'rxjs/operators';\nimport { CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * return json string from json-like string\n * @param {?} str\n * @return {?}\n */\n\nimport * as ɵngcc0 from '@angular/core';\nvar _c0 = [\"*\"];\nvar _c1 = [\"template\"];\n\nfunction jsonize(str) {\n  try {\n    // if parsable already, return as it is\n    JSON.parse(str);\n    return str;\n  } catch (\n  /** @type {?} */\n  e) {\n    // if not parsable, change little\n    return str.replace(/([\\$\\w]+)\\s*:/g, // wrap keys without double quote\n    // wrap keys without double quote\n    function (_, $1) {\n      return '\"' + $1 + '\":';\n    }).replace(/'([^']+)'/g, // replacing single quote to double quote\n    // replacing single quote to double quote\n    function (_, $1) {\n      return '\"' + $1 + '\"';\n    });\n  }\n}\n/**\n * Returns string to an object by using JSON.parse()\n * @param {?} input\n * @return {?}\n */\n\n\nfunction getJSON(input) {\n  if (typeof input === 'string') {\n    var\n    /** @type {?} */\n    re = /^[\\+\\-]?[0-9\\.]+,[ ]*\\ ?[\\+\\-]?[0-9\\.]+$/; // lat,lng\n\n    if (input.match(re)) {\n      input = '[' + input + ']';\n    }\n\n    return JSON.parse(jsonize(input));\n  } else {\n    return input;\n  }\n}\n/**\n * json type definition\n * @record\n */\n\n/**\n * Returns camel-cased from string 'Foo Bar' to 'fooBar'\n * @param {?} str\n * @return {?}\n */\n\n\nfunction toCamelCase(str) {\n  return str.replace(/(?:^\\w|[A-Z]|\\b\\w)/g, function (letter, index) {\n    return index === 0 ? letter.toLowerCase() : letter.toUpperCase();\n  }).replace(/\\s+/g, '');\n}\n/**\n * @return {?}\n */\n\n\nfunction isMapsApiLoaded() {\n  return typeof google === 'object' && typeof google.maps === 'object';\n}\n/**\n * @param {?} component\n * @param {?} libName\n * @return {?}\n */\n\n\nfunction missingLibraryError(component, libName) {\n  return Error(\"\".concat(component, \": library '\").concat(libName, \"' is missing, please ensure to include it in a 'libraries' parameter.\\n    Example:\\n      NguiMapModule.forRoot({\\n        apiUrl: 'https://maps.googleapis.com/maps/api/js?libraries=\").concat(libName, \"'\\n      })\\n  \"));\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @abstract\n */\n\n\nvar BaseMapDirective = /*#__PURE__*/function () {\n  /**\n   * @param {?} nguiMapComponent\n   * @param {?} mapObjectName\n   * @param {?} inputs\n   * @param {?} outputs\n   */\n  function BaseMapDirective(nguiMapComponent, mapObjectName, inputs, outputs) {\n    var _this = this;\n\n    _classCallCheck(this, BaseMapDirective);\n\n    this.nguiMapComponent = nguiMapComponent;\n    this.mapObjectName = mapObjectName;\n    this.inputs = inputs;\n    this.outputs = outputs; // this should be redefined on each childr directive\n\n    this.initialized$ = new EventEmitter();\n    this._subscriptions = [];\n    this.nguiMap = this.nguiMapComponent['nguiMap'];\n    this.optionBuilder = this.nguiMapComponent['optionBuilder']; // all outputs must be initialized\n\n    this.outputs.forEach(function (output) {\n      return _this[output] = new EventEmitter();\n    });\n    this.mapObjectName = mapObjectName;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(BaseMapDirective, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this2 = this;\n\n      if (this.nguiMapComponent.mapIdledOnce) {\n        // map is ready already\n        this.initialize();\n      } else {\n        this.nguiMapComponent.mapReady$.subscribe(function (map) {\n          return _this2.initialize();\n        });\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"initialize\",\n    value: function initialize() {\n      this.objectOptions = this.optionBuilder.googlizeAllInputs(this.inputs, this); // will be set after geocoded\n\n      typeof this.objectOptions.position === 'string' && delete this.objectOptions.position;\n      typeof this.objectOptions.center === 'string' && delete this.objectOptions.center; // noinspection TypeScriptUnresolvedFunction\n\n      if (this.libraryName) {\n        if (!google.maps[this.libraryName]) {\n          throw missingLibraryError(this.mapObjectName, this.libraryName);\n        }\n\n        this.mapObject = new google.maps[this.libraryName][this.mapObjectName](this.objectOptions);\n      } else {\n        this.mapObject = new google.maps[this.mapObjectName](this.objectOptions);\n      }\n\n      this.mapObject.setMap(this.nguiMapComponent.map);\n      this.mapObject['mapObjectName'] = this.mapObjectName;\n      this.mapObject['nguiMapComponent'] = this.nguiMapComponent; // set google events listeners and emits to this outputs listeners\n\n      this.nguiMap.setObjectEvents(this.outputs, this, 'mapObject');\n      this.nguiMapComponent.addToMapObjectGroup(this.mapObjectName, this.mapObject);\n      this.initialized$.emit(this.mapObject);\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      this.nguiMap.updateGoogleObject(this.mapObject, changes);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._subscriptions.map(function (subscription) {\n        return subscription.unsubscribe();\n      });\n\n      this.nguiMapComponent.removeFromMapObjectGroup(this.mapObjectName, this.mapObject);\n\n      if (this.mapObject) {\n        this.nguiMap.clearObjectEvents(this.outputs, this, 'mapObject');\n      }\n    }\n  }]);\n\n  return BaseMapDirective;\n}();\n\nBaseMapDirective.ɵfac = function BaseMapDirective_Factory(t) {\n  ɵngcc0.ɵɵinvalidFactory();\n};\n\nBaseMapDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: BaseMapDirective,\n  outputs: {\n    initialized$: \"initialized$\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\nBaseMapDirective.propDecorators = {\n  \"initialized$\": [{\n    type: Output\n  }]\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * change any object to google object options\n * e.g. [1,2] -> new google.maps.LatLng(1,2);\n */\n\nvar OptionBuilder = /*#__PURE__*/function () {\n  function OptionBuilder() {\n    _classCallCheck(this, OptionBuilder);\n  }\n\n  _createClass(OptionBuilder, [{\n    key: \"googlizeAllInputs\",\n    value:\n    /**\n     * @param {?} definedInputs\n     * @param {?} userInputs\n     * @return {?}\n     */\n    function googlizeAllInputs(definedInputs, userInputs) {\n      var _this3 = this;\n\n      var\n      /** @type {?} */\n      options = {}; // if options given from user, only take options and ignore other inputs\n\n      if (userInputs.options) {\n        options = userInputs.options;\n\n        if (!this.onlyOptionsGiven(definedInputs, userInputs)) {\n          console.error('when \"options\" are used, other options are ignored');\n        }\n      } else {\n        // if options not given, process all user inputs\n        definedInputs.forEach(function (input) {\n          if (userInputs[input] !== undefined) {\n            options[input] = _this3.googlize(userInputs[input], {\n              key: input\n            });\n          }\n        });\n      }\n\n      return options;\n    }\n    /**\n     * @param {?} inputs\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"googlizeMultiple\",\n    value: function googlizeMultiple(inputs, options) {\n      options = options || {};\n\n      for (var\n      /** @type {?} */\n      key in inputs) {\n        var\n        /** @type {?} */\n        val = inputs[key]; // (non-strings are fully converted)\n\n        if (typeof val !== 'string') {\n          options[key] = val;\n        } else if (!(options['doNotConverStringToNumber'] && val.match(/^[0-9]+$/))) {\n          options[key] = this.googlize(val, {\n            key: key\n          });\n        }\n      } // for(var key in attrs)\n\n\n      return options;\n    }\n    /**\n     * @param {?} input\n     * @param {?=} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"googlize\",\n    value: function googlize(input, options) {\n      options = options || {};\n      var\n      /** @type {?} */\n      output = input;\n\n      if (typeof input === 'string') {\n        // convert string to a google object\n        if (input === 'false') {\n          output = false;\n        } else if (input === '0') {\n          output = 0;\n        } else {\n          output = // -> googlize -> getJsonParsed -> googlizeMultiple -> googlize until all elements are parsed\n          this.getJSONParsed(input, options)\n          /* Foo.Bar(...) -> new google.maps.Foo.Bar(...) */\n          || this.getAnyMapObject(input)\n          /*  MapTypeID.HYBRID -> new google.maps.MapTypeID.HYBRID */\n          || this.getAnyMapConstant(input, options)\n          /*  2016-06-20 -> new Date('2016-06-20') */\n          || this.getDateObject(input) || input;\n        }\n      }\n\n      if (options['key']) {\n        var\n        /** @type {?} */\n        key = options['key'];\n\n        if (output instanceof Array) {\n          // e.g., [1, 2]\n          if (key === 'bounds') {\n            output = new google.maps.LatLngBounds(output[0], output[1]);\n          } else if (key === 'icons') {\n            output = this.getMapIcons(output);\n          } else if (key === 'position' || key.match(/^geoFallback/)) {\n            output = this.getLatLng(output);\n          }\n        } else if (output instanceof Object) {\n          if (key === 'icon') {\n            output = this.getMarkerIcon(output);\n          } else if (key.match(/ControlOptions$/)) {\n            output = this.getMapControlOption(output);\n          }\n        }\n      } // delete keys only for processing, not used by google\n\n\n      delete output['doNotConverStringToNumber'];\n      delete output['key'];\n      return output;\n    }\n    /**\n     * @param {?} input\n     * @return {?}\n     */\n\n  }, {\n    key: \"getLatLng\",\n    value: function getLatLng(input) {\n      var\n      /** @type {?} */\n      output;\n\n      if (input[0].constructor === Array) {\n        // [[1,2],[3,4]]\n        output = input.map(function (el) {\n          return new google.maps.LatLng(el[0], el[1]);\n        });\n      } else if (!isNaN(parseFloat(input[0])) && isFinite(input[0])) {\n        output = new google.maps.LatLng(input[0], input[1]);\n      }\n\n      return output;\n    }\n    /**\n     * @param {?} input\n     * @param {?} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"getJSONParsed\",\n    value: function getJSONParsed(input, options) {\n      var\n      /** @type {?} */\n      output;\n\n      try {\n        output = getJSON(input);\n\n        if (output instanceof Array) {\n          // [{a:1}] : not lat/lng ones\n          if (output[0].constructor !== Object) {\n            // [[1,2],[3,4]] or [1,2]\n            output = this.getLatLng(output);\n          }\n        } else if (output === Object(output)) {\n          // check for nested hashes and convert to Google API options\n          var\n          /** @type {?} */\n          newOptions = options;\n          newOptions['doNotConverStringToNumber'] = true;\n          output = this.googlizeMultiple(output, newOptions);\n        }\n      } catch (\n      /** @type {?} */\n      e) {}\n\n      return output;\n    }\n    /**\n     * @param {?} input\n     * @return {?}\n     */\n\n  }, {\n    key: \"getAnyMapObject\",\n    value: function getAnyMapObject(input) {\n      var\n      /** @type {?} */\n      output;\n\n      if (input.match(/^[A-Z][a-zA-Z0-9]+\\(.*\\)$/)) {\n        try {\n          output = Function(\"return new google.maps.\".concat(input, \";\"))();\n        } catch (\n        /** @type {?} */\n        e) {}\n      }\n\n      return output;\n    }\n    /**\n     * @param {?} input\n     * @param {?} options\n     * @return {?}\n     */\n\n  }, {\n    key: \"getAnyMapConstant\",\n    value: function getAnyMapConstant(input, options) {\n      var\n      /** @type {?} */\n      output;\n\n      if (input.match(/^([A-Z][a-zA-Z0-9]+)\\.([A-Z]+)$/)) {\n        // e.g. MapTypeID.HYBRID\n        try {\n          var\n          /** @type {?} */\n          matches = input.match(/^([A-Z][a-zA-Z0-9]+)\\.([A-Z]+)$/);\n          output = google.maps[matches[1]][matches[2]];\n        } catch (\n        /** @type {?} */\n        e) {}\n      } else if (input.match(/^[A-Z]+$/)) {\n        // e.g. HYBRID\n        try {\n          var\n          /** @type {?} */\n          capitalizedKey = options['key'].charAt(0).toUpperCase() + options['key'].slice(1);\n          output = google.maps[capitalizedKey][input];\n        } catch (\n        /** @type {?} */\n        e) {}\n      }\n\n      return output;\n    }\n    /**\n     * streetviewControl, panControl, etc, not a general control\n     * @param {?} controlOptions\n     * @return {?}\n     */\n\n  }, {\n    key: \"getMapControlOption\",\n    value: function getMapControlOption(controlOptions) {\n      var\n      /** @type {?} */\n      newControlOptions = controlOptions;\n\n      for (var\n      /** @type {?} */\n      key in newControlOptions) {\n        // assign the right values\n        if (newControlOptions[key]) {\n          var\n          /** @type {?} */\n          value = newControlOptions[key];\n\n          if (typeof value === 'string') {\n            value = value.toUpperCase();\n          } else if (key === 'mapTypeIds') {\n            value = value.map(function (str) {\n              if (str.match(/^[A-Z]+$/)) {\n                // if constant\n                return google.maps.MapTypeId[str.toUpperCase()];\n              } else {\n                // else, custom map-type\n                return str;\n              }\n            });\n          }\n\n          if (key === 'style') {\n            var\n            /** @type {?} */\n            objName = key.replace(/Options$/, '') + 'Style';\n            newControlOptions[key] = google.maps[objName][value];\n          } else if (key === 'position') {\n            newControlOptions[key] = google.maps.ControlPosition[value];\n          } else {\n            newControlOptions[key] = value;\n          }\n        }\n      }\n\n      return newControlOptions;\n    }\n    /**\n     * @param {?} input\n     * @return {?}\n     */\n\n  }, {\n    key: \"getDateObject\",\n    value: function getDateObject(input) {\n      var\n      /** @type {?} */\n      output;\n\n      if (input.match(/^(\\d{4}\\-\\d\\d\\-\\d\\d([tT][\\d:\\.]*)?)([zZ]|([+\\-])(\\d\\d):?(\\d\\d))?$/)) {\n        try {\n          output = new Date(input);\n        } catch (\n        /** @type {?} */\n        e) {}\n      }\n\n      return output;\n    }\n    /**\n     * @param {?} input\n     * @return {?}\n     */\n\n  }, {\n    key: \"getMapIcons\",\n    value: function getMapIcons(input) {\n      return input.map(function (el) {\n        if (el.icon.path.match(/^[A-Z_]+$/)) {\n          el.icon.path = google.maps.SymbolPath[el.icon.path];\n        }\n\n        return el;\n      });\n    }\n    /**\n     * @param {?} input\n     * @return {?}\n     */\n\n  }, {\n    key: \"getMarkerIcon\",\n    value: function getMarkerIcon(input) {\n      var\n      /** @type {?} */\n      output = input;\n\n      if (('' + output.path).match(/^[A-Z_]+$/)) {\n        output.path = google.maps.SymbolPath[output.path];\n      }\n\n      for (var\n      /** @type {?} */\n      key in output) {\n        var\n        /** @type {?} */\n        arr = output[key];\n\n        if (key === 'anchor' || key === 'origin' || key === 'labelOrigin') {\n          output[key] = new google.maps.Point(arr[0], arr[1]);\n        } else if (key === 'size' || key === 'scaledSize') {\n          output[key] = new google.maps.Size(arr[0], arr[1]);\n        }\n      }\n\n      return output;\n    }\n    /**\n     * @param {?} definedInputs\n     * @param {?} userInputs\n     * @return {?}\n     */\n\n  }, {\n    key: \"onlyOptionsGiven\",\n    value: function onlyOptionsGiven(definedInputs, userInputs) {\n      for (var\n      /** @type {?} */\n      i = 0; i < definedInputs.length; i++) {\n        var\n        /** @type {?} */\n        input = definedInputs[i];\n\n        if (input !== 'options' && typeof userInputs[input] !== 'undefined') {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }]);\n\n  return OptionBuilder;\n}();\n\nOptionBuilder.ɵfac = function OptionBuilder_Factory(t) {\n  return new (t || OptionBuilder)();\n};\n\nOptionBuilder.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: OptionBuilder,\n  factory: OptionBuilder.ɵfac\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(OptionBuilder, [{\n    type: Injectable\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n *  service for navigator.geolocation methods\n */\n\n\nvar NavigatorGeolocation = /*#__PURE__*/function () {\n  function NavigatorGeolocation() {\n    _classCallCheck(this, NavigatorGeolocation);\n  }\n\n  _createClass(NavigatorGeolocation, [{\n    key: \"getCurrentPosition\",\n    value:\n    /**\n     * @param {?=} geoLocationOptions\n     * @return {?}\n     */\n    function getCurrentPosition(geoLocationOptions) {\n      geoLocationOptions = geoLocationOptions || {\n        timeout: 5000\n      };\n      return new Observable(function (responseObserver) {\n        if (navigator.geolocation) {\n          navigator.geolocation.getCurrentPosition(function (position) {\n            responseObserver.next(position);\n            responseObserver.complete();\n          }, function (evt) {\n            return responseObserver.error(evt);\n          }, geoLocationOptions);\n        } else {\n          responseObserver.error('Browser Geolocation service failed.');\n        }\n      });\n    }\n  }]);\n\n  return NavigatorGeolocation;\n}();\n\nNavigatorGeolocation.ɵfac = function NavigatorGeolocation_Factory(t) {\n  return new (t || NavigatorGeolocation)();\n};\n\nNavigatorGeolocation.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: NavigatorGeolocation,\n  factory: NavigatorGeolocation.ɵfac\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NavigatorGeolocation, [{\n    type: Injectable\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar NG_MAP_CONFIG_TOKEN = new InjectionToken('NG_MAP_CONFIG_TOKEN');\n/**\n * @record\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @abstract\n */\n\nvar NgMapApiLoader = /*#__PURE__*/function () {\n  /**\n   * @param {?} config\n   */\n  function NgMapApiLoader(config) {\n    _classCallCheck(this, NgMapApiLoader);\n\n    this.config = config;\n    this.api$ = new ReplaySubject(1);\n    this.config = this.config || {\n      apiUrl: 'https://maps.google.com/maps/api/js'\n    };\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(NgMapApiLoader, [{\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.api$.complete();\n    }\n  }]);\n\n  return NgMapApiLoader;\n}();\n\nNgMapApiLoader.ɵfac = function NgMapApiLoader_Factory(t) {\n  ɵngcc0.ɵɵinvalidFactory();\n};\n\nNgMapApiLoader.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: NgMapApiLoader\n});\n\nvar NgMapAsyncCallbackApiLoader = /*#__PURE__*/function (_NgMapApiLoader) {\n  _inherits(NgMapAsyncCallbackApiLoader, _NgMapApiLoader);\n\n  var _super = _createSuper(NgMapAsyncCallbackApiLoader);\n\n  /**\n   * @param {?} zone\n   * @param {?} config\n   */\n  function NgMapAsyncCallbackApiLoader(zone, config) {\n    var _this4;\n\n    _classCallCheck(this, NgMapAsyncCallbackApiLoader);\n\n    _this4 = _super.call(this, config);\n    _this4.zone = zone;\n    return _this4;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(NgMapAsyncCallbackApiLoader, [{\n    key: \"load\",\n    value: function load() {\n      var _this5 = this;\n\n      if (typeof window === 'undefined') {\n        return;\n      }\n\n      if (isMapsApiLoaded()) {\n        this.api$.next(google.maps);\n      } else if (!document.querySelector('#ngui-map-api')) {\n        window['nguiMapRef'] = window['nguiMapRef'] || [];\n        window['nguiMapRef'].push({\n          zone: this.zone,\n          componentFn: function componentFn() {\n            return _this5.api$.next(google.maps);\n          }\n        });\n        this.addGoogleMapsApi();\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"addGoogleMapsApi\",\n    value: function addGoogleMapsApi() {\n      window['initNguiMap'] = window['initNguiMap'] || function () {\n        window['nguiMapRef'].forEach(function (nguiMapRef) {\n          nguiMapRef.zone.run(function () {\n            nguiMapRef.componentFn();\n          });\n        });\n        window['nguiMapRef'].splice(0, window['nguiMapRef'].length);\n      };\n\n      var\n      /** @type {?} */\n      script = document.createElement('script');\n      script.id = 'ngui-map-api'; // script.src = \"https://maps.google.com/maps/api/js?callback=initNguiMap\";\n\n      var\n      /** @type {?} */\n      apiUrl = this.config.apiUrl;\n      apiUrl += apiUrl.indexOf('?') !== -1 ? '&' : '?';\n      script.src = apiUrl + 'callback=initNguiMap';\n      document.querySelector('body').appendChild(script);\n    }\n  }]);\n\n  return NgMapAsyncCallbackApiLoader;\n}(NgMapApiLoader);\n\nNgMapAsyncCallbackApiLoader.ɵfac = function NgMapAsyncCallbackApiLoader_Factory(t) {\n  return new (t || NgMapAsyncCallbackApiLoader)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(NG_MAP_CONFIG_TOKEN, 8));\n};\n\nNgMapAsyncCallbackApiLoader.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: NgMapAsyncCallbackApiLoader,\n  factory: NgMapAsyncCallbackApiLoader.ɵfac\n});\n/** @nocollapse */\n\nNgMapAsyncCallbackApiLoader.ctorParameters = function () {\n  return [{\n    type: NgZone\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [NG_MAP_CONFIG_TOKEN]\n    }]\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NgMapAsyncCallbackApiLoader, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: ɵngcc0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [NG_MAP_CONFIG_TOKEN]\n      }]\n    }];\n  }, null);\n})();\n\nvar NgMapAsyncApiLoader = /*#__PURE__*/function (_NgMapApiLoader2) {\n  _inherits(NgMapAsyncApiLoader, _NgMapApiLoader2);\n\n  var _super2 = _createSuper(NgMapAsyncApiLoader);\n\n  /**\n   * @param {?} config\n   */\n  function NgMapAsyncApiLoader(config) {\n    _classCallCheck(this, NgMapAsyncApiLoader);\n\n    return _super2.call(this, config);\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(NgMapAsyncApiLoader, [{\n    key: \"load\",\n    value: function load() {\n      var _this6 = this;\n\n      if (typeof window === 'undefined') {\n        return;\n      }\n\n      if (isMapsApiLoaded()) {\n        this.api$.next(google.maps);\n      } else if (!document.querySelector('#ngui-map-api')) {\n        var\n        /** @type {?} */\n        script = document.createElement('script');\n        script.id = 'ngui-map-api';\n        script.async = true;\n\n        script.onload = function () {\n          return _this6.api$.next(google.maps);\n        };\n\n        script.src = this.config.apiUrl;\n        document.querySelector('body').appendChild(script);\n      }\n    }\n  }]);\n\n  return NgMapAsyncApiLoader;\n}(NgMapApiLoader);\n\nNgMapAsyncApiLoader.ɵfac = function NgMapAsyncApiLoader_Factory(t) {\n  return new (t || NgMapAsyncApiLoader)(ɵngcc0.ɵɵinject(NG_MAP_CONFIG_TOKEN, 8));\n};\n\nNgMapAsyncApiLoader.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: NgMapAsyncApiLoader,\n  factory: NgMapAsyncApiLoader.ɵfac\n});\n/** @nocollapse */\n\nNgMapAsyncApiLoader.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [NG_MAP_CONFIG_TOKEN]\n    }]\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NgMapAsyncApiLoader, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [NG_MAP_CONFIG_TOKEN]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n *   Provides [defered/promise API](https://docs.angularjs.org/api/ng/service/$q)\n *   service for Google Geocoder service\n */\n\n\nvar GeoCoder = /*#__PURE__*/function () {\n  /**\n   * @param {?} apiLoader\n   */\n  function GeoCoder(apiLoader) {\n    _classCallCheck(this, GeoCoder);\n\n    this.apiLoader = apiLoader;\n    this.apiLoaderSubs = [];\n  }\n  /**\n   * @param {?} options\n   * @return {?}\n   */\n\n\n  _createClass(GeoCoder, [{\n    key: \"geocode\",\n    value: function geocode(options) {\n      var _this7 = this;\n\n      return new Observable(function (responseObserver) {\n        _this7.apiLoaderSubs.push(_this7.apiLoader.api$.subscribe(function () {\n          return _this7.requestGeocode(options, responseObserver);\n        }));\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.apiLoaderSubs.map(function (sub) {\n        return sub.unsubscribe();\n      });\n    }\n    /**\n     * @param {?} options\n     * @param {?} observer\n     * @return {?}\n     */\n\n  }, {\n    key: \"requestGeocode\",\n    value: function requestGeocode(options, observer) {\n      var\n      /** @type {?} */\n      geocoder = new google.maps.Geocoder();\n      geocoder.geocode(options, function (results, status) {\n        if (status === google.maps.GeocoderStatus.OK) {\n          observer.next(results);\n          observer.complete();\n        } else {\n          observer.error(results);\n        }\n      });\n    }\n  }]);\n\n  return GeoCoder;\n}();\n\nGeoCoder.ɵfac = function GeoCoder_Factory(t) {\n  return new (t || GeoCoder)(ɵngcc0.ɵɵinject(NgMapApiLoader));\n};\n\nGeoCoder.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: GeoCoder,\n  factory: GeoCoder.ɵfac\n});\n/** @nocollapse */\n\nGeoCoder.ctorParameters = function () {\n  return [{\n    type: NgMapApiLoader\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(GeoCoder, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: NgMapApiLoader\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * collection of map instance-related properties and methods\n */\n\n\nvar NguiMap = /*#__PURE__*/function () {\n  /**\n   * @param {?} geoCoder\n   * @param {?} optionBuilder\n   * @param {?} zone\n   */\n  function NguiMap(geoCoder, optionBuilder, zone) {\n    var _this8 = this;\n\n    _classCallCheck(this, NguiMap);\n\n    this.geoCoder = geoCoder;\n    this.optionBuilder = optionBuilder;\n    this.zone = zone;\n\n    this.updateGoogleObject = function (object, changes) {\n      var\n      /** @type {?} */\n      val,\n      /** @type {?} */\n      currentValue,\n      /** @type {?} */\n      setMethodName;\n\n      if (object) {\n        for (var\n        /** @type {?} */\n        key in changes) {\n          setMethodName = \"set\".concat(key.replace(/^[a-z]/, function (x) {\n            return x.toUpperCase();\n          }));\n          currentValue = changes[key].currentValue;\n\n          if (['position', 'center'].indexOf(key) !== -1 && typeof currentValue === 'string') {\n            // To preserve setMethod name in Observable callback, wrap it as a function, then execute\n            (function (setMethodName) {\n              _this8.geoCoder.geocode({\n                address: currentValue\n              }).subscribe(function (results) {\n                if (typeof object[setMethodName] === 'function') {\n                  object[setMethodName](results[0].geometry.location);\n                } else {\n                  console.error('Not all options are dynamically updatable according to Googles Maps API V3 documentation.\\n' + 'Please check Google Maps API documentation, and use \"setOptions\" instead.');\n                }\n              });\n            })(setMethodName);\n          } else {\n            val = _this8.optionBuilder.googlize(currentValue);\n\n            if (typeof object[setMethodName] === 'function') {\n              object[setMethodName](val);\n            } else {\n              console.error('Not all options are dynamically updatable according to Googles Maps API V3 documentation.\\n' + 'Please check Google Maps API documentation, and use \"setOptions\" instead.');\n            }\n          }\n        }\n      }\n    };\n  }\n  /**\n   * @param {?} definedEvents\n   * @param {?} thisObj\n   * @param {?} prefix\n   * @return {?}\n   */\n\n\n  _createClass(NguiMap, [{\n    key: \"setObjectEvents\",\n    value: function setObjectEvents(definedEvents, thisObj, prefix) {\n      var _this9 = this;\n\n      definedEvents.forEach(function (definedEvent) {\n        var\n        /** @type {?} */\n        eventName = _this9.getEventName(definedEvent),\n\n        /** @type {?} */\n        zone = _this9.zone;\n\n        zone.runOutsideAngular(function () {\n          thisObj[prefix].addListener(eventName, function (event) {\n            var\n            /** @type {?} */\n            param = event ? event : {};\n            param.target = this;\n            zone.run(function () {\n              return thisObj[definedEvent].emit(param);\n            });\n          });\n        });\n      });\n    }\n    /**\n     * @param {?} definedEvents\n     * @param {?} thisObj\n     * @param {?} prefix\n     * @return {?}\n     */\n\n  }, {\n    key: \"clearObjectEvents\",\n    value: function clearObjectEvents(definedEvents, thisObj, prefix) {\n      var _this10 = this;\n\n      definedEvents.forEach(function (definedEvent) {\n        var\n        /** @type {?} */\n        eventName = _this10.getEventName(definedEvent);\n\n        _this10.zone.runOutsideAngular(function () {\n          if (thisObj[prefix]) {\n            google.maps.event.clearListeners(thisObj[prefix], eventName);\n          }\n        });\n      });\n\n      if (thisObj[prefix]) {\n        if (thisObj[prefix].setMap) {\n          thisObj[prefix].setMap(null);\n        }\n\n        delete thisObj[prefix].nguiMapComponent;\n        delete thisObj[prefix];\n      }\n    }\n    /**\n     * @param {?} definedEvent\n     * @return {?}\n     */\n\n  }, {\n    key: \"getEventName\",\n    value: function getEventName(definedEvent) {\n      return definedEvent.replace(/([A-Z])/g, function ($1) {\n        return \"_\".concat($1.toLowerCase());\n      }) // positionChanged -> position_changed\n      .replace(/^map_/, ''); // map_click -> click  to avoid DOM conflicts\n    }\n  }]);\n\n  return NguiMap;\n}();\n\nNguiMap.ɵfac = function NguiMap_Factory(t) {\n  return new (t || NguiMap)(ɵngcc0.ɵɵinject(GeoCoder), ɵngcc0.ɵɵinject(OptionBuilder), ɵngcc0.ɵɵinject(ɵngcc0.NgZone));\n};\n\nNguiMap.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: NguiMap,\n  factory: NguiMap.ɵfac\n});\n/** @nocollapse */\n\nNguiMap.ctorParameters = function () {\n  return [{\n    type: GeoCoder\n  }, {\n    type: OptionBuilder\n  }, {\n    type: NgZone\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NguiMap, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: GeoCoder\n    }, {\n      type: OptionBuilder\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar INPUTS = ['backgroundColor', 'center', 'disableDefaultUI', 'disableDoubleClickZoom', 'draggable', 'draggableCursor', 'draggingCursor', 'heading', 'keyboardShortcuts', 'mapMaker', 'mapTypeControl', 'mapTypeId', 'maxZoom', 'minZoom', 'noClear', 'overviewMapControl', 'panControl', 'panControlOptions', 'rotateControl', 'scaleControl', 'scrollwheel', 'streetView', 'styles', 'tilt', 'zoom', 'streetViewControl', 'zoomControl', 'zoomControlOptions', 'mapTypeControlOptions', 'overviewMapControlOptions', 'rotateControlOptions', 'scaleControlOptions', 'streetViewControlOptions', 'fullscreenControl', 'fullscreenControlOptions', 'options', 'geoFallbackCenter'];\nvar OUTPUTS = ['bounds_changed', 'center_changed', 'click', 'dblclick', 'drag', 'dragend', 'dragstart', 'heading_changed', 'idle', 'maptypeid_changed', 'mousemove', 'mouseout', 'mouseover', 'projection_changed', 'resize', 'rightclick', 'tilesloaded', 'tile_changed', 'zoom_changed', 'mapClick', 'mapMouseover', 'mapMouseout', 'mapMousemove', 'mapDrag', 'mapDragend', 'mapDragstart'];\n\nvar NguiMapComponent = /*#__PURE__*/function () {\n  /**\n   * @param {?} optionBuilder\n   * @param {?} elementRef\n   * @param {?} geolocation\n   * @param {?} geoCoder\n   * @param {?} nguiMap\n   * @param {?} apiLoader\n   * @param {?} zone\n   */\n  function NguiMapComponent(optionBuilder, elementRef, geolocation, geoCoder, nguiMap, apiLoader, zone) {\n    var _this11 = this;\n\n    _classCallCheck(this, NguiMapComponent);\n\n    this.optionBuilder = optionBuilder;\n    this.elementRef = elementRef;\n    this.geolocation = geolocation;\n    this.geoCoder = geoCoder;\n    this.nguiMap = nguiMap;\n    this.apiLoader = apiLoader;\n    this.zone = zone;\n    this.mapReady$ = new EventEmitter();\n    this.mapOptions = {};\n    this.inputChanges$ = new Subject();\n    this.infoWindows = {};\n    this.mapIdledOnce = false;\n    this.initializeMapAfterDisplayed = false;\n    apiLoader.load(); // all outputs needs to be initialized,\n    // http://stackoverflow.com/questions/37765519/angular2-directive-cannot-read-property-subscribe-of-undefined-with-outputs\n\n    OUTPUTS.forEach(function (output) {\n      return _this11[output] = new EventEmitter();\n    });\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(NguiMapComponent, [{\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      var _this12 = this;\n\n      this.apiLoaderSub = this.apiLoader.api$.pipe(first()).subscribe(function () {\n        return _this12.initializeMap();\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngAfterViewChecked\",\n    value: function ngAfterViewChecked() {\n      if (this.initializeMapAfterDisplayed && this.el && this.el.offsetWidth > 0) {\n        this.initializeMap();\n      }\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      this.inputChanges$.next(changes);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"initializeMap\",\n    value: function initializeMap() {\n      var _this13 = this;\n\n      this.el = this.elementRef.nativeElement.querySelector('.google-map');\n\n      if (this.el && this.el.offsetWidth === 0) {\n        this.initializeMapAfterDisplayed = true;\n        return;\n      }\n\n      this.initializeMapAfterDisplayed = false;\n      this.mapOptions = this.optionBuilder.googlizeAllInputs(INPUTS, this);\n      this.mapOptions.zoom = this.mapOptions.zoom || 15;\n      typeof this.mapOptions.center === 'string' && delete this.mapOptions.center;\n      this.zone.runOutsideAngular(function () {\n        _this13.map = new google.maps.Map(_this13.el, _this13.mapOptions);\n        _this13.map['mapObjectName'] = 'NguiMapComponent';\n\n        if (!_this13.mapOptions.center) {\n          // if center is not given as lat/lng\n          _this13.setCenter();\n        } // set google events listeners and emits to this outputs listeners\n\n\n        _this13.nguiMap.setObjectEvents(OUTPUTS, _this13, 'map');\n\n        _this13.map.addListener('idle', function () {\n          if (!_this13.mapIdledOnce) {\n            _this13.mapIdledOnce = true;\n            setTimeout(function () {\n              // Why????, subsribe and emit must not be in the same cycle???\n              _this13.mapReady$.emit(_this13.map);\n            });\n          }\n        }); // update map when input changes\n\n\n        _this13.inputChanges$.pipe(debounceTime(1000), tap(function (changes) {\n          return _this13.nguiMap.updateGoogleObject(_this13.map, changes);\n        })).subscribe();\n\n        if (typeof window !== 'undefined' && window['nguiMapRef']) {\n          // expose map object for test and debugging on (<any>window)\n          window['nguiMapRef'].map = _this13.map;\n        }\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"setCenter\",\n    value: function setCenter() {\n      var _this14 = this;\n\n      if (!this['center']) {\n        // center is not from user. Thus, we set the current location\n        this.geolocation.getCurrentPosition().subscribe(function (position) {\n          var\n          /** @type {?} */\n          latLng = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);\n\n          _this14.map.setCenter(latLng);\n        }, function (error) {\n          console.error('ngui-map: Error finding the current position');\n\n          _this14.map.setCenter(_this14.mapOptions['geoFallbackCenter'] || new google.maps.LatLng(0, 0));\n        });\n      } else if (typeof this['center'] === 'string') {\n        this.geoCoder.geocode({\n          address: this['center']\n        }).subscribe(function (results) {\n          _this14.map.setCenter(results[0].geometry.location);\n        }, function (error) {\n          _this14.map.setCenter(_this14.mapOptions['geoFallbackCenter'] || new google.maps.LatLng(0, 0));\n        });\n      }\n    }\n    /**\n     * @param {?} id\n     * @param {?} anchor\n     * @return {?}\n     */\n\n  }, {\n    key: \"openInfoWindow\",\n    value: function openInfoWindow(id, anchor) {\n      this.infoWindows[id].open(anchor);\n    }\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n\n  }, {\n    key: \"closeInfoWindow\",\n    value: function closeInfoWindow(id) {\n      // if infoWindow for id exists, close the infoWindow\n      if (this.infoWindows[id]) this.infoWindows[id].close();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.inputChanges$.complete();\n\n      if (this.el && !this.initializeMapAfterDisplayed) {\n        this.nguiMap.clearObjectEvents(OUTPUTS, this, 'map');\n      }\n\n      if (this.apiLoaderSub) {\n        this.apiLoaderSub.unsubscribe();\n      }\n    }\n    /**\n     * @param {?} mapObjectName\n     * @param {?} mapObject\n     * @return {?}\n     */\n\n  }, {\n    key: \"addToMapObjectGroup\",\n    value: function addToMapObjectGroup(mapObjectName, mapObject) {\n      var\n      /** @type {?} */\n      groupName = toCamelCase(mapObjectName.toLowerCase()) + 's'; // e.g. markers\n\n      this.map[groupName] = this.map[groupName] || [];\n      this.map[groupName].push(mapObject);\n    }\n    /**\n     * @param {?} mapObjectName\n     * @param {?} mapObject\n     * @return {?}\n     */\n\n  }, {\n    key: \"removeFromMapObjectGroup\",\n    value: function removeFromMapObjectGroup(mapObjectName, mapObject) {\n      var\n      /** @type {?} */\n      groupName = toCamelCase(mapObjectName.toLowerCase()) + 's'; // e.g. markers\n\n      if (this.map && this.map[groupName]) {\n        var\n        /** @type {?} */\n        index = this.map[groupName].indexOf(mapObject);\n        index > -1 && this.map[groupName].splice(index, 1);\n      }\n    }\n  }]);\n\n  return NguiMapComponent;\n}();\n\nNguiMapComponent.ɵfac = function NguiMapComponent_Factory(t) {\n  return new (t || NguiMapComponent)(ɵngcc0.ɵɵdirectiveInject(OptionBuilder), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(NavigatorGeolocation), ɵngcc0.ɵɵdirectiveInject(GeoCoder), ɵngcc0.ɵɵdirectiveInject(NguiMap), ɵngcc0.ɵɵdirectiveInject(NgMapApiLoader), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n};\n\nNguiMapComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: NguiMapComponent,\n  selectors: [[\"ngui-map\"]],\n  inputs: {\n    backgroundColor: \"backgroundColor\",\n    center: \"center\",\n    disableDefaultUI: \"disableDefaultUI\",\n    disableDoubleClickZoom: \"disableDoubleClickZoom\",\n    draggable: \"draggable\",\n    draggableCursor: \"draggableCursor\",\n    draggingCursor: \"draggingCursor\",\n    heading: \"heading\",\n    keyboardShortcuts: \"keyboardShortcuts\",\n    mapMaker: \"mapMaker\",\n    mapTypeControl: \"mapTypeControl\",\n    mapTypeId: \"mapTypeId\",\n    maxZoom: \"maxZoom\",\n    minZoom: \"minZoom\",\n    noClear: \"noClear\",\n    overviewMapControl: \"overviewMapControl\",\n    panControl: \"panControl\",\n    panControlOptions: \"panControlOptions\",\n    rotateControl: \"rotateControl\",\n    scaleControl: \"scaleControl\",\n    scrollwheel: \"scrollwheel\",\n    streetView: \"streetView\",\n    styles: \"styles\",\n    tilt: \"tilt\",\n    zoom: \"zoom\",\n    streetViewControl: \"streetViewControl\",\n    zoomControl: \"zoomControl\",\n    zoomControlOptions: \"zoomControlOptions\",\n    mapTypeControlOptions: \"mapTypeControlOptions\",\n    overviewMapControlOptions: \"overviewMapControlOptions\",\n    rotateControlOptions: \"rotateControlOptions\",\n    scaleControlOptions: \"scaleControlOptions\",\n    streetViewControlOptions: \"streetViewControlOptions\",\n    fullscreenControl: \"fullscreenControl\",\n    fullscreenControlOptions: \"fullscreenControlOptions\",\n    options: \"options\",\n    geoFallbackCenter: \"geoFallbackCenter\"\n  },\n  outputs: {\n    bounds_changed: \"bounds_changed\",\n    center_changed: \"center_changed\",\n    click: \"click\",\n    dblclick: \"dblclick\",\n    drag: \"drag\",\n    dragend: \"dragend\",\n    dragstart: \"dragstart\",\n    heading_changed: \"heading_changed\",\n    idle: \"idle\",\n    maptypeid_changed: \"maptypeid_changed\",\n    mousemove: \"mousemove\",\n    mouseout: \"mouseout\",\n    mouseover: \"mouseover\",\n    projection_changed: \"projection_changed\",\n    resize: \"resize\",\n    rightclick: \"rightclick\",\n    tilesloaded: \"tilesloaded\",\n    tile_changed: \"tile_changed\",\n    zoom_changed: \"zoom_changed\",\n    mapClick: \"mapClick\",\n    mapMouseover: \"mapMouseover\",\n    mapMouseout: \"mapMouseout\",\n    mapMousemove: \"mapMousemove\",\n    mapDrag: \"mapDrag\",\n    mapDragend: \"mapDragend\",\n    mapDragstart: \"mapDragstart\",\n    mapReady$: \"mapReady$\"\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([NguiMap, OptionBuilder, GeoCoder, NavigatorGeolocation]), ɵngcc0.ɵɵNgOnChangesFeature],\n  ngContentSelectors: _c0,\n  decls: 2,\n  vars: 0,\n  consts: [[1, \"google-map\"]],\n  template: function NguiMapComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelement(0, \"div\", 0);\n      ɵngcc0.ɵɵprojection(1);\n    }\n  },\n  styles: [\"\\n    ngui-map {display: block; height: 300px;}\\n    .google-map {width: 100%; height: 100%}\\n  \"],\n  encapsulation: 2\n});\n/** @nocollapse */\n\nNguiMapComponent.ctorParameters = function () {\n  return [{\n    type: OptionBuilder\n  }, {\n    type: ElementRef\n  }, {\n    type: NavigatorGeolocation\n  }, {\n    type: GeoCoder\n  }, {\n    type: NguiMap\n  }, {\n    type: NgMapApiLoader\n  }, {\n    type: NgZone\n  }];\n};\n\nNguiMapComponent.propDecorators = {\n  \"mapReady$\": [{\n    type: Output\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NguiMapComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngui-map',\n      providers: [NguiMap, OptionBuilder, GeoCoder, NavigatorGeolocation],\n      styles: [\"\\n    ngui-map {display: block; height: 300px;}\\n    .google-map {width: 100%; height: 100%}\\n  \"],\n      inputs: INPUTS,\n      outputs: OUTPUTS,\n      encapsulation: ViewEncapsulation.None,\n      template: \"\\n    <div class=\\\"google-map\\\"></div>\\n    <ng-content></ng-content>\\n  \"\n    }]\n  }], function () {\n    return [{\n      type: OptionBuilder\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: NavigatorGeolocation\n    }, {\n      type: GeoCoder\n    }, {\n      type: NguiMap\n    }, {\n      type: NgMapApiLoader\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, {\n    mapReady$: [{\n      type: Output\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar INPUTS$1 = [];\nvar OUTPUTS$1 = [];\n\nvar BicyclingLayer = /*#__PURE__*/function (_BaseMapDirective) {\n  _inherits(BicyclingLayer, _BaseMapDirective);\n\n  var _super3 = _createSuper(BicyclingLayer);\n\n  /**\n   * @param {?} nguiMapComp\n   */\n  function BicyclingLayer(nguiMapComp) {\n    _classCallCheck(this, BicyclingLayer);\n\n    return _super3.call(this, nguiMapComp, 'BicyclingLayer', INPUTS$1, OUTPUTS$1);\n  }\n\n  return BicyclingLayer;\n}(BaseMapDirective);\n\nBicyclingLayer.ɵfac = function BicyclingLayer_Factory(t) {\n  return new (t || BicyclingLayer)(ɵngcc0.ɵɵdirectiveInject(NguiMapComponent));\n};\n\nBicyclingLayer.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: BicyclingLayer,\n  selectors: [[\"bicycling-layer\"]],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/** @nocollapse */\n\nBicyclingLayer.ctorParameters = function () {\n  return [{\n    type: NguiMapComponent\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(BicyclingLayer, [{\n    type: Directive,\n    args: [{\n      selector: 'ngui-map > bicycling-layer',\n      inputs: INPUTS$1,\n      outputs: OUTPUTS$1\n    }]\n  }], function () {\n    return [{\n      type: NguiMapComponent\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar INPUTS$2 = ['content', 'disableAutoPan', 'maxWidth', 'pixelOffset', 'position', 'zIndex', 'options'];\nvar OUTPUTS$2 = ['closeclick', 'content_changed', 'domready', 'position_changed', 'zindex_changed'];\n\nvar InfoWindow = /*#__PURE__*/function () {\n  /**\n   * @param {?} elementRef\n   * @param {?} nguiMap\n   * @param {?} nguiMapComponent\n   */\n  function InfoWindow(elementRef, nguiMap, nguiMapComponent) {\n    var _this15 = this;\n\n    _classCallCheck(this, InfoWindow);\n\n    this.elementRef = elementRef;\n    this.nguiMap = nguiMap;\n    this.nguiMapComponent = nguiMapComponent;\n    this.initialized$ = new EventEmitter();\n    this.objectOptions = {};\n    this.inputChanges$ = new Subject();\n    this.elementRef.nativeElement.style.display = 'none';\n    OUTPUTS$2.forEach(function (output) {\n      return _this15[output] = new EventEmitter();\n    });\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(InfoWindow, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this16 = this;\n\n      if (this.nguiMapComponent.mapIdledOnce) {\n        // map is ready already\n        this.initialize();\n      } else {\n        this.nguiMapComponent.mapReady$.subscribe(function (map) {\n          return _this16.initialize();\n        });\n      }\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      this.inputChanges$.next(changes);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"initialize\",\n    value: function initialize() {\n      var _this17 = this;\n\n      this.objectOptions = this.nguiMapComponent.optionBuilder.googlizeAllInputs(INPUTS$2, this);\n      this.infoWindow = new google.maps.InfoWindow(this.objectOptions);\n      this.infoWindow['mapObjectName'] = 'InfoWindow'; // register infoWindow ids to NguiMap, so that it can be opened by id\n\n      if (this.elementRef.nativeElement.id) {\n        this.nguiMapComponent.infoWindows[this.elementRef.nativeElement.id] = this;\n      } else {\n        console.error('An InfoWindow must have an id. e.g. id=\"detail\"');\n      } // set google events listeners and emits to this outputs listeners\n\n\n      this.nguiMap.setObjectEvents(OUTPUTS$2, this, 'infoWindow'); // update object when input changes\n\n      this.inputChanges$.pipe(debounceTime(1000), tap(function (changes) {\n        return _this17.nguiMap.updateGoogleObject(_this17.infoWindow, changes);\n      })).subscribe();\n      this.nguiMapComponent.addToMapObjectGroup('InfoWindow', this.infoWindow);\n      this.initialized$.emit(this.infoWindow);\n    }\n    /**\n     * @param {?} anchor\n     * @return {?}\n     */\n\n  }, {\n    key: \"open\",\n    value: function open(anchor) {\n      // set content and open it\n      this.infoWindow.setContent(this.template.element.nativeElement);\n      this.infoWindow.open(this.nguiMapComponent.map, anchor);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      // check if infoWindow exists, and closes it\n      if (this.infoWindow) this.infoWindow.close();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.inputChanges$.complete();\n\n      if (this.infoWindow) {\n        this.nguiMap.clearObjectEvents(OUTPUTS$2, this, 'infoWindow');\n        delete this.infoWindow;\n      }\n    }\n  }]);\n\n  return InfoWindow;\n}();\n\nInfoWindow.ɵfac = function InfoWindow_Factory(t) {\n  return new (t || InfoWindow)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(NguiMap), ɵngcc0.ɵɵdirectiveInject(NguiMapComponent));\n};\n\nInfoWindow.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: InfoWindow,\n  selectors: [[\"info-window\"]],\n  viewQuery: function InfoWindow_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c1, true, ViewContainerRef);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.template = _t.first);\n    }\n  },\n  inputs: {\n    content: \"content\",\n    disableAutoPan: \"disableAutoPan\",\n    maxWidth: \"maxWidth\",\n    pixelOffset: \"pixelOffset\",\n    position: \"position\",\n    zIndex: \"zIndex\",\n    options: \"options\"\n  },\n  outputs: {\n    closeclick: \"closeclick\",\n    content_changed: \"content_changed\",\n    domready: \"domready\",\n    position_changed: \"position_changed\",\n    zindex_changed: \"zindex_changed\",\n    initialized$: \"initialized$\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  ngContentSelectors: _c0,\n  decls: 3,\n  vars: 0,\n  consts: [[\"template\", \"\"]],\n  template: function InfoWindow_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelementStart(0, \"div\", null, 0);\n      ɵngcc0.ɵɵprojection(2);\n      ɵngcc0.ɵɵelementEnd();\n    }\n  },\n  encapsulation: 2\n});\n/** @nocollapse */\n\nInfoWindow.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: NguiMap\n  }, {\n    type: NguiMapComponent\n  }];\n};\n\nInfoWindow.propDecorators = {\n  \"initialized$\": [{\n    type: Output\n  }],\n  \"template\": [{\n    type: ViewChild,\n    args: ['template', {\n      read: ViewContainerRef\n    }]\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(InfoWindow, [{\n    type: Component,\n    args: [{\n      selector: 'ngui-map > info-window',\n      inputs: INPUTS$2,\n      outputs: OUTPUTS$2,\n      template: \"<div #template><ng-content></ng-content></div>\"\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: NguiMap\n    }, {\n      type: NguiMapComponent\n    }];\n  }, {\n    initialized$: [{\n      type: Output\n    }],\n    template: [{\n      type: ViewChild,\n      args: ['template', {\n        read: ViewContainerRef\n      }]\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar INPUTS$3 = ['position']; // to avoid DOM event conflicts map_*\n\nvar OUTPUTS$3 = ['animationChanged', 'click', 'clickableChanged', 'cursorChanged', 'dblclick', 'drag', 'dragend', 'draggableChanged', 'dragstart', 'flatChanged', 'iconChanged', 'mousedown', 'mouseout', 'mouseover', 'mouseup', 'positionChanged', 'rightclick', 'shapeChanged', 'titleChanged', 'visibleChanged', 'zindexChanged', 'map_click', 'map_mouseover', 'map_mouseout', 'map_mouseup', 'map_mousedown', 'map_drag', 'map_dragend'];\n/**\n * Wrapper to a create extend OverlayView at runtime, only after google maps is loaded.\n * Otherwise throws a google is unknown error.\n * @param {?} htmlEl\n * @param {?} position\n * @return {?}\n */\n\nfunction getCustomMarkerOverlayView(htmlEl, position) {\n  var CustomMarkerOverlayView = /*#__PURE__*/function (_google$maps$OverlayV) {\n    _inherits(CustomMarkerOverlayView, _google$maps$OverlayV);\n\n    var _super4 = _createSuper(CustomMarkerOverlayView);\n\n    /**\n     * @param {?} htmlEl\n     * @param {?} position\n     */\n    function CustomMarkerOverlayView(htmlEl, position) {\n      var _this18;\n\n      _classCallCheck(this, CustomMarkerOverlayView);\n\n      _this18 = _super4.call(this);\n      _this18.visible = true;\n\n      _this18.setPosition = function (position) {\n        _this18.htmlEl.style.visibility = 'hidden';\n\n        if (position.constructor.name === 'Array') {\n          _this18.position = new google.maps.LatLng(position[0], position[1]);\n        } else if (typeof position === 'string') {\n          var\n          /** @type {?} */\n          geocoder = new google.maps.Geocoder();\n          geocoder.geocode({\n            address: position\n          }, function (results, status) {\n            if (status === google.maps.GeocoderStatus.OK) {\n              _this18.setPosition(results[0].geometry.location);\n            } else {}\n          });\n        } else if (position && typeof position.lng === 'function') {\n          _this18.position = position;\n        }\n\n        if (_this18.getProjection() && typeof _this18.position.lng === 'function') {\n          var\n          /** @type {?} */\n          positionOnMap = function positionOnMap() {\n            var\n            /** @type {?} */\n            projection = _this18.getProjection();\n\n            if (!projection) {\n              return;\n            }\n\n            var\n            /** @type {?} */\n            posPixel = projection.fromLatLngToDivPixel(_this18.position);\n            var\n            /** @type {?} */\n            x = Math.round(posPixel.x - _this18.htmlEl.offsetWidth / 2);\n            var\n            /** @type {?} */\n            y = Math.round(posPixel.y - _this18.htmlEl.offsetHeight / 2);\n            _this18.htmlEl.style.left = x + 'px';\n            _this18.htmlEl.style.top = y + 'px';\n            _this18.htmlEl.style.visibility = 'visible';\n          };\n\n          if (_this18.htmlEl.offsetWidth && _this18.htmlEl.offsetHeight) {\n            positionOnMap();\n          } else {\n            setTimeout(function () {\n              return positionOnMap();\n            });\n          }\n        }\n      };\n\n      _this18.htmlEl = htmlEl;\n      _this18.position = position;\n      return _this18;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    _createClass(CustomMarkerOverlayView, [{\n      key: \"onAdd\",\n      value: function onAdd() {\n        this.getPanes().overlayMouseTarget.appendChild(this.htmlEl); // required for correct display inside google maps container\n\n        this.htmlEl.style.position = 'absolute';\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"draw\",\n      value: function draw() {\n        this.setPosition(this.position);\n        this.setZIndex(this.zIndex);\n        this.setVisible(this.visible);\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"onRemove\",\n      value: function onRemove() {//\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"getPosition\",\n      value: function getPosition() {\n        return this.position;\n      }\n      /**\n       * @param {?} zIndex\n       * @return {?}\n       */\n\n    }, {\n      key: \"setZIndex\",\n      value: function setZIndex(zIndex) {\n        zIndex && (this.zIndex = zIndex);\n        /* jshint ignore:line */\n\n        this.htmlEl.style.zIndex = this.zIndex;\n      }\n      /**\n       * @param {?} visible\n       * @return {?}\n       */\n\n    }, {\n      key: \"setVisible\",\n      value: function setVisible(visible) {\n        this.htmlEl.style.display = visible ? 'inline-block' : 'none';\n        this.visible = visible;\n      }\n    }]);\n\n    return CustomMarkerOverlayView;\n  }(google.maps.OverlayView);\n\n  return new CustomMarkerOverlayView(htmlEl, position);\n}\n\nvar CustomMarker = /*#__PURE__*/function () {\n  /**\n   * @param {?} nguiMapComponent\n   * @param {?} elementRef\n   * @param {?} nguiMap\n   */\n  function CustomMarker(nguiMapComponent, elementRef, nguiMap) {\n    var _this19 = this;\n\n    _classCallCheck(this, CustomMarker);\n\n    this.nguiMapComponent = nguiMapComponent;\n    this.elementRef = elementRef;\n    this.nguiMap = nguiMap;\n    this.initialized$ = new EventEmitter();\n    this.inputChanges$ = new Subject();\n    this.elementRef.nativeElement.style.display = 'none';\n    OUTPUTS$3.forEach(function (output) {\n      return _this19[output] = new EventEmitter();\n    });\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(CustomMarker, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this20 = this;\n\n      if (this.nguiMapComponent.mapIdledOnce) {\n        // map is ready already\n        this.initialize();\n      } else {\n        this.nguiMapComponent.mapReady$.subscribe(function (map) {\n          return _this20.initialize();\n        });\n      }\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      this.inputChanges$.next(changes);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.inputChanges$.complete();\n      this.nguiMapComponent.removeFromMapObjectGroup('CustomMarker', this.mapObject);\n\n      if (this.mapObject) {\n        this.nguiMap.clearObjectEvents(OUTPUTS$3, this, 'mapObject');\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"initialize\",\n    value: function initialize() {\n      var _this21 = this;\n\n      this.el = this.elementRef.nativeElement;\n      this.mapObject = getCustomMarkerOverlayView(this.el, this['position']);\n      this.mapObject.setMap(this.nguiMapComponent.map); // set google events listeners and emits to this outputs listeners\n\n      this.nguiMap.setObjectEvents(OUTPUTS$3, this, 'mapObject'); // update object when input changes\n\n      this.inputChanges$.pipe(debounceTime(1000), tap(function (changes) {\n        return _this21.nguiMap.updateGoogleObject(_this21.mapObject, changes);\n      })).subscribe();\n      this.nguiMapComponent.addToMapObjectGroup('CustomMarker', this.mapObject);\n      this.initialized$.emit(this.mapObject);\n    }\n  }]);\n\n  return CustomMarker;\n}();\n\nCustomMarker.ɵfac = function CustomMarker_Factory(t) {\n  return new (t || CustomMarker)(ɵngcc0.ɵɵdirectiveInject(NguiMapComponent), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(NguiMap));\n};\n\nCustomMarker.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: CustomMarker,\n  selectors: [[\"custom-marker\"]],\n  inputs: {\n    position: \"position\"\n  },\n  outputs: {\n    animationChanged: \"animationChanged\",\n    click: \"click\",\n    clickableChanged: \"clickableChanged\",\n    cursorChanged: \"cursorChanged\",\n    dblclick: \"dblclick\",\n    drag: \"drag\",\n    dragend: \"dragend\",\n    draggableChanged: \"draggableChanged\",\n    dragstart: \"dragstart\",\n    flatChanged: \"flatChanged\",\n    iconChanged: \"iconChanged\",\n    mousedown: \"mousedown\",\n    mouseout: \"mouseout\",\n    mouseover: \"mouseover\",\n    mouseup: \"mouseup\",\n    positionChanged: \"positionChanged\",\n    rightclick: \"rightclick\",\n    shapeChanged: \"shapeChanged\",\n    titleChanged: \"titleChanged\",\n    visibleChanged: \"visibleChanged\",\n    zindexChanged: \"zindexChanged\",\n    map_click: \"map_click\",\n    map_mouseover: \"map_mouseover\",\n    map_mouseout: \"map_mouseout\",\n    map_mouseup: \"map_mouseup\",\n    map_mousedown: \"map_mousedown\",\n    map_drag: \"map_drag\",\n    map_dragend: \"map_dragend\",\n    initialized$: \"initialized$\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  ngContentSelectors: _c0,\n  decls: 1,\n  vars: 0,\n  template: function CustomMarker_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵprojection(0);\n    }\n  },\n  encapsulation: 2\n});\n/** @nocollapse */\n\nCustomMarker.ctorParameters = function () {\n  return [{\n    type: NguiMapComponent\n  }, {\n    type: ElementRef\n  }, {\n    type: NguiMap\n  }];\n};\n\nCustomMarker.propDecorators = {\n  \"initialized$\": [{\n    type: Output\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(CustomMarker, [{\n    type: Component,\n    args: [{\n      selector: 'ngui-map > custom-marker',\n      inputs: INPUTS$3,\n      outputs: OUTPUTS$3,\n      template: \"\\n    <ng-content></ng-content>\\n  \"\n    }]\n  }], function () {\n    return [{\n      type: NguiMapComponent\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: NguiMap\n    }];\n  }, {\n    initialized$: [{\n      type: Output\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar INPUTS$4 = ['center', 'clickable', 'draggable', 'editable', 'fillColor', 'fillOpacity', 'map', 'radius', 'strokeColor', 'strokeOpacity', 'strokePosition', 'strokeWeight', 'visible', 'zIndex', 'options', 'geoFallbackCenter'];\nvar OUTPUTS$4 = ['centerChanged', 'click', 'dblclick', 'drag', 'dragend', 'dragstart', 'mousedown', 'mousemove', 'mouseout', 'mouseover', 'mouseup', 'radiusChanged', 'rightclick'];\n\nvar Circle = /*#__PURE__*/function (_BaseMapDirective2) {\n  _inherits(Circle, _BaseMapDirective2);\n\n  var _super5 = _createSuper(Circle);\n\n  /**\n   * @param {?} nguiMapComp\n   */\n  function Circle(nguiMapComp) {\n    var _this22;\n\n    _classCallCheck(this, Circle);\n\n    _this22 = _super5.call(this, nguiMapComp, 'Circle', INPUTS$4, OUTPUTS$4);\n    _this22.nguiMapComp = nguiMapComp;\n    _this22.objectOptions = {};\n    return _this22;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(Circle, [{\n    key: \"initialize\",\n    value: function initialize() {\n      _get(_getPrototypeOf(Circle.prototype), \"initialize\", this).call(this);\n\n      this.setCenter();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"setCenter\",\n    value: function setCenter() {\n      var _this23 = this;\n\n      if (!this['center']) {\n        this._subscriptions.push(this.nguiMapComp.geolocation.getCurrentPosition().subscribe(function (center) {\n          var\n          /** @type {?} */\n          latLng = new google.maps.LatLng(center.coords.latitude, center.coords.longitude);\n\n          _this23.mapObject.setCenter(latLng);\n        }, function (error) {\n          console.error('ngui-map, error in finding the current position');\n\n          _this23.mapObject.setCenter(_this23.objectOptions['geoFallbackCenter'] || new google.maps.LatLng(0, 0));\n        }));\n      } else if (typeof this['center'] === 'string') {\n        this._subscriptions.push(this.nguiMapComp.geoCoder.geocode({\n          address: this['center']\n        }).subscribe(function (results) {\n          _this23.mapObject.setCenter(results[0].geometry.location);\n        }, function (error) {\n          console.error('ngui-map, error in finding location from', _this23['center']);\n\n          _this23.mapObject.setCenter(_this23.objectOptions['geoFallbackCenter'] || new google.maps.LatLng(0, 0));\n        }));\n      }\n    }\n  }]);\n\n  return Circle;\n}(BaseMapDirective);\n\nCircle.ɵfac = function Circle_Factory(t) {\n  return new (t || Circle)(ɵngcc0.ɵɵdirectiveInject(NguiMapComponent));\n};\n\nCircle.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: Circle,\n  selectors: [[\"circle\"], [\"map-circle\"]],\n  inputs: {\n    center: \"center\",\n    clickable: \"clickable\",\n    draggable: \"draggable\",\n    editable: \"editable\",\n    fillColor: \"fillColor\",\n    fillOpacity: \"fillOpacity\",\n    map: \"map\",\n    radius: \"radius\",\n    strokeColor: \"strokeColor\",\n    strokeOpacity: \"strokeOpacity\",\n    strokePosition: \"strokePosition\",\n    strokeWeight: \"strokeWeight\",\n    visible: \"visible\",\n    zIndex: \"zIndex\",\n    options: \"options\",\n    geoFallbackCenter: \"geoFallbackCenter\"\n  },\n  outputs: {\n    centerChanged: \"centerChanged\",\n    click: \"click\",\n    dblclick: \"dblclick\",\n    drag: \"drag\",\n    dragend: \"dragend\",\n    dragstart: \"dragstart\",\n    mousedown: \"mousedown\",\n    mousemove: \"mousemove\",\n    mouseout: \"mouseout\",\n    mouseover: \"mouseover\",\n    mouseup: \"mouseup\",\n    radiusChanged: \"radiusChanged\",\n    rightclick: \"rightclick\"\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/** @nocollapse */\n\nCircle.ctorParameters = function () {\n  return [{\n    type: NguiMapComponent\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(Circle, [{\n    type: Directive,\n    args: [{\n      selector: 'ngui-map>circle, ngui-map>map-circle',\n      inputs: INPUTS$4,\n      outputs: OUTPUTS$4\n    }]\n  }], function () {\n    return [{\n      type: NguiMapComponent\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar INPUTS$5 = ['controlPosition', 'controls', 'drawingMode', 'featureFactory', 'style', 'geoJson', 'geoJsonUrl'];\nvar OUTPUTS$5 = ['addfeature', 'click', 'dblclick', 'mousedown', 'mouseout', 'mouseover', 'mouseup', 'removefeature', 'removeproperty', 'rightclick', 'setgeometry', 'setproperty'];\n\nvar DataLayer = /*#__PURE__*/function (_BaseMapDirective3) {\n  _inherits(DataLayer, _BaseMapDirective3);\n\n  var _super6 = _createSuper(DataLayer);\n\n  /**\n   * @param {?} nguiMapComponent\n   */\n  function DataLayer(nguiMapComponent) {\n    _classCallCheck(this, DataLayer);\n\n    return _super6.call(this, nguiMapComponent, 'Data', INPUTS$5, OUTPUTS$5);\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(DataLayer, [{\n    key: \"initialize\",\n    value: function initialize() {\n      if (this['geoJson']) {\n        // addGeoJson from an object\n        this.nguiMapComponent.map.data.addGeoJson(this['geoJson']);\n      } else if (this['geoJsonUrl']) {\n        // loadGeoJson from a URL\n        this.nguiMapComponent.map.data.loadGeoJson(this['geoJsonUrl']);\n      } else {\n        this.objectOptions = this.optionBuilder.googlizeAllInputs(this.inputs, this);\n        this.nguiMapComponent.map.data.add(this.objectOptions);\n      } // unlike others, data belongs to map. e.g., map.data.loadGeoJson(), map.data.add()\n\n\n      this.mapObject = this.nguiMapComponent.map.data; // set google events listeners and emits to this outputs listeners\n\n      this.nguiMap.setObjectEvents(this.outputs, this, 'mapObject');\n      this.nguiMapComponent.addToMapObjectGroup(this.mapObjectName, this.mapObject);\n      this.initialized$.emit(this.mapObject);\n    }\n  }]);\n\n  return DataLayer;\n}(BaseMapDirective);\n\nDataLayer.ɵfac = function DataLayer_Factory(t) {\n  return new (t || DataLayer)(ɵngcc0.ɵɵdirectiveInject(NguiMapComponent));\n};\n\nDataLayer.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: DataLayer,\n  selectors: [[\"data-layer\"]],\n  inputs: {\n    controlPosition: \"controlPosition\",\n    controls: \"controls\",\n    drawingMode: \"drawingMode\",\n    featureFactory: \"featureFactory\",\n    style: \"style\",\n    geoJson: \"geoJson\",\n    geoJsonUrl: \"geoJsonUrl\"\n  },\n  outputs: {\n    addfeature: \"addfeature\",\n    click: \"click\",\n    dblclick: \"dblclick\",\n    mousedown: \"mousedown\",\n    mouseout: \"mouseout\",\n    mouseover: \"mouseover\",\n    mouseup: \"mouseup\",\n    removefeature: \"removefeature\",\n    removeproperty: \"removeproperty\",\n    rightclick: \"rightclick\",\n    setgeometry: \"setgeometry\",\n    setproperty: \"setproperty\"\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/** @nocollapse */\n\nDataLayer.ctorParameters = function () {\n  return [{\n    type: NguiMapComponent\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(DataLayer, [{\n    type: Directive,\n    args: [{\n      selector: 'ngui-map > data-layer',\n      inputs: INPUTS$5,\n      outputs: OUTPUTS$5\n    }]\n  }], function () {\n    return [{\n      type: NguiMapComponent\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar INPUTS$6 = ['directions', 'draggable', 'hideRouteList', 'infoWindow', 'panel', 'markerOptions', 'polylineOptions', 'preserveViewport', 'routeIndex', 'suppressBicyclingLayer', 'suppressInfoWindows', 'suppressMarkers', 'suppressPolylines'];\nvar OUTPUTS$6 = ['directions_changed'];\n\nvar DirectionsRenderer = /*#__PURE__*/function (_BaseMapDirective4) {\n  _inherits(DirectionsRenderer, _BaseMapDirective4);\n\n  var _super7 = _createSuper(DirectionsRenderer);\n\n  /**\n   * @param {?} nguiMapComponent\n   * @param {?} geolocation\n   */\n  function DirectionsRenderer(nguiMapComponent, geolocation) {\n    var _this24;\n\n    _classCallCheck(this, DirectionsRenderer);\n\n    _this24 = _super7.call(this, nguiMapComponent, 'DirectionsRenderer', INPUTS$6, OUTPUTS$6);\n    _this24.geolocation = geolocation;\n    return _this24;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(DirectionsRenderer, [{\n    key: \"initialize\",\n    value: function initialize() {\n      this.objectOptions = this.optionBuilder.googlizeAllInputs(this.inputs, this);\n\n      if (typeof this.objectOptions['panel'] === 'string') {\n        // find a Node for panel\n        this.objectOptions['panel'] = document.querySelector(this.objectOptions['panel']);\n      }\n\n      this.directionsService = new google.maps.DirectionsService();\n      this.directionsRenderer = new google.maps.DirectionsRenderer(this.objectOptions);\n      this.directionsRenderer.setMap(this.nguiMapComponent.map); // set google events listeners and emidirectionsRenderer to this outputs listeners\n\n      this.showDirections(this.directionsRequest);\n      this.nguiMap.setObjectEvents(this.outputs, this, 'directionsRenderer');\n      this.nguiMapComponent.addToMapObjectGroup(this.mapObjectName, this.mapObject);\n      this.initialized$.emit(this.directionsRenderer);\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      var\n      /** @type {?} */\n      newOptions = {};\n\n      for (var\n      /** @type {?} */\n      key in changes) {\n        if (this.inputs.indexOf(key) !== -1) {\n          newOptions[key] = this.optionBuilder.googlize(changes[key].currentValue);\n        }\n      }\n\n      if (changes['directionsRequest'] && this.directionsRenderer) {\n        this.directionsService && this.showDirections(this.directionsRequest);\n      }\n    }\n    /**\n     * @param {?} directionsRequest\n     * @return {?}\n     */\n\n  }, {\n    key: \"showDirections\",\n    value: function showDirections(directionsRequest) {\n      var _this25 = this;\n\n      this.directionsService.route(directionsRequest, function (response, status) {\n        // in some-case the callback is called during destroy component,\n        // we should make sure directionsRenderer is still defined (cancelling `route` callback is not possible).\n        if (!_this25.directionsRenderer) {\n          return;\n        }\n\n        if (status === google.maps.DirectionsStatus.OK) {\n          _this25.directionsRenderer.setDirections(response);\n        } else {\n          console.error('Directions request failed due to ' + status);\n        }\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      _get(_getPrototypeOf(DirectionsRenderer.prototype), \"ngOnDestroy\", this).call(this);\n\n      this.nguiMap.clearObjectEvents(this.outputs, this, 'directionsRenderer');\n    }\n  }]);\n\n  return DirectionsRenderer;\n}(BaseMapDirective);\n\nDirectionsRenderer.ɵfac = function DirectionsRenderer_Factory(t) {\n  return new (t || DirectionsRenderer)(ɵngcc0.ɵɵdirectiveInject(NguiMapComponent), ɵngcc0.ɵɵdirectiveInject(NavigatorGeolocation));\n};\n\nDirectionsRenderer.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: DirectionsRenderer,\n  selectors: [[\"directions-renderer\"]],\n  inputs: {\n    directions: \"directions\",\n    draggable: \"draggable\",\n    hideRouteList: \"hideRouteList\",\n    infoWindow: \"infoWindow\",\n    panel: \"panel\",\n    markerOptions: \"markerOptions\",\n    polylineOptions: \"polylineOptions\",\n    preserveViewport: \"preserveViewport\",\n    routeIndex: \"routeIndex\",\n    suppressBicyclingLayer: \"suppressBicyclingLayer\",\n    suppressInfoWindows: \"suppressInfoWindows\",\n    suppressMarkers: \"suppressMarkers\",\n    suppressPolylines: \"suppressPolylines\",\n    directionsRequest: [\"directions-request\", \"directionsRequest\"]\n  },\n  outputs: {\n    directions_changed: \"directions_changed\"\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature]\n});\n/** @nocollapse */\n\nDirectionsRenderer.ctorParameters = function () {\n  return [{\n    type: NguiMapComponent\n  }, {\n    type: NavigatorGeolocation\n  }];\n};\n\nDirectionsRenderer.propDecorators = {\n  \"directionsRequest\": [{\n    type: Input,\n    args: ['directions-request']\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(DirectionsRenderer, [{\n    type: Directive,\n    args: [{\n      selector: 'ngui-map > directions-renderer',\n      inputs: INPUTS$6,\n      outputs: OUTPUTS$6\n    }]\n  }], function () {\n    return [{\n      type: NguiMapComponent\n    }, {\n      type: NavigatorGeolocation\n    }];\n  }, {\n    directionsRequest: [{\n      type: Input,\n      args: ['directions-request']\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar INPUTS$7 = ['options', 'circleOptions', 'drawingControl', 'drawingControlOptions', 'drawingMode', 'map', 'markerOptions', 'polygonOptions', 'polylineOptions', 'rectangleOptions'];\nvar OUTPUTS$7 = ['circlecomplete', 'markercomplete', 'overlaycomplete', 'polygoncomplete', 'polylinecomplete', 'rectanglecomplete'];\n\nvar DrawingManager = /*#__PURE__*/function (_BaseMapDirective5) {\n  _inherits(DrawingManager, _BaseMapDirective5);\n\n  var _super8 = _createSuper(DrawingManager);\n\n  /**\n   * @param {?} nguiMapComp\n   */\n  function DrawingManager(nguiMapComp) {\n    var _this26;\n\n    _classCallCheck(this, DrawingManager);\n\n    _this26 = _super8.call(this, nguiMapComp, 'DrawingManager', INPUTS$7, OUTPUTS$7);\n    _this26.libraryName = 'drawing';\n    return _this26;\n  }\n\n  return DrawingManager;\n}(BaseMapDirective);\n\nDrawingManager.ɵfac = function DrawingManager_Factory(t) {\n  return new (t || DrawingManager)(ɵngcc0.ɵɵdirectiveInject(NguiMapComponent));\n};\n\nDrawingManager.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: DrawingManager,\n  selectors: [[\"drawing-manager\"]],\n  inputs: {\n    options: \"options\",\n    circleOptions: \"circleOptions\",\n    drawingControl: \"drawingControl\",\n    drawingControlOptions: \"drawingControlOptions\",\n    drawingMode: \"drawingMode\",\n    map: \"map\",\n    markerOptions: \"markerOptions\",\n    polygonOptions: \"polygonOptions\",\n    polylineOptions: \"polylineOptions\",\n    rectangleOptions: \"rectangleOptions\"\n  },\n  outputs: {\n    circlecomplete: \"circlecomplete\",\n    markercomplete: \"markercomplete\",\n    overlaycomplete: \"overlaycomplete\",\n    polygoncomplete: \"polygoncomplete\",\n    polylinecomplete: \"polylinecomplete\",\n    rectanglecomplete: \"rectanglecomplete\"\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/** @nocollapse */\n\nDrawingManager.ctorParameters = function () {\n  return [{\n    type: NguiMapComponent\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(DrawingManager, [{\n    type: Directive,\n    args: [{\n      selector: 'ngui-map > drawing-manager',\n      inputs: INPUTS$7,\n      outputs: OUTPUTS$7\n    }]\n  }], function () {\n    return [{\n      type: NguiMapComponent\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar INPUTS$8 = ['url', 'bounds', 'clickable', 'opacity'];\nvar OUTPUTS$8 = ['click', 'dblclick'];\n\nvar GroundOverlay = /*#__PURE__*/function (_BaseMapDirective6) {\n  _inherits(GroundOverlay, _BaseMapDirective6);\n\n  var _super9 = _createSuper(GroundOverlay);\n\n  /**\n   * @param {?} nguiMapComp\n   */\n  function GroundOverlay(nguiMapComp) {\n    var _this27;\n\n    _classCallCheck(this, GroundOverlay);\n\n    _this27 = _super9.call(this, nguiMapComp, 'GroundOverlay', INPUTS$8, OUTPUTS$8);\n    _this27.objectOptions = {};\n    return _this27;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(GroundOverlay, [{\n    key: \"initialize\",\n    value: function initialize() {\n      // url, bounds are not the options of GroundOverlay\n      this.objectOptions = this.optionBuilder.googlizeAllInputs(['clickable', 'opacity'], this); // noinspection TypeScriptUnresolvedFunction\n\n      this.mapObject = new google.maps.GroundOverlay(this['url'], this['bounds'], this.objectOptions);\n      this.mapObject.setMap(this.nguiMapComponent.map);\n      this.mapObject['mapObjectName'] = this.mapObjectName; // set google events listeners and emits to this outputs listeners\n\n      this.nguiMap.setObjectEvents(this.outputs, this, 'mapObject');\n      this.nguiMapComponent.addToMapObjectGroup(this.mapObjectName, this.mapObject);\n      this.initialized$.emit(this.mapObject);\n    }\n  }]);\n\n  return GroundOverlay;\n}(BaseMapDirective);\n\nGroundOverlay.ɵfac = function GroundOverlay_Factory(t) {\n  return new (t || GroundOverlay)(ɵngcc0.ɵɵdirectiveInject(NguiMapComponent));\n};\n\nGroundOverlay.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: GroundOverlay,\n  selectors: [[\"ground-overlay\"]],\n  inputs: {\n    url: \"url\",\n    bounds: \"bounds\",\n    clickable: \"clickable\",\n    opacity: \"opacity\"\n  },\n  outputs: {\n    click: \"click\",\n    dblclick: \"dblclick\"\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/** @nocollapse */\n\nGroundOverlay.ctorParameters = function () {\n  return [{\n    type: NguiMapComponent\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(GroundOverlay, [{\n    type: Directive,\n    args: [{\n      selector: 'ngui-map > ground-overlay',\n      inputs: INPUTS$8,\n      outputs: OUTPUTS$8\n    }]\n  }], function () {\n    return [{\n      type: NguiMapComponent\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar INPUTS$9 = ['data', 'dissipating', 'gradient', 'maxIntensity', 'opacity', 'radius', 'options'];\nvar OUTPUTS$9 = [];\n\nvar HeatmapLayer = /*#__PURE__*/function (_BaseMapDirective7) {\n  _inherits(HeatmapLayer, _BaseMapDirective7);\n\n  var _super10 = _createSuper(HeatmapLayer);\n\n  /**\n   * @param {?} nguiMapComp\n   */\n  function HeatmapLayer(nguiMapComp) {\n    var _this28;\n\n    _classCallCheck(this, HeatmapLayer);\n\n    _this28 = _super10.call(this, nguiMapComp, 'HeatmapLayer', INPUTS$9, OUTPUTS$9);\n    _this28.libraryName = 'visualization';\n    return _this28;\n  }\n\n  return HeatmapLayer;\n}(BaseMapDirective);\n\nHeatmapLayer.ɵfac = function HeatmapLayer_Factory(t) {\n  return new (t || HeatmapLayer)(ɵngcc0.ɵɵdirectiveInject(NguiMapComponent));\n};\n\nHeatmapLayer.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: HeatmapLayer,\n  selectors: [[\"heatmap-layer\"]],\n  inputs: {\n    data: \"data\",\n    dissipating: \"dissipating\",\n    gradient: \"gradient\",\n    maxIntensity: \"maxIntensity\",\n    opacity: \"opacity\",\n    radius: \"radius\",\n    options: \"options\"\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/** @nocollapse */\n\nHeatmapLayer.ctorParameters = function () {\n  return [{\n    type: NguiMapComponent\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(HeatmapLayer, [{\n    type: Directive,\n    args: [{\n      selector: 'ngui-map > heatmap-layer',\n      inputs: INPUTS$9,\n      outputs: OUTPUTS$9\n    }]\n  }], function () {\n    return [{\n      type: NguiMapComponent\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar INPUTS$10 = ['clickable', 'preserveViewport', 'screenOverlays', 'suppressInfoWindows', 'url', 'zIndex', 'options'];\nvar OUTPUTS$10 = ['click', 'defaultviewport_changed', 'status_changed'];\n\nvar KmlLayer = /*#__PURE__*/function (_BaseMapDirective8) {\n  _inherits(KmlLayer, _BaseMapDirective8);\n\n  var _super11 = _createSuper(KmlLayer);\n\n  /**\n   * @param {?} nguiMapComp\n   */\n  function KmlLayer(nguiMapComp) {\n    _classCallCheck(this, KmlLayer);\n\n    return _super11.call(this, nguiMapComp, 'KmlLayer', INPUTS$10, OUTPUTS$10);\n  }\n\n  return KmlLayer;\n}(BaseMapDirective);\n\nKmlLayer.ɵfac = function KmlLayer_Factory(t) {\n  return new (t || KmlLayer)(ɵngcc0.ɵɵdirectiveInject(NguiMapComponent));\n};\n\nKmlLayer.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: KmlLayer,\n  selectors: [[\"kml-layer\"]],\n  inputs: {\n    clickable: \"clickable\",\n    preserveViewport: \"preserveViewport\",\n    screenOverlays: \"screenOverlays\",\n    suppressInfoWindows: \"suppressInfoWindows\",\n    url: \"url\",\n    zIndex: \"zIndex\",\n    options: \"options\"\n  },\n  outputs: {\n    click: \"click\",\n    defaultviewport_changed: \"defaultviewport_changed\",\n    status_changed: \"status_changed\"\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/** @nocollapse */\n\nKmlLayer.ctorParameters = function () {\n  return [{\n    type: NguiMapComponent\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(KmlLayer, [{\n    type: Directive,\n    args: [{\n      selector: 'ngui-map > kml-layer',\n      inputs: INPUTS$10,\n      outputs: OUTPUTS$10\n    }]\n  }], function () {\n    return [{\n      type: NguiMapComponent\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar INPUTS$11 = ['anchorPoint', 'animation', 'clickable', 'cursor', 'draggable', 'icon', 'label', 'opacity', 'optimized', 'place', 'position', 'shape', 'title', 'visible', 'zIndex', 'options', 'geoFallbackPosition'];\nvar OUTPUTS$11 = ['animationChanged', 'click', 'clickableChanged', 'cursorChanged', 'dblclick', 'drag', 'dragend', 'draggableChanged', 'dragstart', 'flatChanged', 'iconChanged', 'mousedown', 'mouseout', 'mouseover', 'mouseup', 'positionChanged', 'rightclick', 'shapeChanged', 'titleChanged', 'visibleChanged', 'zindexChanged'];\n\nvar Marker = /*#__PURE__*/function (_BaseMapDirective9) {\n  _inherits(Marker, _BaseMapDirective9);\n\n  var _super12 = _createSuper(Marker);\n\n  /**\n   * @param {?} nguiMapComp\n   */\n  function Marker(nguiMapComp) {\n    var _this29;\n\n    _classCallCheck(this, Marker);\n\n    _this29 = _super12.call(this, nguiMapComp, 'Marker', INPUTS$11, OUTPUTS$11);\n    _this29.nguiMapComp = nguiMapComp;\n    _this29.objectOptions = {};\n    return _this29;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(Marker, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this30 = this;\n\n      if (this.nguiMapComponent.mapIdledOnce) {\n        // map is ready already\n        this.initialize();\n      } else {\n        this.nguiMapComponent.mapReady$.subscribe(function (map) {\n          return _this30.initialize();\n        });\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"initialize\",\n    value: function initialize() {\n      _get(_getPrototypeOf(Marker.prototype), \"initialize\", this).call(this);\n\n      this.setPosition();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"setPosition\",\n    value: function setPosition() {\n      var _this31 = this;\n\n      if (!this['position']) {\n        this._subscriptions.push(this.nguiMapComp.geolocation.getCurrentPosition().subscribe(function (position) {\n          var\n          /** @type {?} */\n          latLng = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);\n\n          _this31.mapObject.setPosition(latLng);\n        }, function (error) {\n          console.error('ngui-map, error finding the current location');\n\n          _this31.mapObject.setPosition(_this31.objectOptions['geoFallbackPosition'] || new google.maps.LatLng(0, 0));\n        }));\n      } else if (typeof this['position'] === 'string') {\n        this._subscriptions.push(this.nguiMapComp.geoCoder.geocode({\n          address: this['position']\n        }).subscribe(function (results) {\n          _this31.mapObject.setPosition(results[0].geometry.location);\n        }, function (error) {\n          console.error('ngui-map, error finding the location from', _this31['position']);\n\n          _this31.mapObject.setPosition(_this31.objectOptions['geoFallbackPosition'] || new google.maps.LatLng(0, 0));\n        }));\n      }\n    }\n  }]);\n\n  return Marker;\n}(BaseMapDirective);\n\nMarker.ɵfac = function Marker_Factory(t) {\n  return new (t || Marker)(ɵngcc0.ɵɵdirectiveInject(NguiMapComponent));\n};\n\nMarker.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: Marker,\n  selectors: [[\"marker\"]],\n  inputs: {\n    anchorPoint: \"anchorPoint\",\n    animation: \"animation\",\n    clickable: \"clickable\",\n    cursor: \"cursor\",\n    draggable: \"draggable\",\n    icon: \"icon\",\n    label: \"label\",\n    opacity: \"opacity\",\n    optimized: \"optimized\",\n    place: \"place\",\n    position: \"position\",\n    shape: \"shape\",\n    title: \"title\",\n    visible: \"visible\",\n    zIndex: \"zIndex\",\n    options: \"options\",\n    geoFallbackPosition: \"geoFallbackPosition\"\n  },\n  outputs: {\n    animationChanged: \"animationChanged\",\n    click: \"click\",\n    clickableChanged: \"clickableChanged\",\n    cursorChanged: \"cursorChanged\",\n    dblclick: \"dblclick\",\n    drag: \"drag\",\n    dragend: \"dragend\",\n    draggableChanged: \"draggableChanged\",\n    dragstart: \"dragstart\",\n    flatChanged: \"flatChanged\",\n    iconChanged: \"iconChanged\",\n    mousedown: \"mousedown\",\n    mouseout: \"mouseout\",\n    mouseover: \"mouseover\",\n    mouseup: \"mouseup\",\n    positionChanged: \"positionChanged\",\n    rightclick: \"rightclick\",\n    shapeChanged: \"shapeChanged\",\n    titleChanged: \"titleChanged\",\n    visibleChanged: \"visibleChanged\",\n    zindexChanged: \"zindexChanged\"\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/** @nocollapse */\n\nMarker.ctorParameters = function () {\n  return [{\n    type: NguiMapComponent\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(Marker, [{\n    type: Directive,\n    args: [{\n      selector: 'ngui-map > marker',\n      inputs: INPUTS$11,\n      outputs: OUTPUTS$11\n    }]\n  }], function () {\n    return [{\n      type: NguiMapComponent\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar PlacesAutoComplete =\n/**\n * @param {?} optionBuilder\n * @param {?} elementRef\n * @param {?} apiLoader\n */\nfunction PlacesAutoComplete(optionBuilder, elementRef, apiLoader) {\n  var _this32 = this;\n\n  _classCallCheck(this, PlacesAutoComplete);\n\n  this.optionBuilder = optionBuilder;\n  this.elementRef = elementRef;\n  this.apiLoader = apiLoader;\n  this.place_changed = new EventEmitter();\n  this.initialized$ = new EventEmitter(); // only called when map is ready\n\n  this.initialize = function () {\n    _this32.objectOptions = _this32.optionBuilder.googlizeAllInputs(['bounds', 'componentRestrictions', 'types'], _this32);\n\n    if (!google.maps.places) {\n      throw missingLibraryError('PlacesAutoComplete', 'places');\n    }\n\n    _this32.autocomplete = new google.maps.places.Autocomplete(_this32.elementRef.nativeElement, _this32.objectOptions);\n\n    _this32.autocomplete.addListener('place_changed', function (place) {\n      _this32.place_changed.emit(_this32.autocomplete.getPlace());\n    });\n\n    _this32.initialized$.emit(_this32.autocomplete);\n  };\n\n  apiLoader.load();\n  apiLoader.api$.pipe(first()).subscribe(function () {\n    return _this32.initialize();\n  });\n};\n\nPlacesAutoComplete.ɵfac = function PlacesAutoComplete_Factory(t) {\n  return new (t || PlacesAutoComplete)(ɵngcc0.ɵɵdirectiveInject(OptionBuilder), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(NgMapApiLoader));\n};\n\nPlacesAutoComplete.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: PlacesAutoComplete,\n  selectors: [[\"\", \"places-auto-complete\", \"\"]],\n  inputs: {\n    bounds: \"bounds\",\n    componentRestrictions: \"componentRestrictions\",\n    types: \"types\"\n  },\n  outputs: {\n    place_changed: \"place_changed\",\n    initialized$: \"initialized$\"\n  }\n});\n/** @nocollapse */\n\nPlacesAutoComplete.ctorParameters = function () {\n  return [{\n    type: OptionBuilder\n  }, {\n    type: ElementRef\n  }, {\n    type: NgMapApiLoader\n  }];\n};\n\nPlacesAutoComplete.propDecorators = {\n  \"bounds\": [{\n    type: Input\n  }],\n  \"componentRestrictions\": [{\n    type: Input\n  }],\n  \"types\": [{\n    type: Input\n  }],\n  \"place_changed\": [{\n    type: Output,\n    args: ['place_changed']\n  }],\n  \"initialized$\": [{\n    type: Output\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(PlacesAutoComplete, [{\n    type: Directive,\n    args: [{\n      selector: '[places-auto-complete]'\n    }]\n  }], function () {\n    return [{\n      type: OptionBuilder\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: NgMapApiLoader\n    }];\n  }, {\n    place_changed: [{\n      type: Output,\n      args: ['place_changed']\n    }],\n    initialized$: [{\n      type: Output\n    }],\n    bounds: [{\n      type: Input\n    }],\n    componentRestrictions: [{\n      type: Input\n    }],\n    types: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar INPUTS$12 = ['clickable', 'draggable', 'editable', 'fillColor', 'fillOpacity', 'geodesic', 'paths', 'strokeColor', 'strokeOpacity', 'strokePosition', 'strokeWeight', 'visible', 'zIndex', 'options'];\nvar OUTPUTS$12 = ['click', 'dblclick', 'drag', 'dragend', 'dragstart', 'mousedown', 'mousemove', 'mouseout', 'mouseover', 'mouseup', 'rightclick'];\n\nvar Polygon = /*#__PURE__*/function (_BaseMapDirective10) {\n  _inherits(Polygon, _BaseMapDirective10);\n\n  var _super13 = _createSuper(Polygon);\n\n  /**\n   * @param {?} nguiMapComp\n   */\n  function Polygon(nguiMapComp) {\n    _classCallCheck(this, Polygon);\n\n    return _super13.call(this, nguiMapComp, 'Polygon', INPUTS$12, OUTPUTS$12);\n  }\n\n  return Polygon;\n}(BaseMapDirective);\n\nPolygon.ɵfac = function Polygon_Factory(t) {\n  return new (t || Polygon)(ɵngcc0.ɵɵdirectiveInject(NguiMapComponent));\n};\n\nPolygon.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: Polygon,\n  selectors: [[\"polygon\"], [\"map-polygon\"]],\n  inputs: {\n    clickable: \"clickable\",\n    draggable: \"draggable\",\n    editable: \"editable\",\n    fillColor: \"fillColor\",\n    fillOpacity: \"fillOpacity\",\n    geodesic: \"geodesic\",\n    paths: \"paths\",\n    strokeColor: \"strokeColor\",\n    strokeOpacity: \"strokeOpacity\",\n    strokePosition: \"strokePosition\",\n    strokeWeight: \"strokeWeight\",\n    visible: \"visible\",\n    zIndex: \"zIndex\",\n    options: \"options\"\n  },\n  outputs: {\n    click: \"click\",\n    dblclick: \"dblclick\",\n    drag: \"drag\",\n    dragend: \"dragend\",\n    dragstart: \"dragstart\",\n    mousedown: \"mousedown\",\n    mousemove: \"mousemove\",\n    mouseout: \"mouseout\",\n    mouseover: \"mouseover\",\n    mouseup: \"mouseup\",\n    rightclick: \"rightclick\"\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/** @nocollapse */\n\nPolygon.ctorParameters = function () {\n  return [{\n    type: NguiMapComponent\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(Polygon, [{\n    type: Directive,\n    args: [{\n      selector: 'ngui-map>polygon, ngui-map>map-polygon',\n      inputs: INPUTS$12,\n      outputs: OUTPUTS$12\n    }]\n  }], function () {\n    return [{\n      type: NguiMapComponent\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar INPUTS$13 = ['clickable', 'draggable', 'editable', 'geodesic', 'icons', 'path', 'strokeColor', 'strokeOpacity', 'strokeWeight', 'visible', 'zIndex', 'options'];\nvar OUTPUTS$13 = ['click', 'dblclick', 'drag', 'dragend', 'dragstart', 'mousedown', 'mousemove', 'mouseout', 'mouseover', 'mouseup', 'rightclick'];\n\nvar Polyline = /*#__PURE__*/function (_BaseMapDirective11) {\n  _inherits(Polyline, _BaseMapDirective11);\n\n  var _super14 = _createSuper(Polyline);\n\n  /**\n   * @param {?} nguiMapComp\n   */\n  function Polyline(nguiMapComp) {\n    _classCallCheck(this, Polyline);\n\n    return _super14.call(this, nguiMapComp, 'Polyline', INPUTS$13, OUTPUTS$13);\n  }\n\n  return Polyline;\n}(BaseMapDirective);\n\nPolyline.ɵfac = function Polyline_Factory(t) {\n  return new (t || Polyline)(ɵngcc0.ɵɵdirectiveInject(NguiMapComponent));\n};\n\nPolyline.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: Polyline,\n  selectors: [[\"polyline\"]],\n  inputs: {\n    clickable: \"clickable\",\n    draggable: \"draggable\",\n    editable: \"editable\",\n    geodesic: \"geodesic\",\n    icons: \"icons\",\n    path: \"path\",\n    strokeColor: \"strokeColor\",\n    strokeOpacity: \"strokeOpacity\",\n    strokeWeight: \"strokeWeight\",\n    visible: \"visible\",\n    zIndex: \"zIndex\",\n    options: \"options\"\n  },\n  outputs: {\n    click: \"click\",\n    dblclick: \"dblclick\",\n    drag: \"drag\",\n    dragend: \"dragend\",\n    dragstart: \"dragstart\",\n    mousedown: \"mousedown\",\n    mousemove: \"mousemove\",\n    mouseout: \"mouseout\",\n    mouseover: \"mouseover\",\n    mouseup: \"mouseup\",\n    rightclick: \"rightclick\"\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/** @nocollapse */\n\nPolyline.ctorParameters = function () {\n  return [{\n    type: NguiMapComponent\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(Polyline, [{\n    type: Directive,\n    args: [{\n      selector: 'ngui-map > polyline',\n      inputs: INPUTS$13,\n      outputs: OUTPUTS$13\n    }]\n  }], function () {\n    return [{\n      type: NguiMapComponent\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar INPUTS$14 = ['selector', 'options', 'addressControl', 'addressControlOptions', 'clickToGo', 'disableDefaultUI', 'disableDoubleClickZoom', 'enableCloseButton', 'fullscreenControl', 'fullscreenControlOptions', 'imageDateControl', 'linksControl', 'motionTracking', 'motionTrackingControl', 'panControl', 'panControlOptions', 'pano', 'position', 'pov', 'scrollwheel', 'showRoadLabels', 'visible', 'zoomControl', 'zoomControlOptions'];\nvar OUTPUTS$14 = ['closeclick', 'pano_changed', 'position_changed', 'pov_changed', 'resize', 'status_changed', 'visible_changed', 'zoom_changed'];\n\nvar StreetViewPanorama = /*#__PURE__*/function (_BaseMapDirective12) {\n  _inherits(StreetViewPanorama, _BaseMapDirective12);\n\n  var _super15 = _createSuper(StreetViewPanorama);\n\n  /**\n   * @param {?} nguiMapComp\n   */\n  function StreetViewPanorama(nguiMapComp) {\n    _classCallCheck(this, StreetViewPanorama);\n\n    return _super15.call(this, nguiMapComp, 'StreetViewPanorama', INPUTS$14, OUTPUTS$14);\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _createClass(StreetViewPanorama, [{\n    key: \"initialize\",\n    value: function initialize() {\n      this.objectOptions = this.optionBuilder.googlizeAllInputs(this.inputs, this);\n      var\n      /** @type {?} */\n      element;\n\n      if (this.objectOptions.selector) {\n        // noinspection TypeScriptValidateTypes\n        element = document.querySelector(this['selector']);\n        delete this.objectOptions.selector;\n      } else {\n        element = this.nguiMapComponent.el;\n      } // will be set after geocoded\n\n\n      typeof this.objectOptions.position === 'string' && delete this.objectOptions.position;\n      this.mapObject = new google.maps[this.mapObjectName](element, this.objectOptions);\n      this.mapObject['mapObjectName'] = this.mapObjectName;\n      this.mapObject['nguiMapComponent'] = this.nguiMapComponent; // set google events listeners and emits to this outputs listeners\n\n      this.nguiMap.setObjectEvents(this.outputs, this, 'mapObject');\n      this.nguiMapComponent.addToMapObjectGroup(this.mapObjectName, this.mapObject);\n      this.initialized$.emit(this.mapObject);\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this.nguiMapComponent.el) {\n        this.nguiMap.clearObjectEvents(this.outputs, this, 'mapObject');\n      }\n    }\n  }]);\n\n  return StreetViewPanorama;\n}(BaseMapDirective);\n\nStreetViewPanorama.ɵfac = function StreetViewPanorama_Factory(t) {\n  return new (t || StreetViewPanorama)(ɵngcc0.ɵɵdirectiveInject(NguiMapComponent));\n};\n\nStreetViewPanorama.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: StreetViewPanorama,\n  selectors: [[\"street-view-panorama\"]],\n  inputs: {\n    selector: \"selector\",\n    options: \"options\",\n    addressControl: \"addressControl\",\n    addressControlOptions: \"addressControlOptions\",\n    clickToGo: \"clickToGo\",\n    disableDefaultUI: \"disableDefaultUI\",\n    disableDoubleClickZoom: \"disableDoubleClickZoom\",\n    enableCloseButton: \"enableCloseButton\",\n    fullscreenControl: \"fullscreenControl\",\n    fullscreenControlOptions: \"fullscreenControlOptions\",\n    imageDateControl: \"imageDateControl\",\n    linksControl: \"linksControl\",\n    motionTracking: \"motionTracking\",\n    motionTrackingControl: \"motionTrackingControl\",\n    panControl: \"panControl\",\n    panControlOptions: \"panControlOptions\",\n    pano: \"pano\",\n    position: \"position\",\n    pov: \"pov\",\n    scrollwheel: \"scrollwheel\",\n    showRoadLabels: \"showRoadLabels\",\n    visible: \"visible\",\n    zoomControl: \"zoomControl\",\n    zoomControlOptions: \"zoomControlOptions\"\n  },\n  outputs: {\n    closeclick: \"closeclick\",\n    pano_changed: \"pano_changed\",\n    position_changed: \"position_changed\",\n    pov_changed: \"pov_changed\",\n    resize: \"resize\",\n    status_changed: \"status_changed\",\n    visible_changed: \"visible_changed\",\n    zoom_changed: \"zoom_changed\"\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/** @nocollapse */\n\nStreetViewPanorama.ctorParameters = function () {\n  return [{\n    type: NguiMapComponent\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(StreetViewPanorama, [{\n    type: Directive,\n    args: [{\n      selector: 'ngui-map > street-view-panorama',\n      inputs: INPUTS$14,\n      outputs: OUTPUTS$14\n    }]\n  }], function () {\n    return [{\n      type: NguiMapComponent\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar INPUTS$15 = ['autoRefresh', 'options'];\nvar OUTPUTS$15 = [];\n\nvar TrafficLayer = /*#__PURE__*/function (_BaseMapDirective13) {\n  _inherits(TrafficLayer, _BaseMapDirective13);\n\n  var _super16 = _createSuper(TrafficLayer);\n\n  /**\n   * @param {?} nguiMapComp\n   */\n  function TrafficLayer(nguiMapComp) {\n    _classCallCheck(this, TrafficLayer);\n\n    return _super16.call(this, nguiMapComp, 'TrafficLayer', INPUTS$15, OUTPUTS$15);\n  }\n\n  return TrafficLayer;\n}(BaseMapDirective);\n\nTrafficLayer.ɵfac = function TrafficLayer_Factory(t) {\n  return new (t || TrafficLayer)(ɵngcc0.ɵɵdirectiveInject(NguiMapComponent));\n};\n\nTrafficLayer.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: TrafficLayer,\n  selectors: [[\"traffic-layer\"]],\n  inputs: {\n    autoRefresh: \"autoRefresh\",\n    options: \"options\"\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/** @nocollapse */\n\nTrafficLayer.ctorParameters = function () {\n  return [{\n    type: NguiMapComponent\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(TrafficLayer, [{\n    type: Directive,\n    args: [{\n      selector: 'ngui-map > traffic-layer',\n      inputs: INPUTS$15,\n      outputs: OUTPUTS$15\n    }]\n  }], function () {\n    return [{\n      type: NguiMapComponent\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar INPUTS$16 = [];\nvar OUTPUTS$16 = [];\n\nvar TransitLayer = /*#__PURE__*/function (_BaseMapDirective14) {\n  _inherits(TransitLayer, _BaseMapDirective14);\n\n  var _super17 = _createSuper(TransitLayer);\n\n  /**\n   * @param {?} nguiMapComp\n   */\n  function TransitLayer(nguiMapComp) {\n    _classCallCheck(this, TransitLayer);\n\n    return _super17.call(this, nguiMapComp, 'TransitLayer', INPUTS$16, OUTPUTS$16);\n  }\n\n  return TransitLayer;\n}(BaseMapDirective);\n\nTransitLayer.ɵfac = function TransitLayer_Factory(t) {\n  return new (t || TransitLayer)(ɵngcc0.ɵɵdirectiveInject(NguiMapComponent));\n};\n\nTransitLayer.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: TransitLayer,\n  selectors: [[\"transit-layer\"]],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/** @nocollapse */\n\nTransitLayer.ctorParameters = function () {\n  return [{\n    type: NguiMapComponent\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(TransitLayer, [{\n    type: Directive,\n    args: [{\n      selector: 'ngui-map > transit-layer',\n      inputs: INPUTS$16,\n      outputs: OUTPUTS$16\n    }]\n  }], function () {\n    return [{\n      type: NguiMapComponent\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n\nvar COMPONENTS_DIRECTIVES = [NguiMapComponent, InfoWindow, Marker, Circle, CustomMarker, Polygon, InfoWindow, Polyline, GroundOverlay, TransitLayer, TrafficLayer, HeatmapLayer, BicyclingLayer, KmlLayer, DataLayer, StreetViewPanorama, PlacesAutoComplete, DirectionsRenderer, DrawingManager];\n\nvar NguiMapModule = /*#__PURE__*/function () {\n  function NguiMapModule() {\n    _classCallCheck(this, NguiMapModule);\n  }\n\n  _createClass(NguiMapModule, null, [{\n    key: \"forRoot\",\n    value:\n    /**\n     * @param {?=} config\n     * @return {?}\n     */\n    function forRoot() {\n      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return {\n        ngModule: NguiMapModule,\n        providers: [{\n          provide: NG_MAP_CONFIG_TOKEN,\n          useValue: config\n        }]\n      };\n    }\n  }]);\n\n  return NguiMapModule;\n}();\n\nNguiMapModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: NguiMapModule\n});\nNguiMapModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function NguiMapModule_Factory(t) {\n    return new (t || NguiMapModule)();\n  },\n  providers: [GeoCoder, NavigatorGeolocation, NguiMap, OptionBuilder, {\n    provide: NgMapApiLoader,\n    useClass: NgMapAsyncCallbackApiLoader\n  }],\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NguiMapModule, {\n    declarations: function declarations() {\n      return [NguiMapComponent, InfoWindow, Marker, Circle, CustomMarker, Polygon, InfoWindow, Polyline, GroundOverlay, TransitLayer, TrafficLayer, HeatmapLayer, BicyclingLayer, KmlLayer, DataLayer, StreetViewPanorama, PlacesAutoComplete, DirectionsRenderer, DrawingManager];\n    },\n    imports: function imports() {\n      return [CommonModule];\n    },\n    exports: function exports() {\n      return [NguiMapComponent, InfoWindow, Marker, Circle, CustomMarker, Polygon, InfoWindow, Polyline, GroundOverlay, TransitLayer, TrafficLayer, HeatmapLayer, BicyclingLayer, KmlLayer, DataLayer, StreetViewPanorama, PlacesAutoComplete, DirectionsRenderer, DrawingManager];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NguiMapModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      declarations: COMPONENTS_DIRECTIVES,\n      exports: [COMPONENTS_DIRECTIVES],\n      providers: [GeoCoder, NavigatorGeolocation, NguiMap, OptionBuilder, {\n        provide: NgMapApiLoader,\n        useClass: NgMapAsyncCallbackApiLoader\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { BicyclingLayer, NavigatorGeolocation, OptionBuilder, NG_MAP_CONFIG_TOKEN, NgMapApiLoader, NgMapAsyncApiLoader, NgMapAsyncCallbackApiLoader, NguiMapComponent, InfoWindow, CustomMarker, Circle, DataLayer, DirectionsRenderer, DrawingManager, GeoCoder, GroundOverlay, HeatmapLayer, KmlLayer, Marker, NguiMap, PlacesAutoComplete, Polygon, Polyline, StreetViewPanorama, TrafficLayer, TransitLayer, NguiMapModule, BaseMapDirective as ɵa };","map":{"version":3,"sources":["@ngui/map/out/services/util.ts","@ngui/map/out/directives/base-map-directive.ts","@ngui/map/out/services/option-builder.ts","@ngui/map/out/services/navigator-geolocation.ts","@ngui/map/out/services/config.ts","@ngui/map/out/services/api-loader.ts","@ngui/map/out/services/geo-coder.ts","@ngui/map/out/services/ngui-map.ts","@ngui/map/out/components/ngui-map.component.ts","@ngui/map/out/directives/bicycling-layer.ts","@ngui/map/out/components/info-window.ts","@ngui/map/out/components/custom-marker.ts","@ngui/map/out/directives/circle.ts","@ngui/map/out/directives/data-layer.ts","@ngui/map/out/directives/directions-renderer.ts","@ngui/map/out/directives/drawing-manager.ts","@ngui/map/out/directives/ground-overlay.ts","@ngui/map/out/directives/heatmap-layer.ts","@ngui/map/out/directives/kml-layer.ts","@ngui/map/out/directives/marker.ts","@ngui/map/out/directives/places-auto-complete.ts","@ngui/map/out/directives/polygon.ts","@ngui/map/out/directives/polyline.ts","@ngui/map/out/directives/street-view-panorama.ts","@ngui/map/out/directives/traffic-layer.ts","@ngui/map/out/directives/transit-layer.ts","@ngui/map/out/ngui-map.module.ts"],"names":["INPUTS","OUTPUTS"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAGA,SAAA,OAAA,CAAwB,GAAxB,EAAA;AACE,MAAI;AAAE;AACJ,IAAA,IAAI,CAAC,KAAL,CAAW,GAAX;AACA,WAAO,GAAP;AACD,GAHD,CAGE;AAAA;AAAO,EAAA,CAAP,EAAU;AAAE;AACZ,WAAO,GAAG,CACP,OADI,CACI,gBADJ,EACoB;AAC/B;AAAQ,cAAS,CAAT,EAAiB,EAAjB,EAAR;AACU,aAAO,MAAM,EAAN,GAAW,IAAlB;AACD,KAJE,EAMJ,OANI,CAMI,YANJ,EAMgB;AAA4C;AAC/D,cAAS,CAAT,EAAiB,EAAjB,EAAR;AACU,aAAO,MAAM,EAAN,GAAW,GAAlB;AACD,KATE,CAAP;AAWD;AACF;AACD;AACG;AACiD;AAErC;AAAe;;;AAA9B,SAAA,OAAA,CAAwB,KAAxB,EAAA;AACE,MAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AAC7B;AAAA;AAAM,IAAA,EAAE,GAAG,0CAAX,CAD6B,CACyB;;AACtD,QAAI,KAAK,CAAC,KAAN,CAAY,EAAZ,CAAJ,EAAqB;AACnB,MAAA,KAAK,GAAG,MAAM,KAAN,GAAc,GAAtB;AACD;;AACD,WAAO,IAAI,CAAC,KAAL,CAAW,OAAO,CAAC,KAAD,CAAlB,CAAP;AACD,GAND,MAMO;AACL,WAAO,KAAP;AACD;AACF;AACD;AACG;AACoB;AAEjB;;AAAK;AAAI;AACoC;AAAkB;AAAe;;;AAWpF,SAAA,WAAA,CAA4B,GAA5B,EAAA;AACE,SAAO,GAAG,CAAC,OAAJ,CAAY,qBAAZ,EAAmC,UAAS,MAAT,EAAiB,KAAjB,EAA5C;AACI,WAAO,KAAK,KAAK,CAAV,GAAc,MAAM,CAAC,WAAP,EAAd,GAAqC,MAAM,CAAC,WAAP,EAA5C;AACD,GAFM,EAEJ,OAFI,CAEI,MAFJ,EAEY,EAFZ,CAAP;AAGD;AACD;AACG;AAAe;;;AAAlB,SAAA,eAAA,GAAA;AACE,SAAO,OAAO,MAAP,KAAkB,QAAlB,IAA8B,OAAO,MAAM,CAAC,IAAd,KAAuB,QAA5D;AACD;AACD;AACG;AAAwB;AAAsB;AAC3C;;;AADN,SAAA,mBAAA,CAAoC,SAApC,EAA+C,OAA/C,EAAA;AACE,SAAO,KAAT,WAAA,SAAA,wBAAA,OAAA,oMAGA,OAHA,qBAAE;AAMD;AAAE;AAAI;AAAkC;AAAyC;;ACrElF;AAAI;AAAa;;;IAMjB,gB;AAAE;AAAQ;AAAmC;AAAgC;AACxD;AAA0B;AAW/C,4BACc,gBADd,EAAA,aAAA,EAGc,MAHd,EAIc,OAJd,EAAA;AAAA;;AAAA;;AACA,SAAA,gBAAA,GAAc,gBAAd;AACA,SAAA,aAAA,GAAA,aAAA;AACA,SAAA,MAAA,GAAc,MAAd;AACA,SAAA,OAAA,GAAc,OAAd,CAJA,CAKA;;AAfA,SAAA,YAAA,GAA8C,IAA9C,YAA8C,EAA9C;AAQA,SAAA,cAAA,GAAA,EAAA;AAQI,SAAK,OAAL,GAAe,KAAK,gBAAL,CAAsB,SAAtB,CAAf;AACA,SAAK,aAAL,GAAqB,KAAK,gBAAL,CAAsB,eAAtB,CAArB,CAPJ,CAQA;;AACI,SAAK,OAAL,CAAa,OAAb,CAAqB,UAAA,MAAM;AAAA,aAAI,KAAI,CAAC,MAAD,CAAJ,GAAe,IAAI,YAAJ,EAAnB;AAAA,KAA3B;AACA,SAAK,aAAL,GAAqB,aAArB;AACD;AACH;AACO;AAAmB;;;;;WACxB,oBAAF;AAAA;;AACI,UAAI,KAAK,gBAAL,CAAsB,YAA1B,EAAwC;AAAE;AACxC,aAAK,UAAL;AACD,OAFD,MAEO;AACL,aAAK,gBAAL,CAAsB,SAAtB,CAAgC,SAAhC,CAA0C,UAAA,GAAG;AAAA,iBAAI,MAAI,CAAC,UAAL,EAAJ;AAAA,SAA7C;AACD;AACF;AACH;AACO;AAAmB;;;;WACxB,sBAAF;AACI,WAAK,aAAL,GAAqB,KAAK,aAAL,CAAmB,iBAAnB,CAAqC,KAAK,MAA1C,EAAkD,IAAlD,CAArB,CADJ,CAEA;;AAGI,aAAO,KAAK,aAAL,CAAmB,QAA1B,KAAuC,QAAvC,IAAoD,OAAO,KAAK,aAAL,CAAmB,QAA9E;AACA,aAAO,KAAK,aAAL,CAAmB,MAA1B,KAAqC,QAArC,IAAkD,OAAO,KAAK,aAAL,CAAmB,MAA5E,CANJ,CAOA;;AAEI,UAAI,KAAK,WAAT,EAAsB;AACpB,YAAI,CAAC,MAAM,CAAC,IAAP,CAAY,KAAK,WAAjB,CAAL,EAAoC;AAClC,gBAAM,mBAAmB,CAAC,KAAK,aAAN,EAAqB,KAAK,WAA1B,CAAzB;AACD;;AACD,aAAK,SAAL,GAAiB,IAAI,MAAM,CAAC,IAAP,CAAY,KAAK,WAAjB,EAA8B,KAAK,aAAnC,CAAJ,CAAsD,KAAK,aAA3D,CAAjB;AACD,OALD,MAKO;AACL,aAAK,SAAL,GAAiB,IAAI,MAAM,CAAC,IAAP,CAAY,KAAK,aAAjB,CAAJ,CAAoC,KAAK,aAAzC,CAAjB;AACD;;AACD,WAAK,SAAL,CAAe,MAAf,CAAsB,KAAK,gBAAL,CAAsB,GAA5C;AACA,WAAK,SAAL,CAAe,eAAf,IAAkC,KAAK,aAAvC;AACA,WAAK,SAAL,CAAe,kBAAf,IAAqC,KAAK,gBAA1C,CAnBJ,CAoBA;;AAEI,WAAK,OAAL,CAAa,eAAb,CAA6B,KAAK,OAAlC,EAA2C,IAA3C,EAAiD,WAAjD;AAEA,WAAK,gBAAL,CAAsB,mBAAtB,CAA0C,KAAK,aAA/C,EAA8D,KAAK,SAAnE;AACA,WAAK,YAAL,CAAkB,IAAlB,CAAuB,KAAK,SAA5B;AACD;AACH;AACO;AAA0B;AAC5B;;;;WACH,qBAAY,OAAZ,EAAF;AAEI,WAAK,OAAL,CAAa,kBAAb,CAAgC,KAAK,SAArC,EAAgD,OAAhD;AACD;AACH;AACO;AAAmB;;;;WACxB,uBAAF;AACI,WAAK,cAAL,CAAoB,GAApB,CAAwB,UAAA,YAAY;AAAA,eAAI,YAAY,CAAC,WAAb,EAAJ;AAAA,OAApC;;AACA,WAAK,gBAAL,CAAsB,wBAAtB,CAA+C,KAAK,aAApD,EAAmE,KAAK,SAAxE;;AAEA,UAAI,KAAK,SAAT,EAAoB;AAClB,aAAK,OAAL,CAAa,iBAAb,CAA+B,KAAK,OAApC,EAA6C,IAA7C,EAAmD,WAAnD;AACD;AACF;;;;;;;;;;;;;;;oBACF,oB;;AACD,gBAAA,CAAA,cAAA,GAAA;AA9EA,kBAAA,CAAA;AAAA,IAAA,IAAA,EAAA;AAAA,GAAA;AA8EA,CAAA;AA9EM;AAAI;AAAkC;AAE1B;;ACVlB;AAAI;AACE;AAGA;;IAIN,a;;;;;;;;AAAE;AAAQ;AAEE;AAA6B;AAAmB;AAA1D,+BAAkB,aAAlB,EAA2C,UAA3C,EAAF;AAAA;;AACI;AAAA;AAAI,MAAA,OAAO,GAAQ,EAAnB,CADJ,CAEA;;AAEI,UAAI,UAAU,CAAC,OAAf,EAAwB;AAEtB,QAAA,OAAO,GAAG,UAAU,CAAC,OAArB;;AACA,YAAI,CAAC,KAAK,gBAAL,CAAsB,aAAtB,EAAqC,UAArC,CAAL,EAAuD;AACrD,UAAA,OAAO,CAAC,KAAR,CAAc,oDAAd;AACD;AACF,OAND,MAMO;AAAE;AACP,QAAA,aAAa,CAAC,OAAd,CAAsB,UAAA,KAAK,EAAjC;AACQ,cAAI,UAAU,CAAC,KAAD,CAAV,KAAsB,SAA1B,EAAsC;AACpC,YAAA,OAAO,CAAC,KAAD,CAAP,GAAiB,MAAI,CAAC,QAAL,CAAc,UAAU,CAAC,KAAD,CAAxB,EAAiC;AAAC,cAAA,GAAG,EAAE;AAAN,aAAjC,CAAjB;AACD;AACF,SAJD;AAKD;;AACD,aAAO,OAAP;AACD;AACH;AACO;AAAyB;AAC/B;AAAmB;;;;WADlB,0BAAiB,MAAjB,EAAgC,OAAhC,EAAF;AACI,MAAA,OAAO,GAAI,OAAO,IAAI,EAAtB;;AACA,WAAK;AAAA;AAAI,MAAA,GAAT,IAAgB,MAAhB,EAAwB;AACtB;AAAA;AAAI,QAAA,GAAG,GAAG,MAAM,CAAC,GAAD,CAAhB,CADsB,CAE5B;;AACM,YAAI,OAAO,GAAP,KAAe,QAAnB,EAA6B;AAC3B,UAAA,OAAO,CAAC,GAAD,CAAP,GAAe,GAAf;AACD,SAFD,MAGK,IAAI,EAAE,OAAO,CAAC,2BAAD,CAAP,IAAwC,GAAG,CAAC,KAAJ,CAAU,UAAV,CAA1C,CAAJ,EAAsE;AACzE,UAAA,OAAO,CAAC,GAAD,CAAP,GAAe,KAAK,QAAL,CAAc,GAAd,EAAmB;AAAC,YAAA,GAAG,EAAE;AAAN,WAAnB,CAAf;AACD;AACF,OAXL,CAWK;;;AACD,aAAO,OAAP;AACD;AACH;AACO;AAAwB;AACpB;AACV;;;;WAFC,kBAAS,KAAT,EAAqB,OAArB,EAAF;AACI,MAAA,OAAO,GAAG,OAAO,IAAI,EAArB;AACA;AAAA;AAAI,MAAA,MAAM,GAAQ,KAAlB;;AACA,UAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AAAE;AAC/B,YAAI,KAAK,KAAK,OAAd,EAAuB;AACrB,UAAA,MAAM,GAAG,KAAT;AACD,SAFD,MAEO,IAAI,KAAK,KAAK,GAAd,EAAmB;AACxB,UAAA,MAAM,GAAG,CAAT;AACD,SAFM,MAEA;AACL,UAAA,MAAM,GACd;AACU,eAAK,aAAL,CAAmB,KAAnB,EAA0B,OAA1B;AACV;AADU,aAGG,KAAK,eAAL,CAAqB,KAArB;AACb;AAJU,aAMG,KAAK,iBAAL,CAAuB,KAAvB,EAA8B,OAA9B;AACb;AAPU,aASG,KAAK,aAAL,CAAmB,KAAnB,CATH,IAWG,KAbL;AAcD;AACF;;AAED,UAAI,OAAO,CAAC,KAAD,CAAX,EAAoB;AAClB;AAAA;AAAI,QAAA,GAAG,GAAmB,OAAO,CAAC,KAAD,CAAjC;;AACA,YAAI,MAAM,YAAY,KAAtB,EAA6B;AAAE;AAC7B,cAAI,GAAG,KAAK,QAAZ,EAAsB;AACpB,YAAA,MAAM,GAAG,IAAI,MAAM,CAAC,IAAP,CAAY,YAAhB,CAA6B,MAAM,CAAC,CAAD,CAAnC,EAAwC,MAAM,CAAC,CAAD,CAA9C,CAAT;AACD,WAFD,MAEO,IAAI,GAAG,KAAK,OAAZ,EAAqB;AAC1B,YAAA,MAAM,GAAG,KAAK,WAAL,CAAiB,MAAjB,CAAT;AACD,WAFM,MAEA,IAAI,GAAG,KAAK,UAAR,IAAsB,GAAG,CAAC,KAAJ,CAAU,cAAV,CAA1B,EAAsD;AAC3D,YAAA,MAAM,GAAG,KAAK,SAAL,CAAe,MAAf,CAAT;AACD;AACF,SARD,MAQO,IAAI,MAAM,YAAY,MAAtB,EAA8B;AACnC,cAAI,GAAG,KAAK,MAAZ,EAAoB;AAClB,YAAA,MAAM,GAAG,KAAK,aAAL,CAAmB,MAAnB,CAAT;AACD,WAFD,MAGK,IAAI,GAAG,CAAC,KAAJ,CAAU,iBAAV,CAAJ,EAAkC;AACrC,YAAA,MAAM,GAAG,KAAK,mBAAL,CAAyB,MAAzB,CAAT;AACD;AACF;AACF,OA5CL,CA6CA;;;AAEI,aAAO,MAAM,CAAC,2BAAD,CAAb;AACA,aAAO,MAAM,CAAC,KAAD,CAAb;AAEA,aAAO,MAAP;AACD;AACH;AACO;AAAwB;AAAmB;;;;WAAxC,mBAAU,KAAV,EAAV;AACI;AAAA;AAAI,MAAA,MAAJ;;AACA,UAAI,KAAK,CAAC,CAAD,CAAL,CAAS,WAAT,KAAyB,KAA7B,EAAoC;AAAE;AACpC,QAAA,MAAM,GAAW,KAAR,CAAe,GAAf,CAAmB,UAAC,EAAD;AAAA,iBAAkB,IAAI,MAAM,CAAC,IAAP,CAAY,MAAhB,CAAuB,EAAE,CAAC,CAAD,CAAzB,EAA8B,EAAE,CAAC,CAAD,CAAhC,CAAlB;AAAA,SAAnB,CAAT;AACD,OAFD,MAEO,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,CAAD,CAAN,CAAX,CAAN,IAAgC,QAAQ,CAAC,KAAK,CAAC,CAAD,CAAN,CAA5C,EAAwD;AAC7D,QAAA,MAAM,GAAG,IAAI,MAAM,CAAC,IAAP,CAAY,MAAhB,CAAuB,KAAK,CAAC,CAAD,CAA5B,EAAiC,KAAK,CAAC,CAAD,CAAtC,CAAT;AACD;;AACD,aAAO,MAAP;AACJ;AAEC;AAAQ;AAAwB;AAA0B;AAC1C;;;;WADP,uBAAc,KAAd,EAA0B,OAA1B,EAAV;AACI;AAAA;AAAI,MAAA,MAAJ;;AACA,UAAI;AACF,QAAA,MAAM,GAAG,OAAO,CAAC,KAAD,CAAhB;;AACA,YAAI,MAAM,YAAY,KAAtB,EAA6B;AACnC;AAEQ,cAAI,MAAM,CAAC,CAAD,CAAN,CAAU,WAAV,KAA0B,MAA9B,EAAsC;AAAE;AACtC,YAAA,MAAM,GAAG,KAAK,SAAL,CAAe,MAAf,CAAT;AACD;AACF,SAND,MAQK,IAAI,MAAM,KAAK,MAAM,CAAC,MAAD,CAArB,EAA+B;AAC1C;AACQ;AAAA;AAAI,UAAA,UAAU,GAAG,OAAjB;AACA,UAAA,UAAU,CAAC,2BAAD,CAAV,GAA0C,IAA1C;AACA,UAAA,MAAM,GAAG,KAAK,gBAAL,CAAsB,MAAtB,EAA8B,UAA9B,CAAT;AACD;AACF,OAhBD,CAgBE;AAAA;AAAO,MAAA,CAAP,EAAU,CACX;;AACD,aAAO,MAAP;AACJ;AAEC;AAAQ;AAAwB;AAC7B;;;;WADM,yBAAgB,KAAhB,EAAV;AACI;AAAA;AAAI,MAAA,MAAJ;;AACA,UAAI,KAAK,CAAC,KAAN,CAAY,2BAAZ,CAAJ,EAA8C;AAC5C,YAAI;AACF,UAAA,MAAM,GAAG,QAAjB,kCAAA,KAAA,OAAiB,EAAT;AACD,SAFD,CAEE;AAAA;AAAO,QAAA,CAAP,EAAU,CAAE;AACf;;AACD,aAAO,MAAP;AACJ;AAEC;AAAQ;AAAwB;AAA0B;AAC/C;;;;WADF,2BAAkB,KAAlB,EAAiC,OAAjC,EAAV;AACI;AAAA;AAAI,MAAA,MAAJ;;AAEA,UAAI,KAAK,CAAC,KAAN,CAAY,iCAAZ,CAAJ,EAAoD;AAAE;AACpD,YAAI;AACF;AAAA;AAAI,UAAA,OAAO,GAAG,KAAK,CAAC,KAAN,CAAY,iCAAZ,CAAd;AACA,UAAA,MAAM,GAAG,MAAM,CAAC,IAAP,CAAY,OAAO,CAAC,CAAD,CAAnB,EAAwB,OAAO,CAAC,CAAD,CAA/B,CAAT;AACD,SAHD,CAGE;AAAA;AAAO,QAAA,CAAP,EAAU,CAAE;AACf,OALD,MAKO,IAAI,KAAK,CAAC,KAAN,CAAY,UAAZ,CAAJ,EAA6B;AAAE;AACpC,YAAI;AACF;AAAA;AAAI,UAAA,cAAc,GAAY,OAAO,CAAC,KAAD,CAAhB,CAAyB,MAAzB,CAAgC,CAAhC,EAAmC,WAAnC,KACV,OAAO,CAAC,KAAD,CAAhB,CAAyB,KAAzB,CAA+B,CAA/B,CADF;AAEA,UAAA,MAAM,GAAG,MAAM,CAAC,IAAP,CAAY,cAAZ,EAA4B,KAA5B,CAAT;AACD,SAJD,CAIE;AAAA;AAAO,QAAA,CAAP,EAAU,CAAE;AACf;;AACD,aAAO,MAAP;AACJ;AAEC;AACE;AACE;AAC2B;AAAmB;;;;WAAzC,6BAAoB,cAApB,EAAV;AACI;AAAA;AAAI,MAAA,iBAAiB,GAAU,cAA/B;;AAEA,WAAK;AAAA;AAAI,MAAA,GAAT,IAAgB,iBAAhB,EAAmC;AAAE;AACnC,YAAI,iBAAiB,CAAC,GAAD,CAArB,EAA4B;AAC1B;AAAA;AAAI,UAAA,KAAK,GAAG,iBAAiB,CAAC,GAAD,CAA7B;;AAEA,cAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AAC7B,YAAA,KAAK,GAAY,KAAT,CAAgB,WAAhB,EAAR;AACD,WAFD,MAGK,IAAI,GAAG,KAAK,YAAZ,EAA0B;AAC7B,YAAA,KAAK,GAAW,KAAR,CAAe,GAAf,CAAmB,UAAU,GAAV,EAArC;AACY,kBAAI,GAAG,CAAC,KAAJ,CAAU,UAAV,CAAJ,EAA2B;AAAE;AAC3B,uBAAO,MAAM,CAAC,IAAP,CAAY,SAAZ,CAAsB,GAAG,CAAC,WAAJ,EAAtB,CAAP;AACD,eAFD,MAEO;AAAE;AACP,uBAAO,GAAP;AACD;AACF,aANO,CAAR;AAOD;;AAED,cAAI,GAAG,KAAK,OAAZ,EAAqB;AACnB;AAAA;AAAI,YAAA,OAAO,GAAG,GAAG,CAAC,OAAJ,CAAY,UAAZ,EAAwB,EAAxB,IAA8B,OAA5C;AACA,YAAA,iBAAiB,CAAC,GAAD,CAAjB,GAAyB,MAAM,CAAC,IAAP,CAAY,OAAZ,EAA0B,KAA1B,CAAzB;AACD,WAHD,MAIK,IAAI,GAAG,KAAK,UAAZ,EAAwB;AAC3B,YAAA,iBAAiB,CAAC,GAAD,CAAjB,GAAyB,MAAM,CAAC,IAAP,CAAY,eAAZ,CAAiC,KAAjC,CAAzB;AACD,WAFI,MAGA;AACH,YAAA,iBAAiB,CAAC,GAAD,CAAjB,GAAyB,KAAzB;AACD;AACF;AACF;;AAED,aAAO,iBAAP;AACJ;AAEC;AAAQ;AAAwB;AAC5B;;;;WADK,uBAAc,KAAd,EAAV;AACI;AAAA;AAAI,MAAA,MAAJ;;AAEA,UAAI,KAAK,CAAC,KAAN,CAAY,mEAAZ,CAAJ,EAAsF;AACpF,YAAI;AACF,UAAA,MAAM,GAAG,IAAI,IAAJ,CAAS,KAAT,CAAT;AACD,SAFD,CAEE;AAAA;AAAO,QAAA,CAAP,EAAU,CAAE;AACf;;AACD,aAAO,MAAP;AACJ;AAEC;AAAQ;AAAwB;AAC1B;;;;WADG,qBAAY,KAAZ,EAAV;AACI,aAAO,KAAK,CAAC,GAAN,CAAU,UAAA,EAAE,EAAvB;AACM,YAAI,EAAE,CAAC,IAAH,CAAQ,IAAR,CAAa,KAAb,CAAmB,WAAnB,CAAJ,EAAqC;AACnC,UAAA,EAAE,CAAC,IAAH,CAAQ,IAAR,GAAe,MAAM,CAAC,IAAP,CAAY,UAAZ,CAAuB,EAAE,CAAC,IAAH,CAAQ,IAA/B,CAAf;AACD;;AACD,eAAO,EAAP;AACD,OALM,CAAP;AAMJ;AAEC;AAAQ;AAAwB;AACxB;;;;WADC,uBAAc,KAAd,EAAV;AACI;AAAA;AAAI,MAAA,MAAM,GAAG,KAAb;;AAEA,UAAI,CAAC,KAAK,MAAM,CAAC,IAAb,EAAmB,KAAnB,CAAyB,WAAzB,CAAJ,EAA2C;AACzC,QAAA,MAAM,CAAC,IAAP,GAAc,MAAM,CAAC,IAAP,CAAY,UAAZ,CAAuB,MAAM,CAAC,IAA9B,CAAd;AACD;;AAED,WAAK;AAAA;AAAI,MAAA,GAAT,IAAgB,MAAhB,EAAwB;AACtB;AAAA;AAAI,QAAA,GAAG,GAAG,MAAM,CAAC,GAAD,CAAhB;;AACA,YAAI,GAAG,KAAK,QAAR,IAAoB,GAAG,KAAK,QAA5B,IAAwC,GAAG,KAAK,aAApD,EAAmE;AACjE,UAAA,MAAM,CAAC,GAAD,CAAN,GAAc,IAAI,MAAM,CAAC,IAAP,CAAY,KAAhB,CAAsB,GAAG,CAAC,CAAD,CAAzB,EAA8B,GAAG,CAAC,CAAD,CAAjC,CAAd;AACH,SAFC,MAEK,IAAI,GAAG,KAAK,MAAR,IAAkB,GAAG,KAAK,YAA9B,EAA4C;AAC/C,UAAA,MAAM,CAAC,GAAD,CAAN,GAAc,IAAI,MAAM,CAAC,IAAP,CAAY,IAAhB,CAAqB,GAAG,CAAC,CAAD,CAAxB,EAA6B,GAAG,CAAC,CAAD,CAAhC,CAAd;AACD;AACF;;AAED,aAAO,MAAP;AACJ;AAEC;AAAQ;AAAgC;AAA6B;AAC7D;;;;WADC,0BAAiB,aAAjB,EAA0C,UAA1C,EAAV;AACI,WAAK;AAAA;AAAI,MAAA,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,aAAa,CAAC,MAAlC,EAA0C,CAAC,EAA3C,EAA+C;AAC7C;AAAA;AAAI,QAAA,KAAK,GAAG,aAAa,CAAC,CAAD,CAAzB;;AACA,YAAI,KAAK,KAAK,SAAV,IAAuB,OAAO,UAAU,CAAC,KAAD,CAAjB,KAA6B,WAAxD,EAAqE;AACnE,iBAAO,KAAP;AACD;AACF;;AACD,aAAO,IAAP;AACJ;;;;;;8BA9OA,qB,CAAA,C,EAAA;AAAA,SAAA,KAAA,CAAA,IAAA,aAAA,GAAA;AAAA,C;;;;;;;;;;;;AAAI,C;AAAE;AAAI;AAGV;AAAyC;;ACVzC;AAAI;AACE;;;IAON,oB;;;;;;;;AAAE;AAAQ;AAEC;AAAmB;AAA5B,gCAAmB,kBAAnB,EAAF;AACI,MAAA,kBAAkB,GAAG,kBAAkB,IAAI;AAAE,QAAA,OAAO,EAAE;AAAX,OAA3C;AAEA,aAAO,IAAI,UAAJ,CAAoB,UAAC,gBAAD,EAA/B;AACM,YAAI,SAAS,CAAC,WAAd,EAA2B;AACzB,UAAA,SAAS,CAAC,WAAV,CAAsB,kBAAtB,CACE,UAAC,QAAD,EADV;AAEY,YAAA,gBAAgB,CAAC,IAAjB,CAAsB,QAAtB;AACA,YAAA,gBAAgB,CAAC,QAAjB;AACD,WAJH,EAKE,UAAC,GAAD;AAAA,mBAAS,gBAAgB,CAAC,KAAjB,CAAuB,GAAvB,CAAT;AAAA,WALF,EAME,kBANF;AAQD,SATD,MASO;AACL,UAAA,gBAAgB,CAAC,KAAjB,CAAuB,qCAAvB;AACD;AACF,OAbM,CAAP;AAcD;;;;;;qCApBH,4B,CAAA,C,EAAA;AAAA,SAAA,KAAA,CAAA,IAAA,oBAAA,GAAA;AAAA,C;;;;;;;;;;;;AAAI,C;AAAE;AAAI;AACoB;AAEI;;;ACR3B,IAAM,mBAAmB,GAAG,IAAI,cAAJ,CAAiC,qBAAjC,CAA5B;AACP;AAAI;AAAW;;AAAK;AAAI;AAGnB;AAAyC;;ACN9C;AAAI;AAAa;;IAKjB,c;AAAE;AAAQ;AAAyB;AAKnC,0BAAwB,MAAxB,EAAA;AAAA;;AAAA,SAAA,MAAA,GAAwB,MAAxB;AAJA,SAAA,IAAA,GAA6B,IAAI,aAAJ,CAA7B,CAA6B,CAA7B;AAKI,SAAK,MAAL,GAAc,KAAK,MAAL,IAAe;AAAC,MAAA,MAAM,EAAE;AAAT,KAA7B;AACD;AACH;AACO;AACC;;;;;WADN,uBAAF;AACI,WAAK,IAAL,CAAU,QAAV;AACD;;;;;;;;;;;;;;IAIH,2B;;;;;AAAE;AAAQ;AAAuB;AAAyB;AAC1D,uCAAwB,IAAxB,EAA+E,MAA/E,EAAA;AAAA;;AAAA;;AACI,+BAAM,MAAN;AADJ,WAAA,IAAA,GAAwB,IAAxB;AAAA;AAEG;AACH;AACO;AACQ;;;;;WADb,gBAAF;AAAA;;AACI,UAAI,OAAO,MAAP,KAAkB,WAAtB,EAAmC;AACjC;AACD;;AAED,UAAI,eAAe,EAAnB,EAAuB;AACrB,aAAK,IAAL,CAAU,IAAV,CAAe,MAAM,CAAC,IAAtB;AACD,OAFD,MAEO,IAAI,CAAC,QAAQ,CAAC,aAAT,CAAuB,eAAvB,CAAL,EAA8C;AAC7C,QAAA,MAAN,CAAc,YAAd,IAAoC,MAAN,CAAc,YAAd,KAA+B,EAA7D;AACM,QAAA,MAAN,CAAc,YAAd,EAA4B,IAA5B,CAAiC;AAAE,UAAA,IAAI,EAAE,KAAK,IAAb;AAAmB,UAAA,WAAW,EAAE;AAAA,mBAAM,MAAI,CAAC,IAAL,CAAU,IAAV,CAAe,MAAM,CAAC,IAAtB,CAAN;AAAA;AAAhC,SAAjC;AACA,aAAK,gBAAL;AACD;AACF;AACH;AACO;AAAmB;;;;WAAhB,4BAAV;AACU,MAAA,MAAN,CAAc,aAAd,IAAqC,MAAN,CAAc,aAAd,KAAgC,YAAnE;AACY,QAAA,MAAN,CAAc,YAAd,EAA4B,OAA5B,CAAoC,UAAA,UAAU,EAApD;AACQ,UAAA,UAAU,CAAC,IAAX,CAAgB,GAAhB,CAAoB,YAA5B;AAAyC,YAAA,UAAU,CAAC,WAAX;AAA2B,WAA5D;AACD,SAFD;AAGM,QAAA,MAAN,CAAc,YAAd,EAA4B,MAA5B,CAAmC,CAAnC,EAA4C,MAAN,CAAc,YAAd,EAA4B,MAAlE;AACD,OALD;;AAOA;AAAA;AAAI,MAAA,MAAM,GAAG,QAAQ,CAAC,aAAT,CAAwB,QAAxB,CAAb;AACA,MAAA,MAAM,CAAC,EAAP,GAAY,cAAZ,CATJ,CAUA;;AAEI;AAAA;AAAI,MAAA,MAAM,GAAG,KAAK,MAAL,CAAY,MAAzB;AACA,MAAA,MAAM,IAAI,MAAM,CAAC,OAAP,CAAe,GAAf,MAAwB,CAAC,CAAzB,GAA6B,GAA7B,GAAmC,GAA7C;AACA,MAAA,MAAM,CAAC,GAAP,GAAa,MAAM,GAAG,sBAAtB;AACA,MAAA,QAAQ,CAAC,aAAT,CAAuB,MAAvB,EAA+B,WAA/B,CAA2C,MAA3C;AACJ;;;;EAnCA,c;;4CADA,mC,CAAA,C,EAAA;AAAA,SAAA,KAAA,CAAA,IAAA,2BAAA,EAAA,MAAA,CAAA,QAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,MAAA,CAAA,QAAA,CAAA,mBAAA,EAAA,CAAA,CAAA,CAAA;AAAA,C;;;;uCAAI;;AAAC;;AACK,2BAAA,CAAA,cAAA,GAAA;AAAA,SAAA,CApBV;AAAA,IAAA,IAAA,EAAA;AAAA,GAoBU,EACV;AAAA,IAAA,IAAA,EAAA,SAAA;AAAA,IAAA,UAAA,EAAA,CAAA;AAAA,MAAA,IAAA,EAAA;AAAA,KAAA,EAAA;AAAA,MAAA,IAAA,EAAmD,MAAnD;AAAA,MAAA,IAAA,EAAA,CAAA,mBAAA;AAAA,KAAA;AAAA,GADU,CAAA;AAAA,CAAA;;;;;;;;;;;;;;;;;;;;AACN,C;;IAsCJ,mB;;;;;AAAE;AAAQ;AAAyB;AACnC,+BAAuD,MAAvD,EAAA;AAAA;;AAAA,8BACU,MADV;AAEG;AACH;AACO;AACQ;;;;;WADb,gBAAF;AAAA;;AACI,UAAI,OAAO,MAAP,KAAkB,WAAtB,EAAmC;AACjC;AACD;;AAED,UAAI,eAAe,EAAnB,EAAuB;AACrB,aAAK,IAAL,CAAU,IAAV,CAAe,MAAM,CAAC,IAAtB;AACD,OAFD,MAEO,IAAI,CAAC,QAAQ,CAAC,aAAT,CAAuB,eAAvB,CAAL,EAA8C;AACnD;AAAA;AAAI,QAAA,MAAM,GAAG,QAAQ,CAAC,aAAT,CAAuB,QAAvB,CAAb;AACA,QAAA,MAAM,CAAC,EAAP,GAAY,cAAZ;AAEA,QAAA,MAAM,CAAC,KAAP,GAAe,IAAf;;AACA,QAAA,MAAM,CAAC,MAAP,GAAgB;AAAA,iBAAM,MAAI,CAAC,IAAL,CAAU,IAAV,CAAe,MAAM,CAAC,IAAtB,CAAN;AAAA,SAAhB;;AACA,QAAA,MAAM,CAAC,GAAP,GAAa,KAAK,MAAL,CAAY,MAAzB;AACA,QAAA,QAAQ,CAAC,aAAT,CAAuB,MAAvB,EAA+B,WAA/B,CAA2C,MAA3C;AACD;AACF;;;;EArBH,c;;oCADA,2B,CAAA,C,EAAA;AAAA,SAAA,KAAA,CAAA,IAAA,mBAAA,EAAA,MAAA,CAAA,QAAA,CAAA,mBAAA,EAAA,CAAA,CAAA,CAAA;AAAA,C;;;;+BAAI;;AAAC;;AACK,mBAAA,CAAA,cAAA,GAAA;AAAA,SAAA,CACV;AAAA,IAAA,IAAA,EAAA,SAAA;AAAA,IAAA,UAAA,EAAA,CAAA;AAAA,MAAA,IAAA,EAAA;AAAA,KAAA,EAAA;AAAA,MAAA,IAAA,EAA2B,MAA3B;AAAA,MAAA,IAAA,EAAA,CAAA,mBAAA;AAAA,KAAA;AAAA,GADU,CAAA;AAAA,CAAA;;;;;;;;;;;;;;;;;;AACN,C;AAAE;AAAI;AAAkC;AAE3C;;AC9DD;AAAI;AAC2B;AACJ;;;IAQ3B,Q;AAAE;AAAQ;AAA4B;AAEtC,oBAAsB,SAAtB,EAAA;AAAA;;AAAA,SAAA,SAAA,GAAsB,SAAtB;AADA,SAAA,aAAA,GAAA,EAAA;AACmD;AACnD;AACO;AAA0B;AAC/B;;;;;WADA,iBAAQ,OAAR,EAAF;AAAA;;AACI,aAAO,IAAI,UAAJ,CAAe,UAAC,gBAAD,EAA1B;AACQ,QAAA,MAAI,CAAC,aAAL,CAAmB,IAAnB,CAAwB,MAAI,CAAC,SAAL,CAAe,IAAf,CACrB,SADqB,CACX;AAAA,iBAAM,MAAI,CAAC,cAAL,CAAoB,OAApB,EAA6B,gBAA7B,CAAN;AAAA,SADW,CAAxB;AAEH,OAHM,CAAP;AAID;AACH;AACO;AACC;;;;WADN,uBAAF;AACI,WAAK,aAAL,CAAmB,GAAnB,CAAuB,UAAA,GAAG;AAAA,eAAI,GAAG,CAAC,WAAJ,EAAJ;AAAA,OAA1B;AACD;AACH;AACO;AAA0B;AACnB;AAAmB;;;;WADvB,wBAAe,OAAf,EAAwB,QAAxB,EAAV;AACI;AAAA;AAAM,MAAA,QAAQ,GAAG,IAAI,MAAM,CAAC,IAAP,CAAY,QAAhB,EAAjB;AACA,MAAA,QAAQ,CAAC,OAAT,CAAiB,OAAjB,EAA0B,UAAU,OAAV,EAAmB,MAAnB,EAA9B;AACM,YAAI,MAAM,KAAK,MAAM,CAAC,IAAP,CAAY,cAAZ,CAA2B,EAA1C,EAA8C;AAC5C,UAAA,QAAQ,CAAC,IAAT,CAAc,OAAd;AACA,UAAA,QAAQ,CAAC,QAAT;AACD,SAHD,MAGO;AACL,UAAA,QAAQ,CAAC,KAAT,CAAe,OAAf;AACD;AACF,OAPD;AAQJ;;;;;;yBA1BA,gB,CAAC,C,EAAA;AAAD,SAAA,KAAA,CAAA,IAAA,QAAA,EAAA,MAAA,CAAA,QAAA,CAAA,cAAA,CAAA,CAAA;AAAA,C;;;;oBAAI;;AAAC;;AACK,QAAA,CAAA,cAAA,GAAA;AAAA,SAAA,CARV;AAAA,IAAA,IAAA,EAAA;AAAA,GAQU,CAAA;AAAA,CAAA;;;;;;;;;;;;AARN,C;AAAE;AAAI;AAAkC;AAGX;;ACLjC;AAAI;AAA6D;;;IAQjE,O;AAAE;AAAQ;AAEG;AACiB;AACT;AAFrB,mBAAA,QAAA,EAAA,aAAA,EAAA,IAAA,EAAA;AAAA;;AAAA;;AACA,SAAA,QAAA,GAAA,QAAA;AACA,SAAA,aAAA,GAAA,aAAA;AACA,SAAA,IAAA,GAAA,IAAA;;AAsCA,SAAA,kBAAA,GAAuB,UAAC,MAAD,EAAc,OAAd,EAAvB;AACI;AAAA;AAAI,MAAA,GAAJ;AAAY;AAAE,MAAA,YAAd;AAA+B;AAAE,MAAA,aAAjC;;AACA,UAAI,MAAJ,EAAY;AACV,aAAK;AAAA;AAAI,QAAA,GAAT,IAAgB,OAAhB,EAAyB;AACvB,UAAA,aAAR,gBAA8B,GAAG,CAAC,OAAJ,CAAY,QAAZ,EAAsB,UAAA,CAAC;AAAA,mBAAI,CAAC,CAA1D,WAAyD,EAAJ;AAAA,WAAvB,CAA9B,CAAQ;AACA,UAAA,YAAY,GAAG,OAAO,CAAC,GAAD,CAAP,CAAa,YAA5B;;AACA,cAAI,CAAC,UAAD,EAAa,QAAb,EAAuB,OAAvB,CAA+B,GAA/B,MAAwC,CAAC,CAAzC,IAA8C,OAAO,YAAP,KAAwB,QAA1E,EAAoF;AAC5F;AACU,aAAC,UAAC,aAAD,EAAX;AACY,cAAA,MAAI,CAAC,QAAL,CAAc,OAAd,CAAsB;AAAC,gBAAA,OAAO,EAAE;AAAV,eAAtB,EAA+C,SAA/C,CAAyD,UAAA,OAAO,EAA5E;AACc,oBAAI,OAAO,MAAM,CAAC,aAAD,CAAb,KAAiC,UAArC,EAAiD;AAC/C,kBAAA,MAAM,CAAC,aAAD,CAAN,CAAsB,OAAO,CAAC,CAAD,CAAP,CAAW,QAAX,CAAoB,QAA1C;AACD,iBAFD,MAEO;AACL,kBAAA,OAAO,CAAC,KAAR,CACE,gGACA,2EAFF;AAID;AACF,eATD;AAUD,aAXD,EAWG,aAXH;AAYD,WAdD,MAcO;AACL,YAAA,GAAG,GAAI,MAAI,CAAC,aAAL,CAAmB,QAAnB,CAA4B,YAA5B,CAAP;;AACA,gBAAI,OAAO,MAAM,CAAC,aAAD,CAAb,KAAiC,UAArC,EAAiD;AAC/C,cAAA,MAAM,CAAC,aAAD,CAAN,CAAsB,GAAtB;AACD,aAFD,MAEO;AACL,cAAA,OAAO,CAAC,KAAR,CACE,gGACA,2EAFF;AAID;AACF;AACF;AACF;AACL,KAjCA;AArCM;AACN;AACO;AAAgC;AAA0B;AAClD;AAAmB;;;;;WADhC,yBAAgB,aAAhB,EAAyC,OAAzC,EAAuD,MAAvD,EAAF;AAAA;;AACI,MAAA,aAAa,CAAC,OAAd,CAAsB,UAAA,YAAY,EAAtC;AACM;AAAA;AAAM,QAAA,SAAS,GAAG,MAAI,CAAC,YAAL,CAAkB,YAAlB,CAAlB;;AAAiD;AAC/C,QAAA,IAAI,GAAG,MAAI,CAAC,IADd;;AAEA,QAAA,IAAI,CAAC,iBAAL,CAAuB,YAA7B;AACQ,UAAA,OAAO,CAAC,MAAD,CAAP,CAAgB,WAAhB,CAA4B,SAA5B,EAAuC,UAAS,KAAT,EAA/C;AACU;AAAA;AAAI,YAAA,KAAK,GAAQ,KAAK,GAAG,KAAH,GAAW,EAAjC;AACA,YAAA,KAAK,CAAC,MAAN,GAAe,IAAf;AACA,YAAA,IAAI,CAAC,GAAL,CAAS;AAAA,qBAAM,OAAO,CAAC,YAAD,CAAP,CAAsB,IAAtB,CAA2B,KAA3B,CAAN;AAAA,aAAT;AACD,WAJD;AAKD,SAND;AAOD,OAVD;AAWD;AACH;AACO;AAAgC;AAA0B;AACpD;AAAmB;;;;WAD9B,2BAAkB,aAAlB,EAA2C,OAA3C,EAAyD,MAAzD,EAAF;AAAA;;AACI,MAAA,aAAa,CAAC,OAAd,CAAsB,UAAA,YAAY,EAAtC;AACM;AAAA;AAAM,QAAA,SAAS,GAAG,OAAI,CAAC,YAAL,CAAkB,YAAlB,CAAlB;;AACA,QAAA,OAAI,CAAC,IAAL,CAAU,iBAAV,CAA4B,YAAlC;AACQ,cAAI,OAAO,CAAC,MAAD,CAAX,EAAqB;AACnB,YAAA,MAAM,CAAC,IAAP,CAAY,KAAZ,CAAkB,cAAlB,CAAiC,OAAO,CAAC,MAAD,CAAxC,EAAkD,SAAlD;AACD;AACF,SAJD;AAKD,OAPD;;AASA,UAAI,OAAO,CAAC,MAAD,CAAX,EAAqB;AACnB,YAAI,OAAO,CAAC,MAAD,CAAP,CAAgB,MAApB,EAA4B;AAC1B,UAAA,OAAO,CAAC,MAAD,CAAP,CAAgB,MAAhB,CAAuB,IAAvB;AACD;;AAED,eAAO,OAAO,CAAC,MAAD,CAAP,CAAgB,gBAAvB;AACA,eAAO,OAAO,CAAC,MAAD,CAAd;AACD;AAEF;AACH;AACO;AAA+B;AAAmB;;;;WAmC/C,sBAAa,YAAb,EAAV;AACI,aAAO,YAAY,CAChB,OADI,CACI,UADJ,EACgB,UAA3B,EAA2B;AAAA,0BAAY,EAAE,CAAzC,WAAuC,EAAZ;AAAA,OADhB,EAC+C;AAD/C,OAEJ,OAFI,CAEI,OAFJ,EAEa,EAFb,CAAP,CADJ,CAG4B;AAA+C;;;;;;wBAlF3E,e,CAAC,C,EAAA;AAAD,SAAA,KAAA,CAAA,IAAA,OAAA,EAAA,MAAA,CAAA,QAAA,CAAA,QAAA,CAAA,EAAA,MAAA,CAAA,QAAA,CAAA,aAAA,CAAA,EAAA,MAAA,CAAA,QAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA;AAAA,C;;;;mBAAI;;AAAC;;AACK,OAAA,CAAA,cAAA,GAAA;AAAA,SAAA,CANV;AAAA,IAAA,IAAA,EAAA;AAAA,GAMU,EAPV;AAAA,IAAA,IAAA,EAAA;AAAA,GAOU,EARV;AAAA,IAAA,IAAA,EAAA;AAAA,GAQU,CAAA;AAAA,CAAA;;;;;;;;;;;;;;;;AARN,C;AAAE;AAAI;AAAkC;AAC1B;;;ACoBlB,IAAM,MAAM,GAAG,CACb,iBADa,EACM,QADN,EACgB,kBADhB,EACoC,wBADpC,EAC8D,WAD9D,EAC2E,iBAD3E,EAEb,gBAFa,EAEK,SAFL,EAEgB,mBAFhB,EAEqC,UAFrC,EAEiD,gBAFjD,EAEmE,WAFnE,EAEgF,SAFhF,EAE2F,SAF3F,EAGb,SAHa,EAGF,oBAHE,EAGoB,YAHpB,EAGkC,mBAHlC,EAGuD,eAHvD,EAGwE,cAHxE,EAGwF,aAHxF,EAIb,YAJa,EAIC,QAJD,EAIW,MAJX,EAImB,MAJnB,EAI2B,mBAJ3B,EAIgD,aAJhD,EAI+D,oBAJ/D,EAIqF,uBAJrF,EAKb,2BALa,EAKgB,sBALhB,EAKwC,qBALxC,EAK+D,0BAL/D,EAK2F,mBAL3F,EAKgH,0BALhH,EAMb,SANa,EAQb,mBARa,CAAf;AAWA,IAAM,OAAO,GAAG,CACd,gBADc,EACI,gBADJ,EACsB,OADtB,EAC+B,UAD/B,EAC2C,MAD3C,EACmD,SADnD,EAC8D,WAD9D,EAC2E,iBAD3E,EAC8F,MAD9F,EAEd,mBAFc,EAEO,WAFP,EAEoB,UAFpB,EAEgC,WAFhC,EAE6C,oBAF7C,EAEmE,QAFnE,EAE6E,YAF7E,EAGd,aAHc,EAGC,cAHD,EAGiB,cAHjB,EAKd,UALc,EAKF,cALE,EAKc,aALd,EAK6B,cAL7B,EAK6C,SAL7C,EAKwD,YALxD,EAKsE,cALtE,CAAhB;;IAuBA,gB;AAAE;AAAQ;AAAgC;AAA6B;AACnE;AAA2B;AACX;AAA4B;AAC5C;AAkFJ,4BAAA,aAAA,EAAA,UAAA,EAAA,WAAA,EAAA,QAAA,EAAA,OAAA,EAAA,SAAA,EAAA,IAAA,EAAA;AAAA;;AAAA;;AACA,SAAA,aAAA,GAAA,aAAA;AACA,SAAA,UAAA,GAAA,UAAA;AACA,SAAA,WAAA,GAAA,WAAA;AACA,SAAA,QAAA,GAAA,QAAA;AACA,SAAA,OAAA,GAAA,OAAA;AACA,SAAA,SAAA,GAAA,SAAA;AACA,SAAA,IAAA,GAAA,IAAA;AAxBA,SAAA,SAAA,GAAkD,IAAlD,YAAkD,EAAlD;AAIA,SAAA,UAAA,GAAA,EAAA;AAEA,SAAA,aAAA,GAAyB,IAAzB,OAAyB,EAAzB;AAGA,SAAA,WAAA,GAAA,EAAA;AAGA,SAAA,YAAA,GAAA,KAAA;AAEA,SAAA,2BAAA,GAAA,KAAA;AAYI,IAAA,SAAS,CAAC,IAAV,GATJ,CAUA;AAEG;;AACC,IAAA,OAAO,CAAC,OAAR,CAAgB,UAAA,MAAM;AAAA,aAAI,OAAI,CAAC,MAAD,CAAJ,GAAe,IAAI,YAAJ,EAAnB;AAAA,KAAtB;AACD;AACH;AACO;AACH;;;;;WADF,2BAAF;AAAA;;AACI,WAAK,YAAL,GAAoB,KAAK,SAAL,CAAe,IAAf,CACjB,IADiB,CACZ,KAAK,EADO,EAEjB,SAFiB,CAEP;AAAA,eAAM,OAAI,CAAC,aAAL,EAAN;AAAA,OAFO,CAApB;AAGD;AACH;AACO;AACN;;;;WADC,8BAAF;AACM,UAAI,KAAK,2BAAL,IAAoC,KAAK,EAAzC,IAA+C,KAAK,EAAL,CAAQ,WAAR,GAAsB,CAAzE,EAA4E;AAC1E,aAAK,aAAL;AACD;AACJ;AACH;AACO;AAA0B;AACrB;;;;WADV,qBAAY,OAAZ,EAAF;AACI,WAAK,aAAL,CAAmB,IAAnB,CAAwB,OAAxB;AACD;AACH;AACO;AACP;;;;WADE,yBAAF;AAAA;;AACI,WAAK,EAAL,GAAU,KAAK,UAAL,CAAgB,aAAhB,CAA8B,aAA9B,CAA4C,aAA5C,CAAV;;AACA,UAAI,KAAK,EAAL,IAAW,KAAK,EAAL,CAAQ,WAAR,KAAwB,CAAvC,EAA0C;AACtC,aAAK,2BAAL,GAAmC,IAAnC;AACA;AACH;;AAED,WAAK,2BAAL,GAAmC,KAAnC;AACA,WAAK,UAAL,GAAkB,KAAK,aAAL,CAAmB,iBAAnB,CAAqC,MAArC,EAA6C,IAA7C,CAAlB;AAGA,WAAK,UAAL,CAAgB,IAAhB,GAAuB,KAAK,UAAL,CAAgB,IAAhB,IAAwB,EAA/C;AACA,aAAO,KAAK,UAAL,CAAgB,MAAvB,KAAkC,QAAlC,IAA+C,OAAO,KAAK,UAAL,CAAgB,MAAtE;AAEA,WAAK,IAAL,CAAU,iBAAV,CAA4B,YAAhC;AACM,QAAA,OAAI,CAAC,GAAL,GAAW,IAAI,MAAM,CAAC,IAAP,CAAY,GAAhB,CAAoB,OAAI,CAAC,EAAzB,EAA6B,OAAI,CAAC,UAAlC,CAAX;AACA,QAAA,OAAI,CAAC,GAAL,CAAS,eAAT,IAA4B,kBAA5B;;AAEA,YAAI,CAAC,OAAI,CAAC,UAAL,CAAgB,MAArB,EAA6B;AAAE;AAC7B,UAAA,OAAI,CAAC,SAAL;AACD,SANP,CAOA;;;AAEM,QAAA,OAAI,CAAC,OAAL,CAAa,eAAb,CAA6B,OAA7B,EAAsC,OAAtC,EAA4C,KAA5C;;AAEA,QAAA,OAAI,CAAC,GAAL,CAAS,WAAT,CAAqB,MAArB,EAA6B,YAAnC;AACQ,cAAI,CAAC,OAAI,CAAC,YAAV,EAAwB;AACtB,YAAA,OAAI,CAAC,YAAL,GAAoB,IAApB;AACA,YAAA,UAAU,CAAC,YAArB;AAAE;AACU,cAAA,OAAI,CAAC,SAAL,CAAe,IAAf,CAAoB,OAAI,CAAC,GAAzB;AACD,aAFS,CAAV;AAGD;AACF,SAPD,EAXN,CAmBA;;;AAEM,QAAA,OAAI,CAAC,aAAL,CAAmB,IAAnB,CACE,YAAY,CAAC,IAAD,CADd,EAEE,GAAG,CAAC,UAAC,OAAD;AAAA,iBAA4B,OAAI,CAAC,OAAL,CAAa,kBAAb,CAAgC,OAAI,CAAC,GAArC,EAA0C,OAA1C,CAA5B;AAAA,SAAD,CAFL,EAGE,SAHF;;AAKA,YAAI,OAAO,MAAP,KAAkB,WAAlB,IAAuC,MAAN,CAAc,YAAd,CAArC,EAAkE;AACxE;AACc,UAAA,MAAN,CAAc,YAAd,EAA4B,GAA5B,GAAkC,OAAI,CAAC,GAAvC;AACD;AACF,OA9BD;AA+BD;AACH;AACO;AACH;;;;WADF,qBAAF;AAAA;;AACI,UAAI,CAAC,KAAK,QAAL,CAAL,EAAqB;AAAE;AACrB,aAAK,WAAL,CAAiB,kBAAjB,GAAsC,SAAtC,CACE,UAAA,QAAQ,EADhB;AAGU;AAAA;AAAI,UAAA,MAAM,GAAG,IAAI,MAAM,CAAC,IAAP,CAAY,MAAhB,CAAuB,QAAQ,CAAC,MAAT,CAAgB,QAAvC,EAAiD,QAAQ,CAAC,MAAT,CAAgB,SAAjE,CAAb;;AACA,UAAA,OAAI,CAAC,GAAL,CAAS,SAAT,CAAmB,MAAnB;AACD,SALH,EAME,UAAA,KAAK,EADb;AAEU,UAAA,OAAO,CAAC,KAAR,CAAc,8CAAd;;AACA,UAAA,OAAI,CAAC,GAAL,CAAS,SAAT,CAAmB,OAAI,CAAC,UAAL,CAAgB,mBAAhB,KAAwC,IAAI,MAAM,CAAC,IAAP,CAAY,MAAhB,CAAuB,CAAvB,EAA0B,CAA1B,CAA3D;AACD,SATH;AAWD,OAZD,MAaK,IAAI,OAAO,KAAK,QAAL,CAAP,KAA0B,QAA9B,EAAwC;AAC3C,aAAK,QAAL,CAAc,OAAd,CAAsB;AAAC,UAAA,OAAO,EAAE,KAAK,QAAL;AAAV,SAAtB,EAAiD,SAAjD,CACE,UAAA,OAAO,EADf;AAGU,UAAA,OAAI,CAAC,GAAL,CAAS,SAAT,CAAmB,OAAO,CAAC,CAAD,CAAP,CAAW,QAAX,CAAoB,QAAvC;AACD,SAJH,EAKE,UAAA,KAAK,EADb;AAEU,UAAA,OAAI,CAAC,GAAL,CAAS,SAAT,CAAmB,OAAI,CAAC,UAAL,CAAgB,mBAAhB,KAAwC,IAAI,MAAM,CAAC,IAAP,CAAY,MAAhB,CAAuB,CAAvB,EAA0B,CAA1B,CAA3D;AACD,SAPH;AAQD;AACF;AACH;AACO;AAAqB;AAAyB;AAC3C;;;;WADR,wBAAe,EAAf,EAA2B,MAA3B,EAAF;AACI,WAAK,WAAL,CAAiB,EAAjB,EAAqB,IAArB,CAA0B,MAA1B;AACD;AACH;AACO;AAAqB;AACb;;;;WADb,yBAAgB,EAAhB,EAAF;AAAE;AAEE,UAAI,KAAK,WAAL,CAAiB,EAAjB,CAAJ,EACE,KAAK,WAAL,CAAiB,EAAjB,EAAqB,KAArB;AACH;AACH;AACO;AACC;;;;WADN,uBAAF;AACI,WAAK,aAAL,CAAmB,QAAnB;;AACA,UAAI,KAAK,EAAL,IAAW,CAAC,KAAK,2BAArB,EAAkD;AAChD,aAAK,OAAL,CAAa,iBAAb,CAA+B,OAA/B,EAAwC,IAAxC,EAA8C,KAA9C;AACD;;AACD,UAAI,KAAK,YAAT,EAAuB;AACrB,aAAK,YAAL,CAAkB,WAAlB;AACD;AACF;AACH;AACO;AAAgC;AAC3B;AAAmB;;;;WAA7B,6BAAoB,aAApB,EAA2C,SAA3C,EAAF;AACI;AAAA;AAAI,MAAA,SAAS,GAAG,WAAW,CAAC,aAAa,CAAC,WAAd,EAAD,CAAX,GAA2C,GAA3D,CADJ,CACmE;;AAC/D,WAAK,GAAL,CAAS,SAAT,IAAsB,KAAK,GAAL,CAAS,SAAT,KAAuB,EAA7C;AACA,WAAK,GAAL,CAAS,SAAT,EAAoB,IAApB,CAAyB,SAAzB;AACD;AACH;AACO;AAAgC;AAA4B;AACjD;;;;WADhB,kCAAyB,aAAzB,EAAgD,SAAhD,EAAF;AACI;AAAA;AAAI,MAAA,SAAS,GAAG,WAAW,CAAC,aAAa,CAAC,WAAd,EAAD,CAAX,GAA2C,GAA3D,CADJ,CACmE;;AAC/D,UAAI,KAAK,GAAL,IAAY,KAAK,GAAL,CAAS,SAAT,CAAhB,EAAqC;AACnC;AAAA;AAAI,QAAA,KAAK,GAAG,KAAK,GAAL,CAAS,SAAT,EAAoB,OAApB,CAA4B,SAA5B,CAAZ;AAEC,QAAA,KAAK,GAAG,CAAC,CAAV,IAAgB,KAAK,GAAL,CAAS,SAAT,EAAoB,MAApB,CAA2B,KAA3B,EAAkC,CAAlC,CAAhB;AACD;AACF;;;;;;iCA/OH,wB,CAAA,C,EAAA;AAAW,SAAA,KAAA,CAAA,IACT,gBADS,EACC,MAAU,CAAA,iBAAV,CACV,aADU,CADD,EAEY,MAAA,CAAA,iBAAA,CAAyB,MAAA,CAAA,UAAzB,CAFZ,EAEyD,MAAC,CAAA,iBAAD,CACpE,oBADoE,CAFzD,EAGX,MAAA,CAAA,iBAAA,CAAA,QAAA,CAHW,EAGX,MAAA,CAAA,iBAAA,CAAA,OAAA,CAHW,EAGX,MAGI,CAAA,iBAHJ,CAIE,cAJF,CAHW,EAOK,MAAA,CAAA,iBAAA,CACL,MAAO,CAAA,MADF,CAPL,CAAA;AAQO,C;;AAChB,gBAAa,CAAE,IAAf,GAAe,MAAA,CAAA,iBAAA,CAAsB;AAAA,EAAA,IAAA,EACvC,gBADuC;AACvC,EAAA,SAAA,EAAA,CAAA,CAAA,UAAA,CAAA,CADuC;AACvC,EAAA,MAAA,EAAA;AAAA,IAAA,eAAA,EAAA,iBAAA;AAGG,IAAA,MACH,EAAA,QAJA;AAIA,IAAA,gBAAA,EAAA,kBAJA;AAIA,IAAA,sBAAA,EAAA,wBAJA;AAIA,IAAA,SAAA,EAAA,WAJA;AAIA,IAAA,eAAA,EAAA,iBAJA;AAIA,IAAA,cAAA,EAAA,gBAJA;AAIA,IAAA,OAAA,EAAA,SAJA;AAIA,IAAA,iBAAA,EAAA,mBAJA;AAIA,IAAA,QAAA,EAAA,UAJA;AAIA,IAAA,cAAA,EAAA,gBAJA;AAIA,IAAA,SAAA,EAAA,WAJA;AAIA,IAAA,OAAA,EAAA,SAJA;AAIA,IAAA,OAAA,EAAA,SAJA;AAIA,IAAA,OAAA,EAAA,SAJA;AAIA,IAAA,kBAAA,EAAA,oBAJA;AAIA,IAAA,UAAA,EAAA,YAJA;AAIA,IAAA,iBAAA,EAAA,mBAJA;AAIA,IAAA,aAAA,EAAA,eAJA;AAIA,IAAA,YAAA,EAAA,cAJA;AAIA,IAAA,WAAA,EAAA,aAJA;AAIA,IAAA,UAAA,EAAA,YAJA;AAIA,IAAA,MAAA,EAAA,QAJA;AAIA,IAAA,IAAA,EAAA,MAJA;AAIA,IAAA,IAAA,EAAA,MAJA;AAIA,IAAA,iBAAA,EAAA,mBAJA;AAIA,IAAA,WAAA,EAAA,aAJA;AAIA,IAAA,kBAAA,EAAA,oBAJA;AAIA,IAAA,qBAAA,EAAA,uBAJA;AAIA,IAAA,yBAAA,EAAA,2BAJA;AAIA,IAAA,oBAAA,EAAA,sBAJA;AAIA,IAAA,mBAAA,EAAA,qBAJA;AAIA,IAAA,wBAAA,EAAA,0BAJA;AAIA,IAAA,iBAAA,EAAA,mBAJA;AAIA,IAAA,wBAAA,EAAA,0BAJA;AAIA,IAAA,OAAA,EAAA,SAJA;AAIA,IAAA,iBAAA,EAAA;AAJA,GADuC;AAKvC,EAAA,OAAA,EAAA;AAAA,IAAA,cAAA,EAAA,gBAAA;AAAA,IAAA,cAAA,EAAA,gBAAA;AAAA,IAAA,KAAA,EAAA,OAAA;AAAA,IAAA,QAAA,EAAA,UAAA;AAAA,IAAA,IAAA,EAAA,MAAA;AAAA,IAAA,OAAA,EAAA,SAAA;AAAA,IAAA,SAAA,EAAA,WAAA;AAAA,IAAA,eAAA,EAAA,iBAAA;AAAA,IAAA,IAAA,EAAA,MAAA;AAAA,IAAA,iBAAA,EAAA,mBAAA;AAAA,IAAA,SAAA,EAAA,WAAA;AAAA,IAAA,QAAA,EAAA,UAAA;AAAA,IAAA,SAAA,EAAA,WAAA;AAAA,IAAA,kBAAA,EAAA,oBAAA;AAAA,IAAA,MAAA,EAAA,QAAA;AAAA,IAAA,UAAA,EAAA,YAAA;AAAA,IAAA,WAAA,EAAA,aAAA;AAAA,IAAA,YAAA,EAAA,cAAA;AAAA,IAAA,YAAA,EAAA,cAAA;AAAA,IAAA,QAAA,EAAA,UAAA;AAAA,IAAA,YAAA,EAAA,cAAA;AAAA,IAAA,WAAA,EAAA,aAAA;AAAA,IAAA,YAAA,EAAA,cAAA;AAAA,IAAA,OAAA,EAAA,SAAA;AAAA,IAAA,UAAA,EAAA,YAAA;AAAA,IAAA,YAAA,EAAA,cAAA;AAAA,IAAA,SAAA,EAAA;AAAA,GALuC;AAKvC,EAAA,QAAA,EAAA,CAAA,MAAA,CAAA,kBAAA,CAAA,CAAA,OAAA,EAAA,aAAA,EAAA,QAAA,EAAA,oBAAA,CAAA,CAAA,EAAA,MAAA,CAAA,oBAAA,CALuC;AAKvC,EAAA,kBAAA,EAAA,GALuC;AAKvC,EAAA,KAAA,EAAA,CALuC;AAKvC,EAAA,IAAA,EAAA,CALuC;AAKvC,EAAA,MAAA,EAAA,CAAA,CAAA,CAAA,EAAA,YAAA,CAAA,CALuC;AAKvC,EAAA,QAAA,EAAA,SAAA,yBAAA,CAAA,EAAA,EAAA,GAAA,EAAA;AAAA,QAAA,EAAA,GAAA,CAAA,EAAA;;;;;GALuC;8GAAA;iBAMtC;AANsC,CAAtB,CAAf;AAMA;;AAAmB,gBAAA,CAAA,cAAA,GAAA;AAAA,SAAA,CA5CrB;AAAA,IAAA,IAAA,EAAA;AAAA,GA4CqB,EArDrB;AAAA,IAAA,IAAA,EAAA;AAAA,GAqDqB,EA3CrB;AAAA,IAAA,IAAA,EAAA;AAAA,GA2CqB,EA1CrB;AAAA,IAAA,IAAA,EAAA;AAAA,GA0CqB,EAzCrB;AAAA,IAAA,IAAA,EAAA;AAAA,GAyCqB,EAxCrB;AAAA,IAAA,IAAA,EAAA;AAAA,GAwCqB,EAhDrB;AAAA,IAAA,IAAA,EAAA;AAAA,GAgDqB,CAAA;AAAA,CAAA;;AAhDhB,gBAAA,CAAA,cAAA,GAAA;AAoHL,eAAA,CAAA;AAAA,IAAA,IAAA,EAAA;AAAA,GAAA;AApHK,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoHD,C;AAAE;AAAI;AAAkC;AAE9B;;;ACxHd,IAAMA,QAAM,GAAG,EAAf;AACA,IAAMC,SAAO,GAAG,EAAhB;;IAOA,c;;;;;AAAE;AAAQ;AAA8B;AAOxC,0BAAc,WAAd,EAAA;AAAA;;AAAA,8BACU,WADV,EACuB,gBADvB,EACyCD,QADzC,EACiDC,SADjD;AAEG;;;EATH,gB;;+BALA,sB,CAAA,C,EAAA;AAAA,SAAW,KAAA,CAAA,IAAA,cAAA,EACC,MAAA,CAAA,iBAAA,CAA4B,gBAA5B,CADD,CAAX;AAEE,C;;AAAM,cAAQ,CAAA,IAAR,GAAQ,MACd,CAAA,iBADc,CACE;AAAA,EAAA,IAAA,EAAA,cAAA;AAClB,EAAA,SAAA,EAAA,CAAA,CAAA,iBAAA,CAAA,CADkB;AAClB,EAAA,QAAA,EAAA,CAAA,MAAA,CAAA,0BAAA;AADkB,CADF,CAAR;AAGN;;AAAmB,cAAA,CAAA,cAAA,GAAA;AAAA,SAAA,CAVrB;AAAA,IAAA,IAAA,EAAA;AAAA,GAUqB,CAAA;AAAA,CAAA;;;;;;;;;;;;;;;;;AAVjB,C;AAAE;AAAI;AAAkC;AAE7B;;;ACQf,IAAMD,QAAM,GAAG,CACb,SADa,EACF,gBADE,EACgB,UADhB,EAC4B,aAD5B,EAC2C,UAD3C,EACuD,QADvD,EACiE,SADjE,CAAf;AAGA,IAAMC,SAAO,GAAG,CACd,YADc,EACA,iBADA,EACmB,UADnB,EAC+B,kBAD/B,EACmD,gBADnD,CAAhB;;IAUA,U;AAAE;AAAQ;AAA6B;AAA0B;AAC/B;AAuBlC,sBAAA,UAAA,EAAA,OAAA,EAAA,gBAAA,EAAA;AAAA;;AAAA;;AACA,SAAA,UAAA,GAAA,UAAA;AACA,SAAA,OAAA,GAAA,OAAA;AACA,SAAA,gBAAA,GAAA,gBAAA;AAVA,SAAA,YAAA,GAA8C,IAA9C,YAA8C,EAA9C;AAGA,SAAA,aAAA,GAAA,EAAA;AACA,SAAA,aAAA,GAAyB,IAAzB,OAAyB,EAAzB;AAQI,SAAK,UAAL,CAAgB,aAAhB,CAA8B,KAA9B,CAAoC,OAApC,GAA8C,MAA9C;AACAA,IAAAA,SAAO,CAAC,OAARA,CAAgB,UAAA,MAAM;AAAA,aAAI,OAAI,CAAC,MAAD,CAAJ,GAAe,IAAI,YAAJ,EAAnB;AAAA,KAAtBA;AACD;AACH;AACO;AAAmB;;;;;WACxB,oBAAF;AAAA;;AACI,UAAI,KAAK,gBAAL,CAAsB,YAA1B,EAAwC;AAAE;AACxC,aAAK,UAAL;AACD,OAFD,MAEO;AACL,aAAK,gBAAL,CAAsB,SAAtB,CAAgC,SAAhC,CAA0C,UAAA,GAAG;AAAA,iBAAI,OAAI,CAAC,UAAL,EAAJ;AAAA,SAA7C;AACD;AACF;AACH;AACO;AAA0B;AACrB;;;;WADV,qBAAY,OAAZ,EAAF;AACI,WAAK,aAAL,CAAmB,IAAnB,CAAwB,OAAxB;AACD;AACH;AACO;AAAmB;;;;WACxB,sBAAF;AAAA;;AAGI,WAAK,aAAL,GAAqB,KAAK,gBAAL,CAAsB,aAAtB,CAAoC,iBAApC,CAAsDD,QAAtD,EAA8D,IAA9D,CAArB;AACA,WAAK,UAAL,GAAkB,IAAI,MAAM,CAAC,IAAP,CAAY,UAAhB,CAA2B,KAAK,aAAhC,CAAlB;AACA,WAAK,UAAL,CAAgB,eAAhB,IAAmC,YAAnC,CALJ,CAMA;;AAGI,UAAI,KAAK,UAAL,CAAgB,aAAhB,CAA8B,EAAlC,EAAsC;AACpC,aAAK,gBAAL,CAAsB,WAAtB,CAAkC,KAAK,UAAL,CAAgB,aAAhB,CAA8B,EAAhE,IAAsE,IAAtE;AACD,OAFD,MAEO;AACL,QAAA,OAAO,CAAC,KAAR,CAAc,iDAAd;AACD,OAbL,CAcA;;;AAEI,WAAK,OAAL,CAAa,eAAb,CAA6BC,SAA7B,EAAsC,IAAtC,EAA4C,YAA5C,EAhBJ,CAiBA;;AAEI,WAAK,aAAL,CAAmB,IAAnB,CACE,YAAY,CAAC,IAAD,CADd,EAEE,GAAG,CAAC,UAAC,OAAD;AAAA,eAA4B,OAAI,CAAC,OAAL,CAAa,kBAAb,CAAgC,OAAI,CAAC,UAArC,EAAiD,OAAjD,CAA5B;AAAA,OAAD,CAFL,EAGE,SAHF;AAKA,WAAK,gBAAL,CAAsB,mBAAtB,CAA0C,YAA1C,EAAwD,KAAK,UAA7D;AACA,WAAK,YAAL,CAAkB,IAAlB,CAAuB,KAAK,UAA5B;AACD;AACH;AACO;AAAyB;AACrB;;;;WADT,cAAK,MAAL,EAAF;AAAE;AAEE,WAAK,UAAL,CAAgB,UAAhB,CAA2B,KAAK,QAAL,CAAc,OAAd,CAAsB,aAAjD;AACA,WAAK,UAAL,CAAgB,IAAhB,CAAqB,KAAK,gBAAL,CAAsB,GAA3C,EAAgD,MAAhD;AACD;AACH;AAAQ;AACO;;;;WADb,iBAAF;AAAE;AAEE,UAAI,KAAK,UAAT,EACE,KAAK,UAAL,CAAgB,KAAhB;AACH;AACH;AAAQ;AACC;;;;WADP,uBAAF;AACI,WAAK,aAAL,CAAmB,QAAnB;;AACA,UAAI,KAAK,UAAT,EAAqB;AACnB,aAAK,OAAL,CAAa,iBAAb,CAA+BA,SAA/B,EAAwC,IAAxC,EAA8C,YAA9C;AACA,eAAO,KAAK,UAAZ;AACD;AACF;;;;;;2BAjGH,kB,CAAC,C,EAAD;AAAA,SAAW,KAAA,CAAA,IAAA,UAAA,EACT,MAAU,CAAA,iBAAV,CAAU,MAAwB,CAAA,UAAlC,CADS,EACyB,MAClC,CAAM,iBAD4B,CACpB,OADoB,CADzB,EAGT,MAAA,CAAO,iBAAP,CAAgB,gBAAhB,CAHS,CAAX;AAIA,C;;;AAAA,EAAA,IAA4D,EAAA,U;AAC5D,EAAA,SAAA,EAAA,CAAA,CAAA,aAAA,CAAA,C;AAAA,EAAA,SAAA,EAAA,SAAA,gBAAA,CAAA,EAAA,EAAA,GAAA,EAAA;AAAA,QAAA,EAAA,GAAA,CAAA,EAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iBACC;;AAAC;;AAAmB,UAAA,CAAA,cAAA,GAAA;AAAA,SAAA,CAxBrB;AAAA,IAAA,IAAA,EAAA;AAAA,GAwBqB,EAhBrB;AAAA,IAAA,IAAA,EAAA;AAAA,GAgBqB,EAfrB;AAAA,IAAA,IAAA,EAAA;AAAA,GAeqB,CAAA;AAAA,CAAA;;AAfhB,UAAA,CAAA,cAAA,GAAA;AAgCL,kBAAA,CAAA;AAAA,IAAA,IAAA,EAAA;AAAA,GAAA,CAhCK;AAqCL,cAAA,CAAA;AAAA,IAAA,IAAA,EAAG,SAAH;AAAA,IAAA,IAAA,EAAA,CAAa,UAAb,EAAyB;AAAC,MAAA,IAAI,EAA9B;AAAyB,KAAzB;AAAA,GAAA;AArCK,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCD,C;AAAE;AAAI;AAAkC;AAEvC;;;ACrCL,IAAMD,QAAM,GAAG,CACb,UADa,CAAf,C,CAGA;;AACA,IAAMC,SAAO,GAAG,CACd,kBADc,EACM,OADN,EACe,kBADf,EACmC,eADnC,EACoD,UADpD,EACgE,MADhE,EACwE,SADxE,EACmF,kBADnF,EAEd,WAFc,EAED,aAFC,EAEc,aAFd,EAE6B,WAF7B,EAE0C,UAF1C,EAEsD,WAFtD,EAEmE,SAFnE,EAE8E,iBAF9E,EAEiG,YAFjG,EAGd,cAHc,EAGE,cAHF,EAGkB,gBAHlB,EAGoC,eAHpC,EAId,WAJc,EAID,eAJC,EAIgB,cAJhB,EAIgC,aAJhC,EAI+C,eAJ/C,EAIgE,UAJhE,EAI4E,aAJ5E,CAAhB;AAMA;AACG;AACoF;AACzC;AAE9B;AAAuB;AAAe;;AAAtD,SAAA,0BAAA,CAAoC,MAApC,EAAyD,QAAzD,EAAA;AAAA,MAEA,uBAFA;AAAA;;AAAA;;AAEE;AAAY;AAA6B;AAEpC;AAKP,qCAAgB,MAAhB,EAAqC,QAArC,EAAA;AAAA;;AAAA;;AACM;AAHN,cAAA,OAAA,GAAA,IAAA;;AA6BA,cAAA,WAAA,GAAkB,UAAC,QAAD,EAAlB;AACM,gBAAK,MAAL,CAAY,KAAZ,CAAkB,UAAlB,GAA+B,QAA/B;;AAEA,YAAI,QAAQ,CAAC,WAAT,CAAqB,IAArB,KAA8B,OAAlC,EAA2C;AACzC,kBAAK,QAAL,GAAgB,IAAI,MAAM,CAAC,IAAP,CAAY,MAAhB,CAAuB,QAAQ,CAAC,CAAD,CAA/B,EAAoC,QAAQ,CAAC,CAAD,CAA5C,CAAhB;AACD,SAFD,MAEO,IAAI,OAAO,QAAP,KAAoB,QAAxB,EAAkC;AACvC;AAAA;AAAI,UAAA,QAAQ,GAAG,IAAI,MAAM,CAAC,IAAP,CAAY,QAAhB,EAAf;AAEA,UAAA,QAAQ,CAAC,OAAT,CAAiB;AAAC,YAAA,OAAO,EAAE;AAAV,WAAjB,EAAsC,UAAC,OAAD,EAAU,MAAV,EAA9C;AACU,gBAAI,MAAM,KAAK,MAAM,CAAC,IAAP,CAAY,cAAZ,CAA2B,EAA1C,EAA8C;AAE5C,sBAAK,WAAL,CAAiB,OAAO,CAAC,CAAD,CAAP,CAAW,QAAX,CAAoB,QAArC;AACD,aAHD,MAGO,CAEN;AACF,WAPD;AAQD,SAXM,MAWA,IAAI,QAAQ,IAAI,OAAO,QAAQ,CAAC,GAAhB,KAAwB,UAAxC,EAAoD;AACzD,kBAAK,QAAL,GAAgB,QAAhB;AACD;;AAED,YAAI,QAAK,aAAL,MAAwB,OAAO,QAAK,QAAL,CAAc,GAArB,KAA6B,UAAzD,EAAqE;AACnE;AAAA;AAAI,UAAA,aAAa,GAAG,SAAhB,aAAgB,GAA5B;AACU;AAAA;AAAI,YAAA,UAAU,GAAG,QAAK,aAAL,EAAjB;;AACA,gBAAI,CAAC,UAAL,EAAiB;AACf;AACD;;AACD;AAAA;AAAI,YAAA,QAAQ,GAAG,UAAU,CAAC,oBAAX,CAAgC,QAAK,QAArC,CAAf;AACA;AAAA;AAAI,YAAA,CAAC,GAAG,IAAI,CAAC,KAAL,CAAW,QAAQ,CAAC,CAAT,GAAc,QAAK,MAAL,CAAY,WAAZ,GAA0B,CAAnD,CAAR;AACA;AAAA;AAAI,YAAA,CAAC,GAAG,IAAI,CAAC,KAAL,CAAW,QAAQ,CAAC,CAAT,GAAa,QAAK,MAAL,CAAY,YAAZ,GAA2B,CAAnD,CAAR;AACA,oBAAK,MAAL,CAAY,KAAZ,CAAkB,IAAlB,GAAyB,CAAC,GAAG,IAA7B;AACA,oBAAK,MAAL,CAAY,KAAZ,CAAkB,GAAlB,GAAwB,CAAC,GAAG,IAA5B;AACA,oBAAK,MAAL,CAAY,KAAZ,CAAkB,UAAlB,GAA+B,SAA/B;AACD,WAXD;;AAaA,cAAI,QAAK,MAAL,CAAY,WAAZ,IAA2B,QAAK,MAAL,CAAY,YAA3C,EAAyD;AACvD,YAAA,aAAa;AACd,WAFD,MAEO;AACL,YAAA,UAAU,CAAC;AAAA,qBAAM,aAAa,EAAnB;AAAA,aAAD,CAAV;AACD;AACF;AACP,OAxCA;;AAzBM,cAAK,MAAL,GAAc,MAAd;AACA,cAAK,QAAL,GAAgB,QAAhB;AAHN;AAIK;AACL;AACW;AACG;;;AAhBd;AAAA;AAAA,aAeI,iBAAJ;AACM,aAAK,QAAL,GAAgB,kBAAhB,CAAmC,WAAnC,CAA+C,KAAK,MAApD,EADN,CAEA;;AAEM,aAAK,MAAL,CAAY,KAAZ,CAAkB,QAAlB,GAA6B,UAA7B;AACD;AACL;AACW;AACI;;AAvBf;AAAA;AAAA,aAsBI,gBAAJ;AACM,aAAK,WAAL,CAAiB,KAAK,QAAtB;AACA,aAAK,SAAL,CAAe,KAAK,MAApB;AACA,aAAK,UAAL,CAAgB,KAAK,OAArB;AACD;AACL;AACW;AAET;;AA9BF;AAAA;AAAA,aA4BI,oBAAJ,CAAE;AAEG;AACL;AACW;AACG;;AAjCd;AAAA;AAAA,aAgCI,uBAAJ;AACM,eAAO,KAAK,QAAZ;AACD;AACL;AACW;AACX;AAAuB;;AArCvB;AAAA;AAAA,aA8EI,mBAAU,MAAV,EAAJ;AACM,QAAA,MAAM,KAAK,KAAK,MAAL,GAAc,MAAnB,CAAN;AAAiC;;AACjC,aAAK,MAAL,CAAY,KAAZ,CAAkB,MAAlB,GAA2B,KAAK,MAAhC;AACD;AACL;AACW;AACL;AAAuB;;AApF7B;AAAA;AAAA,aAmFI,oBAAW,OAAX,EAAJ;AACM,aAAK,MAAL,CAAY,KAAZ,CAAkB,OAAlB,GAA4B,OAAO,GAAG,cAAH,GAAoB,MAAvD;AACA,aAAK,OAAL,GAAe,OAAf;AACD;AAtFL;;AAAA;AAAA,IAEwC,MAAM,CAAC,IAAP,CAAxC,WAFA;;AAyFE,SAAO,IAAI,uBAAJ,CAA4B,MAA5B,EAAoC,QAApC,CAAP;AACD;;IAWD,Y;AAAE;AAAQ;AAAmC;AACvC;AAA0B;AAwChC,wBAAsB,gBAAtB,EAAA,UAAA,EAAA,OAAA,EAAA;AAAA;;AAAA;;AAAA,SAAA,gBAAA,GAAsB,gBAAtB;AACA,SAAA,UAAA,GAAA,UAAA;AACA,SAAA,OAAA,GAAA,OAAA;AATA,SAAA,YAAA,GAA8C,IAA9C,YAA8C,EAA9C;AAEA,SAAA,aAAA,GAAyB,IAAzB,OAAyB,EAAzB;AAQI,SAAK,UAAL,CAAgB,aAAhB,CAA8B,KAA9B,CAAoC,OAApC,GAA8C,MAA9C;AACAA,IAAAA,SAAO,CAAC,OAARA,CAAgB,UAAA,MAAM;AAAA,aAAI,OAAI,CAAC,MAAD,CAAJ,GAAe,IAAI,YAAJ,EAAnB;AAAA,KAAtBA;AACD;AACH;AACO;AAAmB;;;;;WACxB,oBAAF;AAAA;;AACI,UAAI,KAAK,gBAAL,CAAsB,YAA1B,EAAwC;AAAE;AACxC,aAAK,UAAL;AACD,OAFD,MAEO;AACL,aAAK,gBAAL,CAAsB,SAAtB,CAAgC,SAAhC,CAA0C,UAAA,GAAG;AAAA,iBAAI,OAAI,CAAC,UAAL,EAAJ;AAAA,SAA7C;AACD;AACF;AACH;AACO;AAA0B;AACrB;;;;WADV,qBAAY,OAAZ,EAAF;AACI,WAAK,aAAL,CAAmB,IAAnB,CAAwB,OAAxB;AACD;AACH;AACO;AACC;;;;WADN,uBAAF;AACI,WAAK,aAAL,CAAmB,QAAnB;AACA,WAAK,gBAAL,CAAsB,wBAAtB,CAA+C,cAA/C,EAA+D,KAAK,SAApE;;AAEA,UAAI,KAAK,SAAT,EAAoB;AAClB,aAAK,OAAL,CAAa,iBAAb,CAA+BA,SAA/B,EAAwC,IAAxC,EAA8C,WAA9C;AACD;AACF;AACH;AACO;AAAmB;;;;WAAhB,sBAAV;AAAA;;AAEI,WAAK,EAAL,GAAU,KAAK,UAAL,CAAgB,aAA1B;AAEA,WAAK,SAAL,GAAiB,0BAA0B,CAAC,KAAK,EAAN,EAAU,KAAK,UAAL,CAAV,CAA3C;AACA,WAAK,SAAL,CAAe,MAAf,CAAsB,KAAK,gBAAL,CAAsB,GAA5C,EALJ,CAMA;;AAEI,WAAK,OAAL,CAAa,eAAb,CAA6BA,SAA7B,EAAsC,IAAtC,EAA4C,WAA5C,EARJ,CASA;;AAEI,WAAK,aAAL,CAAmB,IAAnB,CACE,YAAY,CAAC,IAAD,CADd,EAEE,GAAG,CAAC,UAAC,OAAD;AAAA,eAA4B,OAAI,CAAC,OAAL,CAAa,kBAAb,CAAgC,OAAI,CAAC,SAArC,EAAgD,OAAhD,CAA5B;AAAA,OAAD,CAFL,EAGE,SAHF;AAKA,WAAK,gBAAL,CAAsB,mBAAtB,CAA0C,cAA1C,EAA0D,KAAK,SAA/D;AACA,WAAK,YAAL,CAAkB,IAAlB,CAAuB,KAAK,SAA5B;AACJ;;;;;;6BAjGA,oB,CAAA,C,EAAA;AAAA,SAAW,KAAA,CAAA,IAAA,YAAA,EACC,MAAA,CAAA,iBAAA,CAAA,gBAAA,CADD,EAET,MAAM,CAAA,iBAAN,CAAc,MAAA,CAAA,UAAd,CAFS,EAGAA,MAAAA,CAAO,iBAAPA,CACX,OADWA,CAHA,CAAX;AAIA,C;;2BAEA,iB,CAAG;AACH,EAAA,IAAA,EAAA,YADG;AACH,EAAA,SAAA,EAAA,CAAA,CAAA,eAAA,CAAA,CADG;AACH,EAAA,MAAA,EAAA;AAAA,IAAA,QAAA,EAAA;AAAA,GADG;AACH,EAAA,OAAA,EAAA;AAAA,IAAA,gBAAA,EAAA,kBAAA;AAAA,IAAA,KAAA,EAAA,OAAA;AAAA,IAAA,gBAAA,EAAA,kBAAA;AAAA,IAAA,aAAA,EAAA,eAAA;AAAA,IAAA,QAAA,EAAA,UAAA;AAAA,IAAA,IAAA,EAAA,MAAA;AAAA,IAAA,OAAA,EAAA,SAAA;AAAA,IAAA,gBAAA,EAAA,kBAAA;AAAA,IAAA,SAAA,EAAA,WAAA;AAAA,IAAA,WAAA,EAAA,aAAA;AAAA,IAAA,WAAA,EAAA,aAAA;AAAA,IAAA,SAAA,EAAA,WAAA;AAAA,IAAA,QAAA,EAAA,UAAA;AAAA,IAAA,SAAA,EAAA,WAAA;AAAA,IAAA,OAAA,EAAA,SAAA;AAAA,IAAA,eAAA,EAAA,iBAAA;AAAA,IAAA,UAAA,EAAA,YAAA;AAAA,IAAA,YAAA,EAAA,cAAA;AAAA,IAAA,YAAA,EAAA,cAAA;AAAA,IAAA,cAAA,EAAA,gBAAA;AAAA,IAAA,aAAA,EAAA,eAAA;AAAA,IAAA,SAAA,EAAA,WAAA;AAAA,IAAA,aAAA,EAAA,eAAA;AAAA,IAAA,YAAA,EAAA,cAAA;AAAA,IAAA,WAAA,EAAA,aAAA;AAAA,IAAA,aAAA,EAAA,eAAA;AAAA,IAAA,QAAA,EAAA,UAAA;AAAA,IAAA,WAAA,EAAA,aAAA;AAAA,IAAA,YAAA,EAAA;AAAA,GADG;AACH,EAAA,QAAA,EAAA,CAAA,MAAA,CAAA,oBAAA,CADG;AACH,EAAA,kBAAA,EAAA,GADG;AACH,EAAA,KAAA,EAAA,CADG;AACH,EAAA,IAAA,EAAA,CADG;AACH,EAAA,QAAA,EAAA,SAAA,qBAAA,CAAA,EAAA,EAAA,GAAA,EAAA;AAAA,QAAA,EAAA,GAAA,CAAA,EAAA;;;;GADG;iBAGH;AAHG,C;AAGF;;AAAmB,YAAA,CAAA,cAAA,GAAA;AAAA,SAAA,CAtHpB;AAAA,IAAA,IAAA,EAAA;AAAA,GAsHoB,EA/HpB;AAAA,IAAA,IAAA,EAAA;AAAA,GA+HoB,EAvHpB;AAAA,IAAA,IAAA,EAAA;AAAA,GAuHoB,CAAA;AAAA,CAAA;;AAvHf,YAAA,CAAA,cAAA,GAAA;AAyJL,kBAAA,CAAA;AAAA,IAAA,IAAA,EAAA;AAAA,GAAA;AAzJK,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;AAyJD,C;AAAE;AAAI;AAAkC;AAE1B;;;AChKlB,IAAMD,QAAM,GAAG,CACb,QADa,EACH,WADG,EACU,WADV,EACuB,UADvB,EACmC,WADnC,EACgD,aADhD,EAC+D,KAD/D,EACsE,QADtE,EAEb,aAFa,EAEE,eAFF,EAEmB,gBAFnB,EAEqC,cAFrC,EAEqD,SAFrD,EAEgE,QAFhE,EAE0E,SAF1E,EAIb,mBAJa,CAAf;AAMA,IAAMC,SAAO,GAAG,CACd,eADc,EACG,OADH,EACY,UADZ,EACwB,MADxB,EACgC,SADhC,EAC2C,WAD3C,EAEd,WAFc,EAED,WAFC,EAEY,UAFZ,EAEwB,WAFxB,EAEqC,SAFrC,EAEgD,eAFhD,EAEiE,YAFjE,CAAhB;;IAUA,M;;;;;AAAE;AAAQ;AAA8B;AAqCxC,kBAAsB,WAAtB,EAAA;AAAA;;AAAA;;AACI,iCAAM,WAAN,EAAmB,QAAnB,EAA6BD,QAA7B,EAAqCC,SAArC;AADJ,YAAA,WAAA,GAAsB,WAAtB;AAFA,YAAA,aAAA,GAAA,EAAA;AAEA;AAEG;AACH;AACO;AACJ;;;;;WADD,sBAAF;AACI;;AACA,WAAK,SAAL;AACD;AACH;AACO;AACH;;;;WADF,qBAAF;AAAA;;AACI,UAAI,CAAC,KAAK,QAAL,CAAL,EAAqB;AACnB,aAAK,cAAL,CAAoB,IAApB,CAAyB,KAAK,WAAL,CAAiB,WAAjB,CAA6B,kBAA7B,GAAkD,SAAlD,CACvB,UAAA,MAAM,EADd;AAGU;AAAA;AAAI,UAAA,MAAM,GAAG,IAAI,MAAM,CAAC,IAAP,CAAY,MAAhB,CAAuB,MAAM,CAAC,MAAP,CAAc,QAArC,EAA+C,MAAM,CAAC,MAAP,CAAc,SAA7D,CAAb;;AACA,UAAA,OAAI,CAAC,SAAL,CAAe,SAAf,CAAyB,MAAzB;AACD,SALsB,EAMvB,UAAA,KAAK,EADb;AAEU,UAAA,OAAO,CAAC,KAAR,CAAc,iDAAd;;AACA,UAAA,OAAI,CAAC,SAAL,CAAe,SAAf,CAAyB,OAAI,CAAC,aAAL,CAAmB,mBAAnB,KAA2C,IAAI,MAAM,CAAC,IAAP,CAAY,MAAhB,CAAuB,CAAvB,EAA0B,CAA1B,CAApE;AACD,SATsB,CAAzB;AAWD,OAZD,MAYO,IAAI,OAAO,KAAK,QAAL,CAAP,KAA0B,QAA9B,EAAwC;AAC7C,aAAK,cAAL,CAAoB,IAApB,CAAyB,KAAK,WAAL,CAAiB,QAAjB,CAA0B,OAA1B,CAAkC;AAAC,UAAA,OAAO,EAAE,KAAK,QAAL;AAAV,SAAlC,EAA6D,SAA7D,CACvB,UAAA,OAAO,EADf;AAGU,UAAA,OAAI,CAAC,SAAL,CAAe,SAAf,CAAyB,OAAO,CAAC,CAAD,CAAP,CAAW,QAAX,CAAoB,QAA7C;AACD,SAJsB,EAKvB,UAAA,KAAK,EADb;AAEU,UAAA,OAAO,CAAC,KAAR,CAAc,0CAAd,EAA0D,OAAI,CAAC,QAAD,CAA9D;;AACA,UAAA,OAAI,CAAC,SAAL,CAAe,SAAf,CAAyB,OAAI,CAAC,aAAL,CAAmB,mBAAnB,KAA2C,IAAI,MAAM,CAAC,IAAP,CAAY,MAAhB,CAAuB,CAAvB,EAA0B,CAA1B,CAApE;AACD,SARsB,CAAzB;AAUD;AACF;;;;EAvEH,gB;;uBALA,c,CAAC,C,EAAA;AAAD,SAAA,KAAW,CAAA,IAAA,MAAX,EAAW,MACT,CAAA,iBADS,CACC,gBADD,CAAX,CAAA;AACY,C;;AAAsC,MAAA,CAAA,IAAA,GAAA,MAChD,CAAA,iBADgD,CAClC;AAAA,EAAA,IAAA,EAAA,MAAA;AACd,EAAA,SAASA,EAAAA,CAAAA,CAAAA,QAAAA,CAAAA,EAAO,CAAA,YAAA,CAAPA,CADK;AAEhB,EAAA,MAAA,EAAA;AAAA,IAAA,MAAA,EAAA,QAAA;AAAA,IAAA,SAAA,EAAA,WAAA;AAAA,IAAA,SAAA,EAAA,WAAA;AAAA,IAAA,QAAA,EAAA,UAAA;AAAA,IAAA,SAAA,EAAA,WAAA;AAAA,IAAA,WAAA,EAAA,aAAA;AAAA,IAAA,GAAA,EAAA,KAAA;AAAA,IAAA,MAAA,EAAA,QAAA;AAAA,IAAA,WAAA,EAAA,aAAA;AAAA,IAAA,aAAA,EAAA,eAAA;AAAA,IAAA,cAAA,EAAA,gBAAA;AAAA,IAAA,YAAA,EAAA,cAAA;AAAA,IAAA,OAAA,EAAA,SAAA;AAAA,IAAA,MAAA,EAAA,QAAA;AAAA,IAAA,OAAA,EAAA,SAAA;AAAA,IAAA,iBAAA,EAAA;AAAA,GAFgB;AAEhB,EAAA,OAAA,EAAA;AAAA,IAAA,aAAA,EAAA,eAAA;AAAA,IAAA,KAAA,EAAA,OAAA;AAAA,IAAA,QAAA,EAAA,UAAA;AAAA,IAAA,IAAA,EAAA,MAAA;AAAA,IAAA,OAAA,EAAA,SAAA;AAAA,IAAA,SAAA,EAAA,WAAA;AAAA,IAAA,SAAA,EAAA,WAAA;AAAA,IAAA,SAAA,EAAA,WAAA;AAAA,IAAA,QAAA,EAAA,UAAA;AAAA,IAAA,SAAA,EAAA,WAAA;AAAA,IAAA,OAAA,EAAA,SAAA;AAAA,IAAA,aAAA,EAAA,eAAA;AAAA,IAAA,UAAA,EAAA;AAAA,GAFgB;AAEhB,EAAA,QAAA,EAAA,CAAA,MAAA,CAAA,0BAAA;AAFgB,CADkC,CAAA;AAIhD;;AAAmB,MAAA,CAAA,cAAA,GAAA;AAAA,SAAA,CAlBrB;AAAA,IAAA,IAAA,EAAA;AAAA,GAkBqB,CAAA;AAAA,CAAA;;;;;;;;;;;;;;;;;AAlBjB,C;AAAE;AAAI;AAAkC;AAE7B;;;ACAf,IAAMD,QAAM,GAAG,CAAC,iBAAD,EAAoB,UAApB,EAAgC,aAAhC,EAA+C,gBAA/C,EAAiE,OAAjE,EAA0E,SAA1E,EAAqF,YAArF,CAAf;AACA,IAAMC,SAAO,GAAG,CACd,YADc,EACA,OADA,EACS,UADT,EACqB,WADrB,EACkC,UADlC,EAC8C,WAD9C,EAEd,SAFc,EAEH,eAFG,EAEc,gBAFd,EAEgC,YAFhC,EAE8C,aAF9C,EAE6D,aAF7D,CAAhB;;IAUA,S;;;;;AAAE;AAAQ;AAAmC;AAwB7C,qBAAc,gBAAd,EAAA;AAAA;;AAAA,8BACU,gBADV,EAC4B,MAD5B,EACoCD,QADpC,EAC4CC,SAD5C;AAEG;AACH;AACO;AAAmB;;;;;WACxB,sBAAF;AACI,UAAI,KAAK,SAAL,CAAJ,EAAqB;AACzB;AAEM,aAAK,gBAAL,CAAsB,GAAtB,CAA0B,IAA1B,CAA+B,UAA/B,CAA0C,KAAK,SAAL,CAA1C;AACD,OAJD,MAIO,IAAI,KAAK,YAAL,CAAJ,EAAwB;AACnC;AAEM,aAAK,gBAAL,CAAsB,GAAtB,CAA0B,IAA1B,CAA+B,WAA/B,CAA2C,KAAK,YAAL,CAA3C;AACD,OAJM,MAKF;AACH,aAAK,aAAL,GAAqB,KAAK,aAAL,CAAmB,iBAAnB,CAAqC,KAAK,MAA1C,EAAkD,IAAlD,CAArB;AAEA,aAAK,gBAAL,CAAsB,GAAtB,CAA0B,IAA1B,CAA+B,GAA/B,CAAmC,KAAK,aAAxC;AACD,OAdL,CAeA;;;AAEI,WAAK,SAAL,GAAiB,KAAK,gBAAL,CAAsB,GAAtB,CAA0B,IAA3C,CAjBJ,CAkBA;;AAEI,WAAK,OAAL,CAAa,eAAb,CAA6B,KAAK,OAAlC,EAA2C,IAA3C,EAAiD,WAAjD;AAEA,WAAK,gBAAL,CAAsB,mBAAtB,CAA0C,KAAK,aAA/C,EAA8D,KAAK,SAAnE;AACA,WAAK,YAAL,CAAkB,IAAlB,CAAuB,KAAK,SAA5B;AACD;;;;EArDH,gB;;0BALA,iB,CAAC,C,EAAD;AAAA,SAAW,KAAA,CAAA,IAAA,SAAA,EACT,MAAU,CAAA,iBAAV,CAAU,gBAAV,CADS,CAAX;AACmC,C;;AAC3B,SAAED,CAAAA,IAAF,GAAQ,MAAA,CAAA,iBAAA,CACLC;AAAAA,EAAAA,IAAAA,EAAAA,SAAAA;AAAO,EAAA,SAClB,EAAA,CAAA,CAAA,YAAA,CAAA,CADWA;AACX,EAAA,MAAA,EAAA;AAAA,IAAA,eAAA,EAAA,iBAAA;AAAA,IAAA,QAAA,EAAA,UAAA;AAAA,IAAA,WAAA,EAAA,aAAA;AAAA,IAAA,cAAA,EAAA,gBAAA;AAAA,IAAA,KAAA,EAAA,OAAA;AAAA,IAAA,OAAA,EAAA,SAAA;AAAA,IAAA,UAAA,EAAA;AAAA,GADWA;AACX,EAAA,OAAA,EAAA;AAAA,IAAA,UAAA,EAAA,YAAA;AAAA,IAAA,KAAA,EAAA,OAAA;AAAA,IAAA,QAAA,EAAA,UAAA;AAAA,IAAA,SAAA,EAAA,WAAA;AAAA,IAAA,QAAA,EAAA,UAAA;AAAA,IAAA,SAAA,EAAA,WAAA;AAAA,IAAA,OAAA,EAAA,SAAA;AAAA,IAAA,aAAA,EAAA,eAAA;AAAA,IAAA,cAAA,EAAA,gBAAA;AAAA,IAAA,UAAA,EAAA,YAAA;AAAA,IAAA,WAAA,EAAA,aAAA;AAAA,IAAA,WAAA,EAAA;AAAA,GADWA;AACX,EAAA,QAAA,EAAA,CAAA,MAAA,CAAA,0BAAA;AADWA,CADK,CAAR;AAGN;;AAAmB,SAAA,CAAA,cAAA,GAAA;AAAA,SAAA,CAbrB;AAAA,IAAA,IAAA,EAAA;AAAA,GAaqB,CAAA;AAAA,CAAA;;;;;;;;;;;;;;;;;AAbjB,C;AAAE;AAAI;AAAkC;AAE7B;;;ACCf,IAAMD,QAAM,GAAG,CACb,YADa,EACC,WADD,EACc,eADd,EAC+B,YAD/B,EAC6C,OAD7C,EACsD,eADtD,EAEb,iBAFa,EAEM,kBAFN,EAE0B,YAF1B,EAEwC,wBAFxC,EAGb,qBAHa,EAGU,iBAHV,EAG6B,mBAH7B,CAAf;AAKA,IAAMC,SAAO,GAAG,CAAC,oBAAD,CAAhB;;IAOA,kB;;;;;AAAE;AAAQ;AAAmC;AAA8B;AAyB3E,8BACI,gBADJ,EAAA,WAAA,EAAA;AAAA;;AAAA;;AAII,iCAAM,gBAAN,EAAwB,oBAAxB,EAA8CD,QAA9C,EAAsDC,SAAtD;AAFJ,YAAA,WAAA,GAAA,WAAA;AAFA;AAKG;AACH;AACO;AAAmB;;;;;WACxB,sBAAF;AACI,WAAK,aAAL,GAAqB,KAAK,aAAL,CAAmB,iBAAnB,CAAqC,KAAK,MAA1C,EAAkD,IAAlD,CAArB;;AACA,UAAI,OAAO,KAAK,aAAL,CAAmB,OAAnB,CAAP,KAAuC,QAA3C,EAAqD;AAAE;AACrD,aAAK,aAAL,CAAmB,OAAnB,IAA8B,QAAQ,CAAC,aAAT,CAAuB,KAAK,aAAL,CAAmB,OAAnB,CAAvB,CAA9B;AACD;;AAID,WAAK,iBAAL,GAAyB,IAAI,MAAM,CAAC,IAAP,CAAY,iBAAhB,EAAzB;AACA,WAAK,kBAAL,GAA0B,IAAI,MAAM,CAAC,IAAP,CAAY,kBAAhB,CAAmC,KAAK,aAAxC,CAA1B;AAEA,WAAK,kBAAL,CAAwB,MAAxB,CAA+B,KAAK,gBAAL,CAAsB,GAArD,EAXJ,CAYA;;AAEI,WAAK,cAAL,CAAoB,KAAK,iBAAzB;AAEA,WAAK,OAAL,CAAa,eAAb,CAA6B,KAAK,OAAlC,EAA2C,IAA3C,EAAiD,oBAAjD;AAEA,WAAK,gBAAL,CAAsB,mBAAtB,CAA0C,KAAK,aAA/C,EAA8D,KAAK,SAAnE;AACA,WAAK,YAAL,CAAkB,IAAlB,CAAuB,KAAK,kBAA5B;AACD;AACH;AAEM;AAA0B;AACrB;;;;WADT,qBAAY,OAAZ,EAAF;AACI;AAAA;AAAI,MAAA,UAAU,GAAG,EAAjB;;AACA,WAAK;AAAA;AAAI,MAAA,GAAT,IAAgB,OAAhB,EAAyB;AACvB,YAAI,KAAK,MAAL,CAAY,OAAZ,CAAoB,GAApB,MAA6B,CAAC,CAAlC,EAAqC;AACnC,UAAA,UAAU,CAAC,GAAD,CAAV,GAAkB,KAAK,aAAL,CAAmB,QAAnB,CAA4B,OAAO,CAAC,GAAD,CAAP,CAAa,YAAzC,CAAlB;AACD;AACF;;AACD,UAAI,OAAO,CAAC,mBAAD,CAAP,IAAgC,KAAK,kBAAzC,EAA6D;AAC3D,aAAK,iBAAL,IAA0B,KAAK,cAAL,CAAoB,KAAK,iBAAzB,CAA1B;AACD;AACF;AACH;AACO;AAAoC;AAAmB;;;;WAA5D,wBAAe,iBAAf,EAAF;AAAA;;AACI,WAAK,iBAAL,CAAuB,KAAvB,CAA6B,iBAA7B,EACE,UAAC,QAAD,EAAgB,MAAhB,EADN;AAAE;AACyB;AAGnB,YAAI,CAAC,OAAI,CAAC,kBAAV,EAA8B;AAC5B;AACD;;AAED,YAAI,MAAM,KAAK,MAAM,CAAC,IAAP,CAAY,gBAAZ,CAA6B,EAA5C,EAAgD;AAC9C,UAAA,OAAI,CAAC,kBAAL,CAAwB,aAAxB,CAAsC,QAAtC;AACD,SAFD,MAEO;AACL,UAAA,OAAO,CAAC,KAAR,CAAc,sCAAsC,MAApD;AACD;AACF,OAbH;AAeD;AACH;AACO;AACC;;;;WADN,uBAAF;AACI;;AACA,WAAK,OAAL,CAAa,iBAAb,CAA+B,KAAK,OAApC,EAA6C,IAA7C,EAAmD,oBAAnD;AACD;;;;EAzFH,gB;;mCALA,0B,CAAA,C,EAAW;AAAA,SAAA,KAAA,CAAA,IACT,kBADS,EACC,MAAA,CAAA,iBAAA,CAAgC,gBAAhC,CADD,EAEH,MAAED,CAAAA,iBAAF,CAAQ,oBAAR,CAFG,CAAA;AAGO,C;;AAClB,kBAAA,CAAA,IAAA,GAAA,MAAA,CAAA,iBAAA,CAAA;AAAA,EAAA,IAAA,EAAA,kBAAA;AAAA,EAAA,SAAA,EAAA,CAAA,CAAA,qBAAA,CAAA,CAAA;AAAA,EAAA,MAAA,EAAA;AAAA,IAAA,UAAA,EAAA,YAAA;AAAA,IAAA,SAAA,EAAA,WAAA;AAAA,IAAA,aAAA,EAAA,eAAA;AAAA,IAAA,UAAA,EAAA,YAAA;AAAA,IAAA,KAAA,EAAA,OAAA;AAAA,IAAA,aAAA,EAAA,eAAA;AAAA,IAAA,eAAA,EAAA,iBAAA;AAAA,IAAA,gBAAA,EAAA,kBAAA;AAAA,IAAA,UAAA,EAAA,YAAA;AAAA,IAAA,sBAAA,EAAA,wBAAA;AAAA,IAAA,mBAAA,EAAA,qBAAA;AAAA,IAAA,eAAA,EAAA,iBAAA;AAAA,IAAA,iBAAA,EAAA,mBAAA;AAAA,IAAA,iBAAA,EAAA,CAAA,oBAAA,EAAA,mBAAA;AAAA,GAAA;AAAA,EAAA,OAAA,EAAA;AAAA,IAAA,kBAAA,EAAA;AAAA,GAAA;AAAA,EAAA,QAAA,EAAA,CAAA,MAAA,CAAA,0BAAA,EAAA,MAAA,CAAA,oBAAA;AAAA,CAAA,CAAA;AACE;;AAAmB,kBAAA,CAAA,cAAA,GAAA;AAAA,SAAA,CAfrB;AAAA,IAAA,IAAA,EAAA;AAAA,GAeqB,EAdrB;AAAA,IAAA,IAAA,EAAA;AAAA,GAcqB,CAAA;AAAA,CAAA;;AAdhB,kBAAA,CAAA,cAAA,GAAA;AAkCL,uBAAA,CAAA;AAAA,IAAA,IAAA,EAAG,KAAH;AAAA,IAAA,IAAA,EAAA,CAAA,oBAAA;AAAA,GAAA;AAlCK,CAAA;;;;;;;;;;;;;;;;;;;;;;;AAkCD,C;AAAE;AAAI;AAAkC;AAEzC;;;ACnCH,IAAMA,QAAM,GAAG,CACb,SADa,EAEb,eAFa,EAEI,gBAFJ,EAEsB,uBAFtB,EAE+C,aAF/C,EAGb,KAHa,EAGN,eAHM,EAGW,gBAHX,EAG6B,iBAH7B,EAGgD,kBAHhD,CAAf;AAKA,IAAMC,SAAO,GAAG,CACd,gBADc,EACI,gBADJ,EACsB,iBADtB,EAEd,iBAFc,EAEK,kBAFL,EAEyB,mBAFzB,CAAhB;;IAUA,c;;;;;AAAE;AAAQ;AAA8B;AAqBxC,0BAAc,WAAd,EAAA;AAAA;;AAAA;;AACI,iCAAM,WAAN,EAAmB,gBAAnB,EAAqCD,QAArC,EAA6CC,SAA7C;AACA,YAAK,WAAL,GAAmB,SAAnB;AAFJ;AAGG;;;EAxBH,gB;;+BALA,sB,CAAA,C,EAAA;AAAA,SAAW,KAAA,CAAA,IAAA,cAAA,EACC,MAAA,CAAA,iBAAA,CAA4B,gBAA5B,CADD,CAAX;AAEE,C;;AAAM,cAAQ,CAAA,IAAR,GAAQ,MACd,CAAA,iBADc,CACE;AAAA,EAAA,IAAA,EAAA,cAAA;AAClB,EAAA,SAAA,EAAA,CAAA,CAAA,iBAAA,CAAA,CADkB;AAClB,EAAA,MAAA,EAAA;AAAA,IAAA,OAAA,EAAA,SAAA;AAAA,IAAA,aAAA,EAAA,eAAA;AAAA,IAAA,cAAA,EAAA,gBAAA;AAAA,IAAA,qBAAA,EAAA,uBAAA;AAAA,IAAA,WAAA,EAAA,aAAA;AAAA,IAAA,GAAA,EAAA,KAAA;AAAA,IAAA,aAAA,EAAA,eAAA;AAAA,IAAA,cAAA,EAAA,gBAAA;AAAA,IAAA,eAAA,EAAA,iBAAA;AAAA,IAAA,gBAAA,EAAA;AAAA,GADkB;AAClB,EAAA,OAAA,EAAA;AAAA,IAAA,cAAA,EAAA,gBAAA;AAAA,IAAA,cAAA,EAAA,gBAAA;AAAA,IAAA,eAAA,EAAA,iBAAA;AAAA,IAAA,eAAA,EAAA,iBAAA;AAAA,IAAA,gBAAA,EAAA,kBAAA;AAAA,IAAA,iBAAA,EAAA;AAAA,GADkB;AAClB,EAAA,QAAA,EAAA,CAAA,MAAA,CAAA,0BAAA;AADkB,CADF,CAAR;AAGN;;AAAmB,cAAA,CAAA,cAAA,GAAA;AAAA,SAAA,CAjBrB;AAAA,IAAA,IAAA,EAAA;AAAA,GAiBqB,CAAA;AAAA,CAAA;;;;;;;;;;;;;;;;;AAjBjB,C;AAAE;AAAI;AAAkC;AAE7B;;;ACAf,IAAMD,QAAM,GAAG,CAAE,KAAF,EAAS,QAAT,EAAmB,WAAnB,EAAgC,SAAhC,CAAf;AACA,IAAMC,SAAO,GAAG,CAAE,OAAF,EAAW,UAAX,CAAhB;;IAOA,a;;;;;AAAE;AAAQ;AAA8B;AAcxC,yBAAc,WAAd,EAAA;AAAA;;AAAA;;AACI,iCAAM,WAAN,EAAmB,eAAnB,EAAoCD,QAApC,EAA4CC,SAA5C;AAHJ,YAAA,aAAA,GAAA,EAAA;AAEA;AAEG;AACH;AACO;AAAmB;;;;;WACxB,sBAAF;AAAE;AAEE,WAAK,aAAL,GAAqB,KAAK,aAAL,CAAmB,iBAAnB,CAAqC,CAAC,WAAD,EAAc,SAAd,CAArC,EAA+D,IAA/D,CAArB,CAFJ,CAGA;;AAGI,WAAK,SAAL,GAAiB,IAAI,MAAM,CAAC,IAAP,CAAY,aAAhB,CAA8B,KAAK,KAAL,CAA9B,EAA2C,KAAK,QAAL,CAA3C,EAA2D,KAAK,aAAhE,CAAjB;AACA,WAAK,SAAL,CAAe,MAAf,CAAsB,KAAK,gBAAL,CAAsB,GAA5C;AACA,WAAK,SAAL,CAAe,eAAf,IAAkC,KAAK,aAAvC,CARJ,CASA;;AAEI,WAAK,OAAL,CAAa,eAAb,CAA6B,KAAK,OAAlC,EAA2C,IAA3C,EAAiD,WAAjD;AAEA,WAAK,gBAAL,CAAsB,mBAAtB,CAA0C,KAAK,aAA/C,EAA8D,KAAK,SAAnE;AACA,WAAK,YAAL,CAAkB,IAAlB,CAAuB,KAAK,SAA5B;AACD;;;;EAlCH,gB;;8BALA,qB,CAAA,C,EAAA;AAAA,SAAW,KAAA,CAAA,IAAA,aAAA,EACC,MAAA,CAAA,iBAAA,CAA2B,gBAA3B,CADD,CAAX;AAEE,C;;AAAM,aAAQ,CAAA,IAAR,GAAQ,MAAA,CAAA,iBAAA,CACLA;AAAO,EAAA,IAAA,EAAA,aAAPA;AACX,EAAA,SAAA,EAAA,CAAA,CAAA,gBAAA,CAAA,CADWA;AACX,EAAA,MAAA,EAAA;AAAA,IAAA,GAAA,EAAA,KAAA;AAAA,IAAA,MAAA,EAAA,QAAA;AAAA,IAAA,SAAA,EAAA,WAAA;AAAA,IAAA,OAAA,EAAA;AAAA,GADWA;AACX,EAAA,OAAA,EAAA;AAAA,IAAA,KAAA,EAAA,OAAA;AAAA,IAAA,QAAA,EAAA;AAAA,GADWA;AACX,EAAA,QAAA,EAAA,CAAA,MAAA,CAAA,0BAAA;AADWA,CADK,CAAR;AAGN;;AAAmB,aAAA,CAAA,cAAA,GAAA;AAAA,SAAA,CAVrB;AAAA,IAAA,IAAA,EAAA;AAAA,GAUqB,CAAA;AAAA,CAAA;;;;;;;;;;;;;;;;;AAVjB,C;AAAE;AAAI;AAAkC;AAE7B;;;ACAf,IAAMD,QAAM,GAAG,CAAE,MAAF,EAAU,aAAV,EAAyB,UAAzB,EAAqC,cAArC,EAAqD,SAArD,EAAgE,QAAhE,EAA0E,SAA1E,CAAf;AACA,IAAMC,SAAO,GAAG,EAAhB;;IAOA,Y;;;;;AAAE;AAAQ;AAA8B;AAexC,wBAAc,WAAd,EAAA;AAAA;;AAAA;;AACI,kCAAM,WAAN,EAAmB,cAAnB,EAAmCD,QAAnC,EAA2CC,SAA3C;AAHJ,YAAA,WAAA,GAAA,eAAA;AAEA;AAEG;;;EAjBH,gB;;6BALA,oB,CAAA,C,EAAA;AAAA,SAAW,KAAA,CAAA,IAAA,YAAA,EACC,MAAA,CAAA,iBAAA,CAAA,gBAAA,CADD,CAAX;AAEE,C;;AAAM,YAAQ,CAAA,IAAR,GAAQ,MAAA,CAAA,iBAAA,CACLA;AAAAA,EAAAA,IAAO,EAAA,YAAPA;AACX,EAAA,SAAA,EAAA,CAAA,CAAA,eAAA,CAAA,CADWA;AACX,EAAA,MAAA,EAAA;AAAA,IAAA,IAAA,EAAA,MAAA;AAAA,IAAA,WAAA,EAAA,aAAA;AAAA,IAAA,QAAA,EAAA,UAAA;AAAA,IAAA,YAAA,EAAA,cAAA;AAAA,IAAA,OAAA,EAAA,SAAA;AAAA,IAAA,MAAA,EAAA,QAAA;AAAA,IAAA,OAAA,EAAA;AAAA,GADWA;AACX,EAAA,QAAA,EAAA,CAAA,MAAA,CAAA,0BAAA;AADWA,CADK,CAAR;AAGN;;AAAmB,YAAA,CAAA,cAAA,GAAA;AAAA,SAAA,CAVrB;AAAA,IAAA,IAAA,EAAA;AAAA,GAUqB,CAAA;AAAA,CAAA;;;;;;;;;;;;;;;;;AAVjB,C;AAAE;AAAI;AAAkC;AAE7B;;;ACAf,IAAMD,SAAM,GAAG,CAAE,WAAF,EAAe,kBAAf,EAAmC,gBAAnC,EAAqD,qBAArD,EAA4E,KAA5E,EAAmF,QAAnF,EAA6F,SAA7F,CAAf;AACA,IAAMC,UAAO,GAAG,CAAE,OAAF,EAAW,yBAAX,EAAsC,gBAAtC,CAAhB;;IAOA,Q;;;;;AAAE;AAAQ;AAA8B;AAexC,oBAAc,WAAd,EAAA;AAAA;;AAAA,+BACU,WADV,EACuB,UADvB,EACmCD,SADnC,EAC2CC,UAD3C;AAEG;;;EAjBH,gB;;yBALA,gB,CAAC,C,EAAS;AAAV,SAAW,KAAA,CAAA,IAAA,QAAA,EACT,MAAQ,CAAA,iBAAR,CAAU,gBAAV,CADS,CAAX;AACkC,C;;AAChC,QAAQD,CAAAA,IAAR,GAAQA,MAAM,CAAA,iBAANA,CACR;AAAO,EAAA,IAAEC,EAAAA,QAAT;AAAgB,EAAA,SAAA,EACjB,CAAD,CAAA,WAAA,CAAC,CADC;AACF,EAAA,MAAA,EAAA;AAAA,IAAA,SAAA,EAAA,WAAA;AAAA,IAAA,gBAAA,EAAA,kBAAA;AAAA,IAAA,cAAA,EAAA,gBAAA;AAAA,IAAA,mBAAA,EAAA,qBAAA;AAAA,IAAA,GAAA,EAAA,KAAA;AAAA,IAAA,MAAA,EAAA,QAAA;AAAA,IAAA,OAAA,EAAA;AAAA,GADE;AACF,EAAA,OAAA,EAAA;AAAA,IAAA,KAAA,EAAA,OAAA;AAAA,IAAA,uBAAA,EAAA,yBAAA;AAAA,IAAA,cAAA,EAAA;AAAA,GADE;AACF,EAAA,QAAA,EAAA,CAAA,MAAA,CAAA,0BAAA;AADE,CADQD,CAAR;AAGA;;AAAmB,QAAA,CAAA,cAAA,GAAA;AAAA,SAAA,CAVrB;AAAA,IAAA,IAAA,EAAA;AAAA,GAUqB,CAAA;AAAA,CAAA;;;;;;;;;;;;;;;;;AAVjB,C;AAAE;AAAI;AAAkC;AAE7B;;;ACAf,IAAMA,SAAM,GAAG,CACb,aADa,EACE,WADF,EACe,WADf,EAC4B,QAD5B,EACsC,WADtC,EACmD,MADnD,EAC2D,OAD3D,EACoE,SADpE,EAEb,WAFa,EAEA,OAFA,EAES,UAFT,EAEqB,OAFrB,EAE8B,OAF9B,EAEuC,SAFvC,EAEkD,QAFlD,EAE4D,SAF5D,EAIb,qBAJa,CAAf;AAMA,IAAMC,UAAO,GAAG,CACd,kBADc,EACM,OADN,EACe,kBADf,EACmC,eADnC,EACoD,UADpD,EACgE,MADhE,EACwE,SADxE,EACmF,kBADnF,EAEd,WAFc,EAED,aAFC,EAEc,aAFd,EAE6B,WAF7B,EAE0C,UAF1C,EAEsD,WAFtD,EAEmE,SAFnE,EAE8E,iBAF9E,EAEiG,YAFjG,EAGd,cAHc,EAGE,cAHF,EAGkB,gBAHlB,EAGoC,eAHpC,CAAhB;;IAWA,M;;;;;AAAE;AAAQ;AAA8B;AA8CxC,kBAAsB,WAAtB,EAAA;AAAA;;AAAA;;AACI,kCAAM,WAAN,EAAmB,QAAnB,EAA6BD,SAA7B,EAAqCC,UAArC;AADJ,YAAA,WAAA,GAAsB,WAAtB;AAFA,YAAA,aAAA,GAAA,EAAA;AAEA;AAGG;AACH;AACO;AAAmB;;;;;WACxB,oBAAF;AAAA;;AACI,UAAI,KAAK,gBAAL,CAAsB,YAA1B,EAAwC;AAAE;AACxC,aAAK,UAAL;AACD,OAFD,MAEO;AACL,aAAK,gBAAL,CAAsB,SAAtB,CAAgC,SAAhC,CAA0C,UAAA,GAAG;AAAA,iBAAI,OAAI,CAAC,UAAL,EAAJ;AAAA,SAA7C;AACD;AACF;AACH;AACO;AACJ;;;;WADD,sBAAF;AACI;;AACA,WAAK,WAAL;AACD;AACH;AACO;AACL;;;;WADA,uBAAF;AAAA;;AACI,UAAI,CAAC,KAAK,UAAL,CAAL,EAAuB;AACrB,aAAK,cAAL,CAAoB,IAApB,CAAyB,KAAK,WAAL,CAAiB,WAAjB,CAA6B,kBAA7B,GAAkD,SAAlD,CACvB,UAAA,QAAQ,EADhB;AAGU;AAAA;AAAI,UAAA,MAAM,GAAG,IAAI,MAAM,CAAC,IAAP,CAAY,MAAhB,CAAuB,QAAQ,CAAC,MAAT,CAAgB,QAAvC,EAAiD,QAAQ,CAAC,MAAT,CAAgB,SAAjE,CAAb;;AACA,UAAA,OAAI,CAAC,SAAL,CAAe,WAAf,CAA2B,MAA3B;AACD,SALsB,EAMvB,UAAA,KAAK,EADb;AAEU,UAAA,OAAO,CAAC,KAAR,CAAc,8CAAd;;AACA,UAAA,OAAI,CAAC,SAAL,CAAe,WAAf,CAA2B,OAAI,CAAC,aAAL,CAAmB,qBAAnB,KAA6C,IAAI,MAAM,CAAC,IAAP,CAAY,MAAhB,CAAuB,CAAvB,EAA0B,CAA1B,CAAxE;AACD,SATsB,CAAzB;AAWD,OAZD,MAYO,IAAI,OAAO,KAAK,UAAL,CAAP,KAA4B,QAAhC,EAA0C;AAC/C,aAAK,cAAL,CAAoB,IAApB,CAAyB,KAAK,WAAL,CAAiB,QAAjB,CAA0B,OAA1B,CAAkC;AAAC,UAAA,OAAO,EAAE,KAAK,UAAL;AAAV,SAAlC,EAA+D,SAA/D,CACvB,UAAA,OAAO,EADf;AAGU,UAAA,OAAI,CAAC,SAAL,CAAe,WAAf,CAA2B,OAAO,CAAC,CAAD,CAAP,CAAW,QAAX,CAAoB,QAA/C;AACD,SAJsB,EAKvB,UAAA,KAAK,EADb;AAEU,UAAA,OAAO,CAAC,KAAR,CAAc,2CAAd,EAA2D,OAAI,CAAC,UAAD,CAA/D;;AACA,UAAA,OAAI,CAAC,SAAL,CAAe,WAAf,CAA2B,OAAI,CAAC,aAAL,CAAmB,qBAAnB,KAA6C,IAAI,MAAM,CAAC,IAAP,CAAY,MAAhB,CAAuB,CAAvB,EAA0B,CAA1B,CAAxE;AACD,SARsB,CAAzB;AAUD;AACF;;;;EA1FH,gB;;uBALA,c,CAAC,C,EAAA;AAAD,SAAA,KAAW,CAAA,IAAA,MAAX,EAAW,MACT,CAAA,iBADS,CACC,gBADD,CAAX,CAAA;AAC+B,C;;AAC7B,MAAA,CAAM,IAAN,GAAQD,MAAM,CAAA,iBAANA,CACR;AAAA,EAAA,IAASC,EAAAA,MAAT;AAAgB,EAAA,SAAA,EAAA,CAAA,CAAA,QAAA,CAAA,CAAhB;AACF,EAAA,MAAA,EAAA;AAAA,IAAA,WAAA,EAAA,aAAA;AAAA,IAAA,SAAA,EAAA,WAAA;AAAA,IAAA,SAAA,EAAA,WAAA;AAAA,IAAA,MAAA,EAAA,QAAA;AAAA,IAAA,SAAA,EAAA,WAAA;AAAA,IAAA,IAAA,EAAA,MAAA;AAAA,IAAA,KAAA,EAAA,OAAA;AAAA,IAAA,OAAA,EAAA,SAAA;AAAA,IAAA,SAAA,EAAA,WAAA;AAAA,IAAA,KAAA,EAAA,OAAA;AAAA,IAAA,QAAA,EAAA,UAAA;AAAA,IAAA,KAAA,EAAA,OAAA;AAAA,IAAA,KAAA,EAAA,OAAA;AAAA,IAAA,OAAA,EAAA,SAAA;AAAA,IAAA,MAAA,EAAA,QAAA;AAAA,IAAA,OAAA,EAAA,SAAA;AAAA,IAAA,mBAAA,EAAA;AAAA,GADE;AACF,EAAA,OAAA,EAAA;AAAA,IAAA,gBAAA,EAAA,kBAAA;AAAA,IAAA,KAAA,EAAA,OAAA;AAAA,IAAA,gBAAA,EAAA,kBAAA;AAAA,IAAA,aAAA,EAAA,eAAA;AAAA,IAAA,QAAA,EAAA,UAAA;AAAA,IAAA,IAAA,EAAA,MAAA;AAAA,IAAA,OAAA,EAAA,SAAA;AAAA,IAAA,gBAAA,EAAA,kBAAA;AAAA,IAAA,SAAA,EAAA,WAAA;AAAA,IAAA,WAAA,EAAA,aAAA;AAAA,IAAA,WAAA,EAAA,aAAA;AAAA,IAAA,SAAA,EAAA,WAAA;AAAA,IAAA,QAAA,EAAA,UAAA;AAAA,IAAA,SAAA,EAAA,WAAA;AAAA,IAAA,OAAA,EAAA,SAAA;AAAA,IAAA,eAAA,EAAA,iBAAA;AAAA,IAAA,UAAA,EAAA,YAAA;AAAA,IAAA,YAAA,EAAA,cAAA;AAAA,IAAA,YAAA,EAAA,cAAA;AAAA,IAAA,cAAA,EAAA,gBAAA;AAAA,IAAA,aAAA,EAAA;AAAA,GADE;AACF,EAAA,QAAA,EAAA,CAAA,MAAA,CAAA,0BAAA;AADE,CADQD,CAAR;AAGA;;AAAmB,MAAA,CAAA,cAAA,GAAA;AAAA,SAAA,CAnBrB;AAAA,IAAA,IAAA,EAAA;AAAA,GAmBqB,CAAA;AAAA,CAAA;;;;;;;;;;;;;;;;;AAnBjB,C;AAAE;AAAI;AAAkC;AAE7B;;;ICWf,kB;AAAE;AAAQ;AACF;AACK;AACX;AAQF,4BAAA,aAAA,EAAA,UAAA,EAAA,SAAA,EAAA;AAAA;;AAAA;;AACA,OAAA,aAAA,GAAA,aAAA;AACA,OAAA,UAAA,GAAA,UAAA;AACA,OAAA,SAAA,GAAA,SAAA;AATA,OAAA,aAAA,GAA8D,IAA9D,YAA8D,EAA9D;AACA,OAAA,YAAA,GAA8C,IAA9C,YAA8C,EAA9C,CAKA,CALC;;AAiBD,OAAA,UAAA,GAAe,YAAf;AACI,IAAA,OAAI,CAAC,aAAL,GACE,OAAI,CAAC,aAAL,CAAmB,iBAAnB,CAAqC,CAAC,QAAD,EAAW,uBAAX,EAAoC,OAApC,CAArC,EAAmF,OAAnF,CADF;;AAIA,QAAI,CAAC,MAAM,CAAC,IAAP,CAAY,MAAjB,EAAyB;AACvB,YAAM,mBAAmB,CAAC,oBAAD,EAAuB,QAAvB,CAAzB;AACD;;AAED,IAAA,OAAI,CAAC,YAAL,GAAoB,IAAI,MAAM,CAAC,IAAP,CAAY,MAAZ,CAAmB,YAAvB,CAClB,OAAI,CAAC,UAAL,CAAgB,aADE,EAElB,OAAI,CAAC,aAFa,CAApB;;AAMA,IAAA,OAAI,CAAC,YAAL,CAAkB,WAAlB,CAA8B,eAA9B,EAA+C,UAAA,KAAK,EAAxD;AACM,MAAA,OAAI,CAAC,aAAL,CAAmB,IAAnB,CAAwB,OAAI,CAAC,YAAL,CAAkB,QAAlB,EAAxB;AACD,KAFD;;AAIA,IAAA,OAAI,CAAC,YAAL,CAAkB,IAAlB,CAAuB,OAAI,CAAC,YAA5B;AACJ,GApBA;;AAPI,EAAA,SAAS,CAAC,IAAV;AACA,EAAA,SAAS,CAAC,IAAV,CACG,IADH,CACQ,KAAK,EADb,EAEG,SAFH,CAEa;AAAA,WAAM,OAAI,CAAC,UAAL,EAAN;AAAA,GAFb;AAGD,C;;mCAvBH,0B,CAAA,C,EAAW;AAAA,SAAA,KAAA,CAAA,IACT,kBADS,EACC,MAAA,CAAA,iBAAA,CAAwB,aAAxB,CADD,EAEX,MAAA,CAAA,iBAAA,CAAA,MAAA,CAAA,UAAA,CAFW,EAEX,MAAA,CAAA,iBAAA,CAAA,cAAA,CAFW,CAAA;AAEX,C;;;;;;;;;;;;kBACC;;;AAAC;;AAAmB,kBAAA,CAAA,cAAA,GAAA;AAAA,SAAA,CAPrB;AAAA,IAAA,IAAA,EAAA;AAAA,GAOqB,EAXrB;AAAA,IAAA,IAAA,EAAA;AAAA,GAWqB,EARrB;AAAA,IAAA,IAAA,EAAA;AAAA,GAQqB,CAAA;AAAA,CAAA;;AARhB,kBAAA,CAAA,cAAA,GAAA;AASL,YAAA,CAAA;AAAA,IAAA,IAAA,EAAA;AAAA,GAAA,CATK;AAUL,2BAAA,CAAA;AAAA,IAAA,IAAA,EAAA;AAAA,GAAA,CAVK;AAWL,WAAA,CAAA;AAAA,IAAA,IAAA,EAAA;AAAA,GAAA,CAXK;AAaL,mBAAA,CAAA;AAAA,IAAA,IAAA,EAAG,MAAH;AAAA,IAAA,IAAA,EAAA,CAAA,eAAA;AAAA,GAAA,CAbK;AAcL,kBAAA,CAAA;AAAA,IAAA,IAAA,EAAA;AAAA,GAAA;AAdK,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAcD,C;AAAE;AAAI;AAAkC;AAE1B;;;ACnBlB,IAAMA,SAAM,GAAG,CACb,WADa,EACA,WADA,EACa,UADb,EACyB,WADzB,EACsC,aADtC,EACqD,UADrD,EACiE,OADjE,EAEb,aAFa,EAEE,eAFF,EAEmB,gBAFnB,EAEqC,cAFrC,EAEqD,SAFrD,EAEgE,QAFhE,EAE0E,SAF1E,CAAf;AAIA,IAAMC,UAAO,GAAG,CACd,OADc,EACL,UADK,EACO,MADP,EACe,SADf,EAC0B,WAD1B,EACuC,WADvC,EAEd,WAFc,EAED,UAFC,EAEW,WAFX,EAEwB,SAFxB,EAEmC,YAFnC,CAAhB;;IAUA,O;;;;;AAAE;AAAQ;AAA8B;AA8BxC,mBAAc,WAAd,EAAA;AAAA;;AAAA,+BACU,WADV,EACuB,SADvB,EACkCD,SADlC,EAC0CC,UAD1C;AAEG;;;EAhCH,gB;;wBALA,e,CAAC,C,EAAA;AAAD,SAAA,KAAW,CAAA,IAAA,OAAX,EACE,MAAA,CAAA,iBAAA,CAAU,gBAAV,CADF,CAAA;AACY,C;;AAAwC,OAAA,CAAA,IAAA,GAAA,MAClD,CAAA,iBADkD,CACpC;AAAA,EAAA,IAAA,EAAA,OAAA;AACd,EAAA,SAASA,EAAAA,CAAAA,CAAAA,SAAAA,CAAAA,EAAO,CAAA,aAAA,CAAPA,CADK;AAEhB,EAAA,MAAA,EAAA;AAAA,IAAA,SAAA,EAAA,WAAA;AAAA,IAAA,SAAA,EAAA,WAAA;AAAA,IAAA,QAAA,EAAA,UAAA;AAAA,IAAA,SAAA,EAAA,WAAA;AAAA,IAAA,WAAA,EAAA,aAAA;AAAA,IAAA,QAAA,EAAA,UAAA;AAAA,IAAA,KAAA,EAAA,OAAA;AAAA,IAAA,WAAA,EAAA,aAAA;AAAA,IAAA,aAAA,EAAA,eAAA;AAAA,IAAA,cAAA,EAAA,gBAAA;AAAA,IAAA,YAAA,EAAA,cAAA;AAAA,IAAA,OAAA,EAAA,SAAA;AAAA,IAAA,MAAA,EAAA,QAAA;AAAA,IAAA,OAAA,EAAA;AAAA,GAFgB;AAEhB,EAAA,OAAA,EAAA;AAAA,IAAA,KAAA,EAAA,OAAA;AAAA,IAAA,QAAA,EAAA,UAAA;AAAA,IAAA,IAAA,EAAA,MAAA;AAAA,IAAA,OAAA,EAAA,SAAA;AAAA,IAAA,SAAA,EAAA,WAAA;AAAA,IAAA,SAAA,EAAA,WAAA;AAAA,IAAA,SAAA,EAAA,WAAA;AAAA,IAAA,QAAA,EAAA,UAAA;AAAA,IAAA,SAAA,EAAA,WAAA;AAAA,IAAA,OAAA,EAAA,SAAA;AAAA,IAAA,UAAA,EAAA;AAAA,GAFgB;AAEhB,EAAA,QAAA,EAAA,CAAA,MAAA,CAAA,0BAAA;AAFgB,CADoC,CAAA;AAIlD;;AAAmB,OAAA,CAAA,cAAA,GAAA;AAAA,SAAA,CAhBrB;AAAA,IAAA,IAAA,EAAA;AAAA,GAgBqB,CAAA;AAAA,CAAA;;;;;;;;;;;;;;;;;AAhBjB,C;AAAE;AAAI;AAAkC;AAE7B;;;ACAf,IAAMD,SAAM,GAAG,CACb,WADa,EACA,WADA,EACa,UADb,EACyB,UADzB,EACqC,OADrC,EAC8C,MAD9C,EACsD,aADtD,EAEb,eAFa,EAEI,cAFJ,EAEoB,SAFpB,EAE+B,QAF/B,EAEyC,SAFzC,CAAf;AAIA,IAAMC,UAAO,GAAG,CACd,OADc,EACL,UADK,EACO,MADP,EACe,SADf,EAC0B,WAD1B,EACuC,WADvC,EAEd,WAFc,EAED,UAFC,EAEW,WAFX,EAEwB,SAFxB,EAEmC,YAFnC,CAAhB;;IAUA,Q;;;;;AAAE;AAAQ;AAA8B;AA4BxC,oBAAc,WAAd,EAAA;AAAA;;AAAA,+BACU,WADV,EACuB,UADvB,EACmCD,SADnC,EAC2CC,UAD3C;AAEG;;;EA9BH,gB;;yBALA,gB,CAAC,C,EAAS;AAAV,SAAW,KAAA,CAAA,IAAA,QAAA,EACT,MAAQ,CAAA,iBAAR,CAAU,gBAAV,CADS,CAAX;AACiC,C;;AACzB,QAAED,CAAAA,IAAF,GAAQ,MAAA,CAAA,iBAAA,CACP;AAAEC,EAAAA,IAAAA,EAAAA,QAAF;AAAS,EAAA,SACjB,EAAD,CAAA,CAAA,UAAA,CAAA,CADS;AACT,EAAA,MAAA,EAAA;AAAA,IAAA,SAAA,EAAA,WAAA;AAAA,IAAA,SAAA,EAAA,WAAA;AAAA,IAAA,QAAA,EAAA,UAAA;AAAA,IAAA,QAAA,EAAA,UAAA;AAAA,IAAA,KAAA,EAAA,OAAA;AAAA,IAAA,IAAA,EAAA,MAAA;AAAA,IAAA,WAAA,EAAA,aAAA;AAAA,IAAA,aAAA,EAAA,eAAA;AAAA,IAAA,YAAA,EAAA,cAAA;AAAA,IAAA,OAAA,EAAA,SAAA;AAAA,IAAA,MAAA,EAAA,QAAA;AAAA,IAAA,OAAA,EAAA;AAAA,GADS;AACT,EAAA,OAAA,EAAA;AAAA,IAAA,KAAA,EAAA,OAAA;AAAA,IAAA,QAAA,EAAA,UAAA;AAAA,IAAA,IAAA,EAAA,MAAA;AAAA,IAAA,OAAA,EAAA,SAAA;AAAA,IAAA,SAAA,EAAA,WAAA;AAAA,IAAA,SAAA,EAAA,WAAA;AAAA,IAAA,SAAA,EAAA,WAAA;AAAA,IAAA,QAAA,EAAA,UAAA;AAAA,IAAA,SAAA,EAAA,WAAA;AAAA,IAAA,OAAA,EAAA,SAAA;AAAA,IAAA,UAAA,EAAA;AAAA,GADS;AACT,EAAA,QAAA,EAAA,CAAA,MAAA,CAAA,0BAAA;AADS,CADO,CAAR;AAGN;;AAAmB,QAAA,CAAA,cAAA,GAAA;AAAA,SAAA,CAhBrB;AAAA,IAAA,IAAA,EAAA;AAAA,GAgBqB,CAAA;AAAA,CAAA;;;;;;;;;;;;;;;;;AAhBjB,C;AAAE;AAAI;AAAkC;AAE7B;;;ACAf,IAAMD,SAAM,GAAG,CACb,UADa,EACD,SADC,EAEb,gBAFa,EAEK,uBAFL,EAE8B,WAF9B,EAE2C,kBAF3C,EAE+D,wBAF/D,EAGb,mBAHa,EAGQ,mBAHR,EAG6B,0BAH7B,EAGyD,kBAHzD,EAG6E,cAH7E,EAIb,gBAJa,EAIK,uBAJL,EAI8B,YAJ9B,EAI4C,mBAJ5C,EAIiE,MAJjE,EAKb,UALa,EAKD,KALC,EAKM,aALN,EAKqB,gBALrB,EAKuC,SALvC,EAKkD,aALlD,EAKiE,oBALjE,CAAf;AAOA,IAAMC,UAAO,GAAG,CACd,YADc,EACA,cADA,EACgB,kBADhB,EACoC,aADpC,EACmD,QADnD,EAC6D,gBAD7D,EAEd,iBAFc,EAEK,cAFL,CAAhB;;IAUA,kB;;;;;AAAE;AAAQ;AAA8B;AAqCxC,8BAAc,WAAd,EAAA;AAAA;;AAAA,+BACU,WADV,EACuB,oBADvB,EAC6CD,SAD7C,EACqDC,UADrD;AAEG;AACH;AACO;AAAmB;;;;;WACxB,sBAAF;AACI,WAAK,aAAL,GAAqB,KAAK,aAAL,CAAmB,iBAAnB,CAAqC,KAAK,MAA1C,EAAkD,IAAlD,CAArB;AAGA;AAAA;AAAI,MAAA,OAAJ;;AACA,UAAI,KAAK,aAAL,CAAmB,QAAvB,EAAiC;AACrC;AACM,QAAA,OAAO,GAAG,QAAQ,CAAC,aAAT,CAAuB,KAAK,UAAL,CAAvB,CAAV;AACA,eAAO,KAAK,aAAL,CAAmB,QAA1B;AACD,OAJD,MAIO;AACL,QAAA,OAAO,GAAG,KAAK,gBAAL,CAAsB,EAAhC;AACD,OAXL,CAYA;;;AAEI,aAAO,KAAK,aAAL,CAAmB,QAA1B,KAAuC,QAAvC,IAAoD,OAAO,KAAK,aAAL,CAAmB,QAA9E;AAEA,WAAK,SAAL,GAAiB,IAAI,MAAM,CAAC,IAAP,CAAY,KAAK,aAAjB,CAAJ,CAAoC,OAApC,EAA6C,KAAK,aAAlD,CAAjB;AACA,WAAK,SAAL,CAAe,eAAf,IAAkC,KAAK,aAAvC;AACA,WAAK,SAAL,CAAe,kBAAf,IAAqC,KAAK,gBAA1C,CAlBJ,CAmBA;;AAEI,WAAK,OAAL,CAAa,eAAb,CAA6B,KAAK,OAAlC,EAA2C,IAA3C,EAAiD,WAAjD;AAEA,WAAK,gBAAL,CAAsB,mBAAtB,CAA0C,KAAK,aAA/C,EAA8D,KAAK,SAAnE;AACA,WAAK,YAAL,CAAkB,IAAlB,CAAuB,KAAK,SAA5B;AACD;AACH;AACO;AAAmB;;;;WACxB,uBAAF;AACI,UAAI,KAAK,gBAAL,CAAsB,EAA1B,EAA8B;AAC5B,aAAK,OAAL,CAAa,iBAAb,CAA+B,KAAK,OAApC,EAA6C,IAA7C,EAAmD,WAAnD;AACD;AACF;;;;EA1EH,gB;;mCALA,0B,CAAA,C,EAAW;AAAA,SAAA,KAAA,CAAA,IACT,kBADS,EACC,MAAA,CAAA,iBAAA,CAAiC,gBAAjC,CADD,CAAA;AAEH,C;;AAAQ,kBAAA,CAAA,IAAA,GACd,MAAA,CAAO,iBAAP,CAAgB;AAAA,EAAA,IAAA,EAAA,kBAAA;AAClB,EAAA,SAAA,EAAA,CAAA,CAAA,sBAAA,CAAA,CADkB;AAClB,EAAA,MAAA,EAAA;AAAA,IAAA,QAAA,EAAA,UAAA;AAAA,IAAA,OAAA,EAAA,SAAA;AAAA,IAAA,cAAA,EAAA,gBAAA;AAAA,IAAA,qBAAA,EAAA,uBAAA;AAAA,IAAA,SAAA,EAAA,WAAA;AAAA,IAAA,gBAAA,EAAA,kBAAA;AAAA,IAAA,sBAAA,EAAA,wBAAA;AAAA,IAAA,iBAAA,EAAA,mBAAA;AAAA,IAAA,iBAAA,EAAA,mBAAA;AAAA,IAAA,wBAAA,EAAA,0BAAA;AAAA,IAAA,gBAAA,EAAA,kBAAA;AAAA,IAAA,YAAA,EAAA,cAAA;AAAA,IAAA,cAAA,EAAA,gBAAA;AAAA,IAAA,qBAAA,EAAA,uBAAA;AAAA,IAAA,UAAA,EAAA,YAAA;AAAA,IAAA,iBAAA,EAAA,mBAAA;AAAA,IAAA,IAAA,EAAA,MAAA;AAAA,IAAA,QAAA,EAAA,UAAA;AAAA,IAAA,GAAA,EAAA,KAAA;AAAA,IAAA,WAAA,EAAA,aAAA;AAAA,IAAA,cAAA,EAAA,gBAAA;AAAA,IAAA,OAAA,EAAA,SAAA;AAAA,IAAA,WAAA,EAAA,aAAA;AAAA,IAAA,kBAAA,EAAA;AAAA,GADkB;AAClB,EAAA,OAAA,EAAA;AAAA,IAAA,UAAA,EAAA,YAAA;AAAA,IAAA,YAAA,EAAA,cAAA;AAAA,IAAA,gBAAA,EAAA,kBAAA;AAAA,IAAA,WAAA,EAAA,aAAA;AAAA,IAAA,MAAA,EAAA,QAAA;AAAA,IAAA,cAAA,EAAA,gBAAA;AAAA,IAAA,eAAA,EAAA,iBAAA;AAAA,IAAA,YAAA,EAAA;AAAA,GADkB;AAClB,EAAA,QAAA,EAAA,CAAA,MAAA,CAAA,0BAAA;AADkB,CAAhB,CADc;AAGd;;AAAmB,kBAAA,CAAA,cAAA,GAAA;AAAA,SAAA,CAnBrB;AAAA,IAAA,IAAA,EAAA;AAAA,GAmBqB,CAAA;AAAA,CAAA;;;;;;;;;;;;;;;;;AAnBjB,C;AAAE;AAAI;AAAkC;AAE7B;;;ACDf,IAAMD,SAAM,GAAG,CAAC,aAAD,EAAgB,SAAhB,CAAf;AACA,IAAMC,UAAO,GAAG,EAAhB;;IAOA,Y;;;;;AAAE;AAAQ;AAA8B;AAQxC,wBAAc,WAAd,EAAA;AAAA;;AAAA,+BACU,WADV,EACuB,cADvB,EACuCD,SADvC,EAC+CC,UAD/C;AAEG;;;EAVH,gB;;6BALA,oB,CAAA,C,EAAA;AAAA,SAAW,KAAA,CAAA,IAAA,YAAA,EACC,MAAA,CAAA,iBAAA,CAAA,gBAAA,CADD,CAAX;AAEE,C;;AAAM,YAAED,CAAM,IAAR,GAAQ,MAAA,CAAA,iBAAA,CACLC;AAAAA,EAAAA,IAAO,EAAA,YAAPA;AACX,EAAA,SAAA,EAAA,CAAA,CAAA,eAAA,CAAA,CADWA;AACX,EAAA,MAAA,EAAA;AAAA,IAAA,WAAA,EAAA,aAAA;AAAA,IAAA,OAAA,EAAA;AAAA,GADWA;AACX,EAAA,QAAA,EAAA,CAAA,MAAA,CAAA,0BAAA;AADWA,CADK,CAAR;AAGN;;AAAmB,YAAA,CAAA,cAAA,GAAA;AAAA,SAAA,CAVrB;AAAA,IAAA,IAAA,EAAA;AAAA,GAUqB,CAAA;AAAA,CAAA;;;;;;;;;;;;;;;;;AAVjB,C;AAAE;AAAI;AAAkC;AAE7B;;;ACCf,IAAMD,SAAM,GAAG,EAAf;AACA,IAAMC,UAAO,GAAG,EAAhB;;IAOA,Y;;;;;AAAE;AAAQ;AAA8B;AAOxC,wBAAc,WAAd,EAAA;AAAA;;AAAA,+BACU,WADV,EACuB,cADvB,EACuCD,SADvC,EAC+CC,UAD/C;AAEG;;;EATH,gB;;6BALA,oB,CAAA,C,EAAA;AAAA,SAAW,KAAA,CAAA,IAAA,YAAA,EACC,MAAA,CAAA,iBAAA,CAAA,gBAAA,CADD,CAAX;AAEE,C;;AAAM,YAAED,CAAM,IAAR,GAAQ,MAAA,CAAA,iBAAA,CACLC;AAAAA,EAAAA,IAAO,EAAA,YAAPA;AACX,EAAA,SAAA,EAAA,CAAA,CAAA,eAAA,CAAA,CADWA;AACX,EAAA,QAAA,EAAA,CAAA,MAAA,CAAA,0BAAA;AADWA,CADK,CAAR;AAGN;;AAAmB,YAAA,CAAA,cAAA,GAAA;AAAA,SAAA,CAVrB;AAAA,IAAA,IAAA,EAAA;AAAA,GAUqB,CAAA;AAAA,CAAA;;;;;;;;;;;;;;;;;AAVjB,C;AAAE;AAAI;AAAkC;AAE7B;;;ACyBf,IAAM,qBAAqB,GAAG,CAC5B,gBAD4B,EACV,UADU,EAE5B,MAF4B,EAEpB,MAFoB,EAEZ,YAFY,EAEE,OAFF,EAEW,UAFX,EAEuB,QAFvB,EAEiC,aAFjC,EAG5B,YAH4B,EAGd,YAHc,EAGA,YAHA,EAGc,cAHd,EAG8B,QAH9B,EAGwC,SAHxC,EAI5B,kBAJ4B,EAIR,kBAJQ,EAIY,kBAJZ,EAK5B,cAL4B,CAA9B;;IAoBA,a;;;;;;;;AAAE;AAAQ;AACH;AAAmB;AAAxB,uBAAF;AAAA,UAAA,MAAA,uEAAwC,EAAxC;AACI,aAAO;AACL,QAAA,QAAQ,EAAE,aADL;AAEL,QAAA,SAAS,EAAE,CACT;AAAE,UAAA,OAAO,EAAE,mBAAX;AAAgC,UAAA,QAAQ,EAAE;AAA1C,SADS;AAFN,OAAP;AAMD;;;;;;4BApBH,gB,CAAC;AAAA,EAAA,IAAD,EAAA;AAAC,C;AACC,aAAO,CAAE,IAAT,GAAW,MAAY,CAAE,gBAAd,CAAc;AACzB,EAAA,OAAA,EAAA,SAAc,qBAAd,CAAmC,CAAnC,EAAmC;AAAA,WACnC,KAAA,CAAA,IAAU,aAAV,GADmC;AACzB,GAFe;AAEM,EAAA,SAAC,EAAA,CAChC,QADgC,EAE9B,oBAF8B,E,OAAA,EAG9B,aAH8B,EAGV;AAAA,IAAA,OAAA,EAAA,cAAA;AACb,IAAA,QAAA,EAAA;AADa,GAHU,CAFP;AAQvB,EAAA,OAAC,EAAA,CAAA,CAAA,YAAA,CAAA;AARsB,CAAd,CAAX;;CAQ4B,YAAU;AAAA,GAAA,OAAA,SAAA,KAAA,WAAA,IAA4B,SAA5B,KACrC,MAAA,CACH,kBADG,CACH,aADG,EACH;AAAA,IAAA,YAAA,EAAA,wBAAA;AAAA,aAAA,CAAA,gBAAA,EAAA,UAAA,EAAA,MAAA,EAAA,MAAA,EAAA,YAAA,EAAA,OAAA,EAAA,UAAA,EAAA,QAAA,EAAA,aAAA,EAAA,YAAA,EAAA,YAAA,EAAA,YAAA,EAAA,cAAA,EAAA,QAAA,EAAA,SAAA,EAAA,kBAAA,EAAA,kBAAA,EAAA,kBAAA,EAAA,cAAA,CAAA;AAAA,KAAA;AAAA,IAAA,OAAA,EAAA,mBAAA;AAAA,aAAA,CAAA,YAAA,CAAA;AAAA,KAAA;AAAA,IAAA,OAAA,EAAA,mBAAA;AAAA,aAAA,CAAA,gBAAA,EAAA,UAAA,EAAA,MAAA,EAAA,MAAA,EAAA,YAAA,EAAA,OAAA,EAAA,UAAA,EAAA,QAAA,EAAA,aAAA,EAAA,YAAA,EAAA,YAAA,EAAA,YAAA,EAAA,cAAA,EAAA,QAAA,EAAA,SAAA,EAAA,kBAAA,EAAA,kBAAA,EAAA,kBAAA,EAAA,cAAA,CAAA;AAAA;AAAA,GADG,CADqC;AAExC,C;;;;;;;;;;;;;;;;;AACC,C;AAAE;AAAI;AACK;AAAyC;;AAAK;AAAI;AAE9C;AAET;;AAAI;AAAI;AAAwC;;;AACtD,SAAA,cAAA,EAAA,oBAAA,EAAA,aAAA,EAAA,mBAAA,EAAA,cAAA,EAAA,mBAAA,EAAA,2BAAA,EAAA,gBAAA,EAAA,UAAA,EAAA,YAAA,EAAA,MAAA,EAAA,SAAA,EAAA,kBAAA,EAAA,cAAA,EAAA,QAAA,EAAA,aAAA,EAAA,YAAA,EAAA,QAAA,EAAA,MAAA,EAAA,OAAA,EAAA,kBAAA,EAAA,OAAA,EAAA,QAAA,EAAA,kBAAA,EAAA,YAAA,EAAA,YAAA,EAAA,aAAA,EAAA,gBAAA,IAAA,EAAA","sourcesContent":["/**\n * return json string from json-like string\n */\nexport function jsonize(str: string): string {\n  try {       // if parsable already, return as it is\n    JSON.parse(str);\n    return str;\n  } catch (e) { // if not parsable, change little\n    return str\n      .replace(/([\\$\\w]+)\\s*:/g, // wrap keys without double quote\n        function(_: any, $1: any) {\n          return '\"' + $1 + '\":';\n        }\n      )\n      .replace(/'([^']+)'/g,   // replacing single quote to double quote\n        function(_: any, $1: any) {\n          return '\"' + $1 + '\"';\n        }\n      );\n  }\n}\n\n/**\n * Returns string to an object by using JSON.parse()\n */\nexport function getJSON(input: any): any {\n  if (typeof input === 'string') {\n    const re = /^[\\+\\-]?[0-9\\.]+,[ ]*\\ ?[\\+\\-]?[0-9\\.]+$/; // lat,lng\n    if (input.match(re)) {\n      input = '[' + input + ']';\n    }\n    return JSON.parse(jsonize(input));\n  } else {\n    return input;\n  }\n}\n\n/**\n * json type definition\n */\n/* tslint:disable */\n//interface IJsonArray extends Array<string|number|boolean|Date|IJson|IJsonArray> { }\nexport interface IJson {\n  //[x: string]: string|number|boolean|Date|IJson|IJsonArray;\n  [x: string]: string|number|boolean|Date|IJson|Array<string|number|boolean|Date|IJson>;\n}\n/* tslint:enable */\n\n\n/**\n * Returns camel-cased from string 'Foo Bar' to 'fooBar'\n */\nexport function toCamelCase(str: string): string {\n  return str.replace(/(?:^\\w|[A-Z]|\\b\\w)/g, function(letter, index) {\n    return index === 0 ? letter.toLowerCase() : letter.toUpperCase();\n  }).replace(/\\s+/g, '');\n}\n\nexport function isMapsApiLoaded() {\n  return typeof google === 'object' && typeof google.maps === 'object';\n}\n\nexport function missingLibraryError(component, libName) {\n  return Error(`${component}: library '${libName}' is missing, please ensure to include it in a 'libraries' parameter.\n    Example:\n      NguiMapModule.forRoot({\n        apiUrl: 'https://maps.googleapis.com/maps/api/js?libraries=${libName}'\n      })\n  `);\n}","import {EventEmitter, SimpleChanges, Output, OnInit, OnChanges, OnDestroy} from '@angular/core';\n\nimport { OptionBuilder } from '../services/option-builder';\nimport { NguiMap } from '../services/ngui-map';\nimport { NguiMapComponent } from '../components/ngui-map.component';\nimport { missingLibraryError } from '../services/util';\nexport abstract class BaseMapDirective implements OnInit, OnChanges, OnDestroy {\n  // this should be redefined on each childr directive\n  @Output() initialized$: EventEmitter<any> = new EventEmitter();\n\n  public mapObject: any; // e.g. google.maps.Marker\n  public objectOptions: any; // e.g. google.maps.MarkerOptions\n\n  public nguiMap: NguiMap;\n  public optionBuilder: OptionBuilder;\n  public libraryName: string;\n  protected _subscriptions = [];\n\n  constructor(\n    protected nguiMapComponent: NguiMapComponent,\n    public    mapObjectName: string,\n    protected inputs: string[],\n    protected outputs: string[]\n  ) {\n    this.nguiMap = this.nguiMapComponent['nguiMap'];\n    this.optionBuilder = this.nguiMapComponent['optionBuilder'];\n    // all outputs must be initialized\n    this.outputs.forEach(output => this[output] = new EventEmitter());\n    this.mapObjectName = mapObjectName;\n  }\n\n  // Initialize this map object when map is ready\n  ngOnInit() {\n    if (this.nguiMapComponent.mapIdledOnce) { // map is ready already\n      this.initialize();\n    } else {\n      this.nguiMapComponent.mapReady$.subscribe(map => this.initialize());\n    }\n  }\n\n  // only called when map is ready\n  initialize(): void {\n    this.objectOptions = this.optionBuilder.googlizeAllInputs(this.inputs, this);\n\n\n    // will be set after geocoded\n    typeof this.objectOptions.position === 'string' && (delete this.objectOptions.position);\n    typeof this.objectOptions.center === 'string' && (delete this.objectOptions.center);\n\n    // noinspection TypeScriptUnresolvedFunction\n    if (this.libraryName) {\n      if (!google.maps[this.libraryName]) {\n        throw missingLibraryError(this.mapObjectName, this.libraryName);\n      }\n      this.mapObject = new google.maps[this.libraryName][this.mapObjectName](this.objectOptions);\n    } else {\n      this.mapObject = new google.maps[this.mapObjectName](this.objectOptions);\n    }\n    this.mapObject.setMap(this.nguiMapComponent.map);\n    this.mapObject['mapObjectName'] = this.mapObjectName;\n    this.mapObject['nguiMapComponent'] = this.nguiMapComponent;\n\n    // set google events listeners and emits to this outputs listeners\n    this.nguiMap.setObjectEvents(this.outputs, this, 'mapObject');\n\n    this.nguiMapComponent.addToMapObjectGroup(this.mapObjectName, this.mapObject);\n    this.initialized$.emit(this.mapObject);\n  }\n\n  // When input is changed, update object too.\n  // e.g., when map center is changed by user, update center on the map\n  ngOnChanges(changes: SimpleChanges) {\n\n    this.nguiMap.updateGoogleObject(this.mapObject, changes);\n  }\n\n  // When destroyed, remove event listener, and delete this object to prevent memory leak\n  ngOnDestroy() {\n    this._subscriptions.map(subscription => subscription.unsubscribe());\n    this.nguiMapComponent.removeFromMapObjectGroup(this.mapObjectName, this.mapObject);\n\n    if (this.mapObject) {\n      this.nguiMap.clearObjectEvents(this.outputs, this, 'mapObject');\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { getJSON, IJson } from './util';\n\n/**\n * change any object to google object options\n * e.g. [1,2] -> new google.maps.LatLng(1,2);\n */\n@Injectable()\nexport class OptionBuilder {\n\n  googlizeAllInputs(definedInputs: string[], userInputs: any) {\n    let options: any = {};\n\n    // if options given from user, only take options and ignore other inputs\n    if (userInputs.options) {\n\n      options = userInputs.options;\n      if (!this.onlyOptionsGiven(definedInputs, userInputs)) {\n        console.error('when \"options\" are used, other options are ignored');\n      }\n    } else { // if options not given, process all user inputs\n      definedInputs.forEach(input => {\n        if (userInputs[input] !== undefined)  {\n          options[input] = this.googlize(userInputs[input], {key: input});\n        }\n      });\n    }\n    return options;\n  }\n\n  googlizeMultiple(inputs: any[], options?: IJson): any {\n    options =  options || {};\n    for (let key in inputs) {\n      let val = inputs[key];\n      // (non-strings are fully converted)\n      if (typeof val !== 'string') {\n        options[key] = val;\n      } // sometimes '0' needed to stay as it is\n      else if (!(options['doNotConverStringToNumber'] && val.match(/^[0-9]+$/))) {\n        options[key] = this.googlize(val, {key: key});\n      }\n    } // for(var key in attrs)\n    return options;\n  }\n\n  googlize(input: any, options?: IJson): any {\n    options = options || {};\n    let output: any = input;\n    if (typeof input === 'string') { // convert string to a google object\n      if (input === 'false') {\n        output = false;\n      } else if (input === '0') {\n        output = 0;\n      } else {\n        output =\n          // -> googlize -> getJsonParsed -> googlizeMultiple -> googlize until all elements are parsed\n          this.getJSONParsed(input, options)\n\n          /* Foo.Bar(...) -> new google.maps.Foo.Bar(...) */\n          || this.getAnyMapObject(input)\n\n          /*  MapTypeID.HYBRID -> new google.maps.MapTypeID.HYBRID */\n          || this.getAnyMapConstant(input, options)\n\n          /*  2016-06-20 -> new Date('2016-06-20') */\n          || this.getDateObject(input)\n\n          || input;\n      }\n    }\n\n    if (options['key']) {\n      let key: string = <string>options['key'];\n      if (output instanceof Array) { // e.g., [1, 2]\n        if (key === 'bounds') {\n          output = new google.maps.LatLngBounds(output[0], output[1]);\n        } else if (key === 'icons') {\n          output = this.getMapIcons(output);\n        } else if (key === 'position' || key.match(/^geoFallback/) ) {\n          output = this.getLatLng(output);\n        }\n      } else if (output instanceof Object) {\n        if (key === 'icon') {\n          output = this.getMarkerIcon(output);\n        }\n        else if (key.match(/ControlOptions$/)) {\n          output = this.getMapControlOption(output);\n        }\n      }\n    }\n\n    // delete keys only for processing, not used by google\n    delete output['doNotConverStringToNumber'];\n    delete output['key'];\n\n    return output;\n  }\n\n  private getLatLng(input: any): google.maps.LatLng | Array<google.maps.LatLng> {\n    let output: google.maps.LatLng | Array<google.maps.LatLng>;\n    if (input[0].constructor === Array) { // [[1,2],[3,4]]\n      output = (<any[]>input).map((el: number[]) => new google.maps.LatLng(el[0], el[1]));\n    } else if (!isNaN(parseFloat(input[0])) && isFinite(input[0])) {\n      output = new google.maps.LatLng(input[0], input[1]);\n    }\n    return output;\n  }\n\n  private getJSONParsed(input: any, options: IJson): IJson {\n    let output: any;\n    try {\n      output = getJSON(input);\n      if (output instanceof Array) {\n        // [{a:1}] : not lat/lng ones\n\n        if (output[0].constructor !== Object) { // [[1,2],[3,4]] or [1,2]\n          output = this.getLatLng(output);\n        }\n      }\n      // JSON is an object (not array or null)\n      else if (output === Object(output)) {\n        // check for nested hashes and convert to Google API options\n        let newOptions = options;\n        newOptions['doNotConverStringToNumber'] = true;\n        output = this.googlizeMultiple(output, newOptions);\n      }\n    } catch (e) {\n    }\n    return output;\n  }\n\n  private getAnyMapObject(input: string): any {\n    let output: any;\n    if (input.match(/^[A-Z][a-zA-Z0-9]+\\(.*\\)$/)) {\n      try {\n        output = Function(`return new google.maps.${input};`)();\n      } catch (e) {}\n    }\n    return output;\n  }\n\n  private getAnyMapConstant(input: string, options: IJson): any {\n    let output: any;\n\n    if (input.match(/^([A-Z][a-zA-Z0-9]+)\\.([A-Z]+)$/)) { // e.g. MapTypeID.HYBRID\n      try {\n        let matches = input.match(/^([A-Z][a-zA-Z0-9]+)\\.([A-Z]+)$/);\n        output = google.maps[matches[1]][matches[2]];\n      } catch (e) {}\n    } else if (input.match(/^[A-Z]+$/)) { // e.g. HYBRID\n      try {\n        let capitalizedKey = (<string>options['key']).charAt(0).toUpperCase() +\n          (<string>options['key']).slice(1);\n        output = google.maps[capitalizedKey][input];\n      } catch (e) {}\n    }\n    return output;\n  }\n\n  /**\n   * streetviewControl, panControl, etc, not a general control\n   */\n  private getMapControlOption(controlOptions: IJson): IJson {\n    let newControlOptions: IJson = controlOptions;\n\n    for (let key in newControlOptions) { // assign the right values\n      if (newControlOptions[key]) {\n        let value = newControlOptions[key];\n\n        if (typeof value === 'string') {\n          value = (<string>value).toUpperCase();\n        }\n        else if (key === 'mapTypeIds') {\n          value = (<any[]>value).map(function (str) {\n            if (str.match(/^[A-Z]+$/)) { // if constant\n              return google.maps.MapTypeId[str.toUpperCase()];\n            } else { // else, custom map-type\n              return str;\n            }\n          });\n        }\n\n        if (key === 'style') {\n          let objName = key.replace(/Options$/, '') + 'Style';\n          newControlOptions[key] = google.maps[objName][<any>value];\n        }\n        else if (key === 'position') {\n          newControlOptions[key] = google.maps.ControlPosition[<any>value];\n        }\n        else {\n          newControlOptions[key] = value;\n        }\n      }\n    }\n\n    return newControlOptions;\n  }\n\n  private getDateObject(input: string): Date {\n    let output: Date;\n\n    if (input.match(/^(\\d{4}\\-\\d\\d\\-\\d\\d([tT][\\d:\\.]*)?)([zZ]|([+\\-])(\\d\\d):?(\\d\\d))?$/)) {\n      try {\n        output = new Date(input);\n      } catch (e) {}\n    }\n    return output;\n  }\n\n  private getMapIcons(input: any[]): any[] {\n    return input.map(el => {\n      if (el.icon.path.match(/^[A-Z_]+$/)) {\n        el.icon.path = google.maps.SymbolPath[el.icon.path];\n      }\n      return el;\n    });\n  }\n\n  private getMarkerIcon(input: any): any {\n    let output = input;\n\n    if (('' + output.path).match(/^[A-Z_]+$/)) {\n      output.path = google.maps.SymbolPath[output.path];\n    }\n\n    for (let key in output) {\n      let arr = output[key];\n      if (key === 'anchor' || key === 'origin' || key === 'labelOrigin') {\n        output[key] = new google.maps.Point(arr[0], arr[1]);\n    } else if (key === 'size' || key === 'scaledSize') {\n        output[key] = new google.maps.Size(arr[0], arr[1]);\n      }\n    }\n\n    return output;\n  }\n\n  private onlyOptionsGiven(definedInputs: string[], userInputs: any): boolean {\n    for (let i = 0; i < definedInputs.length; i++) {\n      let input = definedInputs[i];\n      if (input !== 'options' && typeof userInputs[input] !== 'undefined') {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, Observer } from 'rxjs';\nimport { IJson } from './util';\n\n/**\n *  service for navigator.geolocation methods\n */\n@Injectable()\nexport class NavigatorGeolocation {\n\n  getCurrentPosition(geoLocationOptions?: IJson): Observable<any> {\n    geoLocationOptions = geoLocationOptions || { timeout: 5000 };\n\n    return new Observable<any>((responseObserver: Observer<any>) => {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(\n          (position) => {\n            responseObserver.next(position);\n            responseObserver.complete();\n          },\n          (evt) => responseObserver.error(evt),\n          geoLocationOptions\n        );\n      } else {\n        responseObserver.error('Browser Geolocation service failed.');\n      }\n    });\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\nexport const NG_MAP_CONFIG_TOKEN = new InjectionToken<ConfigOption>('NG_MAP_CONFIG_TOKEN');\nexport interface ConfigOption {\n  apiUrl?: string;\n}\n","import { Injectable, Inject, Optional, NgZone, OnDestroy } from '@angular/core';\nimport { ReplaySubject } from 'rxjs';\nimport { NG_MAP_CONFIG_TOKEN } from './config';\nimport { isMapsApiLoaded } from './util';\n\nexport abstract class NgMapApiLoader implements OnDestroy {\n  api$: ReplaySubject<any> = new ReplaySubject(1);\n\n  abstract load();\n\n  constructor(protected config) {\n    this.config = this.config || {apiUrl: 'https://maps.google.com/maps/api/js'};\n  }\n\n  ngOnDestroy() {\n    this.api$.complete();\n  }\n}\n\n@Injectable()\nexport class NgMapAsyncCallbackApiLoader extends NgMapApiLoader {\n  constructor(protected zone: NgZone, @Optional() @Inject(NG_MAP_CONFIG_TOKEN) config) {\n    super(config);\n  }\n\n  load() {\n    if (typeof window === 'undefined') {\n      return;\n    }\n\n    if (isMapsApiLoaded()) {\n      this.api$.next(google.maps);\n    } else if (!document.querySelector('#ngui-map-api')) {\n      (<any>window)['nguiMapRef'] = (<any>window)['nguiMapRef'] || [];\n      (<any>window)['nguiMapRef'].push({ zone: this.zone, componentFn: () => this.api$.next(google.maps)});\n      this.addGoogleMapsApi();\n    }\n  }\n\n  private addGoogleMapsApi() {\n    (<any>window)['initNguiMap'] = (<any>window)['initNguiMap'] || function() {\n      (<any>window)['nguiMapRef'].forEach(nguiMapRef => {\n        nguiMapRef.zone.run(function() { nguiMapRef.componentFn(); });\n      });\n      (<any>window)['nguiMapRef'].splice(0, (<any>window)['nguiMapRef'].length);\n    };\n\n    let script = document.createElement( 'script' );\n    script.id = 'ngui-map-api';\n\n    // script.src = \"https://maps.google.com/maps/api/js?callback=initNguiMap\";\n    let apiUrl = this.config.apiUrl ;\n    apiUrl += apiUrl.indexOf('?') !== -1 ? '&' : '?';\n    script.src = apiUrl + 'callback=initNguiMap';\n    document.querySelector('body').appendChild(script);\n  }\n}\n\n@Injectable()\nexport class NgMapAsyncApiLoader extends NgMapApiLoader {\n  constructor(@Optional() @Inject(NG_MAP_CONFIG_TOKEN) config) {\n    super(config);\n  }\n\n  load() {\n    if (typeof window === 'undefined') {\n      return;\n    }\n\n    if (isMapsApiLoaded()) {\n      this.api$.next(google.maps);\n    } else if (!document.querySelector('#ngui-map-api')) {\n      let script = document.createElement('script');\n      script.id = 'ngui-map-api';\n\n      script.async = true;\n      script.onload = () => this.api$.next(google.maps);\n      script.src = this.config.apiUrl;\n      document.querySelector('body').appendChild(script);\n    }\n  }\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { Observable, Observer } from 'rxjs';\nimport { NgMapApiLoader } from './api-loader';\n\n/**\n *   Provides [defered/promise API](https://docs.angularjs.org/api/ng/service/$q)\n *   service for Google Geocoder service\n */\n\n@Injectable()\nexport class GeoCoder implements OnDestroy {\n  private apiLoaderSubs = [];\n  constructor(private apiLoader: NgMapApiLoader) {}\n\n  geocode(options: google.maps.GeocoderRequest) {\n    return new Observable((responseObserver: Observer<any>) => {\n        this.apiLoaderSubs.push(this.apiLoader.api$\n          .subscribe(() => this.requestGeocode(options, responseObserver)));\n    });\n  }\n\n  ngOnDestroy() {\n    this.apiLoaderSubs.map(sub => sub.unsubscribe());\n  }\n\n  private requestGeocode(options, observer) {\n    const geocoder = new google.maps.Geocoder();\n    geocoder.geocode(options, function (results, status) {\n      if (status === google.maps.GeocoderStatus.OK) {\n        observer.next(results);\n        observer.complete();\n      } else {\n        observer.error(results);\n      }\n    });\n  }\n}\n","import { Injectable, SimpleChanges, NgZone } from '@angular/core';\nimport { OptionBuilder } from './option-builder';\nimport { GeoCoder } from './geo-coder';\n\n/**\n * collection of map instance-related properties and methods\n */\n@Injectable()\nexport class NguiMap {\n\n  constructor(\n    private geoCoder: GeoCoder,\n    private optionBuilder: OptionBuilder,\n    private zone: NgZone,\n  ) {}\n\n  setObjectEvents(definedEvents: string[], thisObj: any, prefix: string) {\n    definedEvents.forEach(definedEvent => {\n      const eventName = this.getEventName(definedEvent),\n        zone = this.zone;\n      zone.runOutsideAngular(() => {\n        thisObj[prefix].addListener(eventName, function(event: google.maps.event) {\n          let param: any = event ? event : {};\n          param.target = this;\n          zone.run(() => thisObj[definedEvent].emit(param));\n        });\n      });\n    });\n  }\n\n  clearObjectEvents(definedEvents: string[], thisObj: any, prefix: string) {\n    definedEvents.forEach(definedEvent => {\n      const eventName = this.getEventName(definedEvent);\n      this.zone.runOutsideAngular(() => {\n        if (thisObj[prefix]) {\n          google.maps.event.clearListeners(thisObj[prefix], eventName);\n        }\n      });\n    });\n\n    if (thisObj[prefix]) {\n      if (thisObj[prefix].setMap) {\n        thisObj[prefix].setMap(null);\n      }\n\n      delete thisObj[prefix].nguiMapComponent;\n      delete thisObj[prefix];\n    }\n\n  }\n\n  updateGoogleObject = (object: any, changes: SimpleChanges)  => {\n    let val: any, currentValue: any, setMethodName: string;\n    if (object) {\n      for (let key in changes) {\n        setMethodName = `set${key.replace(/^[a-z]/, x => x.toUpperCase()) }`;\n        currentValue = changes[key].currentValue;\n        if (['position', 'center'].indexOf(key) !== -1 && typeof currentValue === 'string') {\n          // To preserve setMethod name in Observable callback, wrap it as a function, then execute\n          ((setMethodName) => {\n            this.geoCoder.geocode({address: currentValue}).subscribe(results => {\n              if (typeof object[setMethodName] === 'function') {\n                object[setMethodName](results[0].geometry.location);\n              } else {\n                console.error(\n                  'Not all options are dynamically updatable according to Googles Maps API V3 documentation.\\n' +\n                  'Please check Google Maps API documentation, and use \"setOptions\" instead.'\n                );\n              }\n            });\n          })(setMethodName);\n        } else {\n          val =  this.optionBuilder.googlize(currentValue);\n          if (typeof object[setMethodName] === 'function') {\n            object[setMethodName](val);\n          } else {\n            console.error(\n              'Not all options are dynamically updatable according to Googles Maps API V3 documentation.\\n' +\n              'Please check Google Maps API documentation, and use \"setOptions\" instead.'\n            );\n          }\n        }\n      }\n    }\n  }\n\n  private getEventName(definedEvent) {\n    return definedEvent\n      .replace(/([A-Z])/g, ($1) => `_${$1.toLowerCase()}`) // positionChanged -> position_changed\n      .replace(/^map_/, '');                               // map_click -> click  to avoid DOM conflicts\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  ViewEncapsulation,\n  EventEmitter,\n  SimpleChanges,\n  Output,\n  NgZone,\n  AfterViewInit, AfterViewChecked, OnChanges, OnDestroy\n} from '@angular/core';\n\nimport { OptionBuilder } from '../services/option-builder';\nimport { NavigatorGeolocation } from '../services/navigator-geolocation';\nimport { GeoCoder } from '../services/geo-coder';\nimport { NguiMap } from '../services/ngui-map';\nimport { NgMapApiLoader } from '../services/api-loader';\nimport { InfoWindow } from './info-window';\nimport { Subject } from 'rxjs';\nimport { debounceTime, tap, first } from 'rxjs/operators';\nimport { toCamelCase } from '../services/util';\n\nconst INPUTS = [\n  'backgroundColor', 'center', 'disableDefaultUI', 'disableDoubleClickZoom', 'draggable', 'draggableCursor',\n  'draggingCursor', 'heading', 'keyboardShortcuts', 'mapMaker', 'mapTypeControl', 'mapTypeId', 'maxZoom', 'minZoom',\n  'noClear', 'overviewMapControl', 'panControl', 'panControlOptions', 'rotateControl', 'scaleControl', 'scrollwheel',\n  'streetView', 'styles', 'tilt', 'zoom', 'streetViewControl', 'zoomControl', 'zoomControlOptions', 'mapTypeControlOptions',\n  'overviewMapControlOptions', 'rotateControlOptions', 'scaleControlOptions', 'streetViewControlOptions', 'fullscreenControl', 'fullscreenControlOptions',\n  'options',\n  // ngui-map-specific inputs\n  'geoFallbackCenter'\n];\n\nconst OUTPUTS = [\n  'bounds_changed', 'center_changed', 'click', 'dblclick', 'drag', 'dragend', 'dragstart', 'heading_changed', 'idle',\n  'maptypeid_changed', 'mousemove', 'mouseout', 'mouseover', 'projection_changed', 'resize', 'rightclick',\n  'tilesloaded', 'tile_changed', 'zoom_changed',\n  // to avoid DOM event conflicts\n  'mapClick', 'mapMouseover', 'mapMouseout', 'mapMousemove', 'mapDrag', 'mapDragend', 'mapDragstart'\n];\n\n@Component({\n  selector: 'ngui-map',\n  providers: [NguiMap, OptionBuilder, GeoCoder, NavigatorGeolocation],\n  styles: [`\n    ngui-map {display: block; height: 300px;}\n    .google-map {width: 100%; height: 100%}\n  `],\n  inputs: INPUTS,\n  outputs: OUTPUTS,\n  encapsulation: ViewEncapsulation.None,\n  template: `\n    <div class=\"google-map\"></div>\n    <ng-content></ng-content>\n  `,\n})\nexport class NguiMapComponent implements OnChanges, OnDestroy, AfterViewInit, AfterViewChecked {\n  // declare INPUTS for AOT compiler\n  public backgroundColor: any; // generated by ngc-pre-compiler.js\n  public center: any; // generated by ngc-pre-compiler.js\n  public disableDefaultUI: any; // generated by ngc-pre-compiler.js\n  public disableDoubleClickZoom: any; // generated by ngc-pre-compiler.js\n  public draggable: any; // generated by ngc-pre-compiler.js\n  public draggableCursor: any; // generated by ngc-pre-compiler.js\n  public draggingCursor: any; // generated by ngc-pre-compiler.js\n  public heading: any; // generated by ngc-pre-compiler.js\n  public keyboardShortcuts: any; // generated by ngc-pre-compiler.js\n  public mapMaker: any; // generated by ngc-pre-compiler.js\n  public mapTypeControl: any; // generated by ngc-pre-compiler.js\n  public mapTypeId: any; // generated by ngc-pre-compiler.js\n  public maxZoom: any; // generated by ngc-pre-compiler.js\n  public minZoom: any; // generated by ngc-pre-compiler.js\n  public noClear: any; // generated by ngc-pre-compiler.js\n  public overviewMapControl: any; // generated by ngc-pre-compiler.js\n  public panControl: any; // generated by ngc-pre-compiler.js\n  public panControlOptions: any; // generated by ngc-pre-compiler.js\n  public rotateControl: any; // generated by ngc-pre-compiler.js\n  public scaleControl: any; // generated by ngc-pre-compiler.js\n  public scrollwheel: any; // generated by ngc-pre-compiler.js\n  public streetView: any; // generated by ngc-pre-compiler.js\n  public styles: any; // generated by ngc-pre-compiler.js\n  public tilt: any; // generated by ngc-pre-compiler.js\n  public zoom: any; // generated by ngc-pre-compiler.js\n  public streetViewControl: any; // generated by ngc-pre-compiler.js\n  public zoomControl: any; // generated by ngc-pre-compiler.js\n  public zoomControlOptions: any; // generated by ngc-pre-compiler.js\n  public mapTypeControlOptions: any; // generated by ngc-pre-compiler.js\n  public overviewMapControlOptions: any; // generated by ngc-pre-compiler.js\n  public rotateControlOptions: any; // generated by ngc-pre-compiler.js\n  public scaleControlOptions: any; // generated by ngc-pre-compiler.js\n  public streetViewControlOptions: any; // generated by ngc-pre-compiler.js\n  public fullscreenControl: any; // generated by ngc-pre-compiler.js\n  public fullscreenControlOptions: any; // generated by ngc-pre-compiler.js\n  public options: any; // generated by ngc-pre-compiler.js\n  public geoFallbackCenter: any; // generated by ngc-pre-compiler.js\n\n  // declare OUTPUTS for AOT compiler\n  public bounds_changed: any; // generated by ngc-pre-compiler.js\n  public center_changed: any; // generated by ngc-pre-compiler.js\n  public click: any; // generated by ngc-pre-compiler.js\n  public dblclick: any; // generated by ngc-pre-compiler.js\n  public drag: any; // generated by ngc-pre-compiler.js\n  public dragend: any; // generated by ngc-pre-compiler.js\n  public dragstart: any; // generated by ngc-pre-compiler.js\n  public heading_changed: any; // generated by ngc-pre-compiler.js\n  public idle: any; // generated by ngc-pre-compiler.js\n  public maptypeid_changed: any; // generated by ngc-pre-compiler.js\n  public mousemove: any; // generated by ngc-pre-compiler.js\n  public mouseout: any; // generated by ngc-pre-compiler.js\n  public mouseover: any; // generated by ngc-pre-compiler.js\n  public projection_changed: any; // generated by ngc-pre-compiler.js\n  public resize: any; // generated by ngc-pre-compiler.js\n  public rightclick: any; // generated by ngc-pre-compiler.js\n  public tilesloaded: any; // generated by ngc-pre-compiler.js\n  public tile_changed: any; // generated by ngc-pre-compiler.js\n  public zoom_changed: any; // generated by ngc-pre-compiler.js\n  public mapClick: any; // generated by ngc-pre-compiler.js\n  public mapMouseover: any; // generated by ngc-pre-compiler.js\n  public mapMouseout: any; // generated by ngc-pre-compiler.js\n  public mapMousemove: any; // generated by ngc-pre-compiler.js\n  public mapDrag: any; // generated by ngc-pre-compiler.js\n  public mapDragend: any; // generated by ngc-pre-compiler.js\n  public mapDragstart: any; // generated by ngc-pre-compiler.js\n\n  @Output() public mapReady$: EventEmitter<any> = new EventEmitter();\n\n  public el: HTMLElement;\n  public map: google.maps.Map;\n  public mapOptions: google.maps.MapOptions = {};\n\n  public inputChanges$ = new Subject();\n\n  // map objects by group\n  public infoWindows: { [id: string]: InfoWindow } = { };\n\n  // map has been fully initialized\n  public mapIdledOnce: boolean = false;\n\n  private initializeMapAfterDisplayed = false;\n  private apiLoaderSub;\n\n  constructor(\n    public optionBuilder: OptionBuilder,\n    public elementRef: ElementRef,\n    public geolocation: NavigatorGeolocation,\n    public geoCoder: GeoCoder,\n    public nguiMap: NguiMap,\n    public apiLoader: NgMapApiLoader,\n    public zone: NgZone,\n  ) {\n    apiLoader.load();\n\n    // all outputs needs to be initialized,\n    // http://stackoverflow.com/questions/37765519/angular2-directive-cannot-read-property-subscribe-of-undefined-with-outputs\n    OUTPUTS.forEach(output => this[output] = new EventEmitter());\n  }\n\n  ngAfterViewInit() {\n    this.apiLoaderSub = this.apiLoader.api$\n      .pipe(first())\n      .subscribe(() => this.initializeMap());\n  }\n\n  ngAfterViewChecked() {\n      if (this.initializeMapAfterDisplayed && this.el && this.el.offsetWidth > 0) {\n        this.initializeMap();\n      }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this.inputChanges$.next(changes);\n  }\n\n  initializeMap(): void {\n    this.el = this.elementRef.nativeElement.querySelector('.google-map');\n    if (this.el && this.el.offsetWidth === 0) {\n        this.initializeMapAfterDisplayed = true;\n        return;\n    }\n\n    this.initializeMapAfterDisplayed = false;\n    this.mapOptions = this.optionBuilder.googlizeAllInputs(INPUTS, this);\n\n\n    this.mapOptions.zoom = this.mapOptions.zoom || 15;\n    typeof this.mapOptions.center === 'string' && (delete this.mapOptions.center);\n\n    this.zone.runOutsideAngular(() => {\n      this.map = new google.maps.Map(this.el, this.mapOptions);\n      this.map['mapObjectName'] = 'NguiMapComponent';\n\n      if (!this.mapOptions.center) { // if center is not given as lat/lng\n        this.setCenter();\n      }\n\n      // set google events listeners and emits to this outputs listeners\n      this.nguiMap.setObjectEvents(OUTPUTS, this, 'map');\n\n      this.map.addListener('idle', () => {\n        if (!this.mapIdledOnce) {\n          this.mapIdledOnce = true;\n          setTimeout(() => { // Why????, subsribe and emit must not be in the same cycle???\n            this.mapReady$.emit(this.map);\n          });\n        }\n      });\n\n      // update map when input changes\n      this.inputChanges$.pipe(\n        debounceTime(1000),\n        tap((changes: SimpleChanges) => this.nguiMap.updateGoogleObject(this.map, changes)),\n      ).subscribe();\n\n      if (typeof window !== 'undefined' && (<any>window)['nguiMapRef']) {\n        // expose map object for test and debugging on (<any>window)\n        (<any>window)['nguiMapRef'].map = this.map;\n      }\n    });\n  }\n\n  setCenter(): void {\n    if (!this['center']) { // center is not from user. Thus, we set the current location\n      this.geolocation.getCurrentPosition().subscribe(\n        position => {\n\n          let latLng = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);\n          this.map.setCenter(latLng);\n        },\n        error => {\n          console.error('ngui-map: Error finding the current position');\n          this.map.setCenter(this.mapOptions['geoFallbackCenter'] || new google.maps.LatLng(0, 0));\n        }\n      );\n    }\n    else if (typeof this['center'] === 'string') {\n      this.geoCoder.geocode({address: this['center']}).subscribe(\n        results => {\n\n          this.map.setCenter(results[0].geometry.location);\n        },\n        error => {\n          this.map.setCenter(this.mapOptions['geoFallbackCenter'] || new google.maps.LatLng(0, 0));\n        });\n    }\n  }\n\n  openInfoWindow(id: string, anchor: google.maps.MVCObject) {\n    this.infoWindows[id].open(anchor);\n  }\n\n  closeInfoWindow(id: string) {\n    // if infoWindow for id exists, close the infoWindow\n    if (this.infoWindows[id])\n      this.infoWindows[id].close();\n  }\n\n  ngOnDestroy() {\n    this.inputChanges$.complete();\n    if (this.el && !this.initializeMapAfterDisplayed) {\n      this.nguiMap.clearObjectEvents(OUTPUTS, this, 'map');\n    }\n    if (this.apiLoaderSub) {\n      this.apiLoaderSub.unsubscribe();\n    }\n  }\n\n  // map.markers, map.circles, map.heatmapLayers.. etc\n  addToMapObjectGroup(mapObjectName: string, mapObject: any) {\n    let groupName = toCamelCase(mapObjectName.toLowerCase()) + 's'; // e.g. markers\n    this.map[groupName] = this.map[groupName] || [];\n    this.map[groupName].push(mapObject);\n  }\n\n  removeFromMapObjectGroup(mapObjectName: string, mapObject: any) {\n    let groupName = toCamelCase(mapObjectName.toLowerCase()) + 's'; // e.g. markers\n    if (this.map && this.map[groupName]) {\n      let index = this.map[groupName].indexOf(mapObject);\n\n      (index > -1) && this.map[groupName].splice(index, 1);\n    }\n  }\n}\n","import { Directive } from '@angular/core';\n\nimport { BaseMapDirective } from './base-map-directive';\nimport { NguiMapComponent } from '../components/ngui-map.component';\n\nconst INPUTS = [];\nconst OUTPUTS = [ ];\n\n@Directive({\n  selector: 'ngui-map > bicycling-layer',\n  inputs: INPUTS,\n  outputs: OUTPUTS,\n})\nexport class BicyclingLayer extends BaseMapDirective {\n  // declare INPUTS for AOT compiler\n\n\n  // declare OUTPUTS for AOT compiler\n\n\n  constructor(nguiMapComp: NguiMapComponent) {\n    super(nguiMapComp, 'BicyclingLayer', INPUTS, OUTPUTS);\n  }\n}","import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  SimpleChanges,\n  ViewChild, ViewContainerRef,\n  Output, OnInit, OnChanges, OnDestroy\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { debounceTime, tap } from 'rxjs/operators';\nimport { NguiMap } from '../services/ngui-map';\nimport { NguiMapComponent } from './ngui-map.component';\n\nconst INPUTS = [\n  'content', 'disableAutoPan', 'maxWidth', 'pixelOffset', 'position', 'zIndex', 'options'\n];\nconst OUTPUTS = [\n  'closeclick', 'content_changed', 'domready', 'position_changed', 'zindex_changed'\n];\n\n@Component({\n  selector: 'ngui-map > info-window',\n  inputs: INPUTS,\n  outputs: OUTPUTS,\n  template: `<div #template><ng-content></ng-content></div>`,\n})\nexport class InfoWindow implements OnInit, OnChanges, OnDestroy {\n  // declare INPUTS for AOT compiler\n  public content: any; // generated by ngc-pre-compiler.js\n  public disableAutoPan: any; // generated by ngc-pre-compiler.js\n  public maxWidth: any; // generated by ngc-pre-compiler.js\n  public pixelOffset: any; // generated by ngc-pre-compiler.js\n  public position: any; // generated by ngc-pre-compiler.js\n  public zIndex: any; // generated by ngc-pre-compiler.js\n  public options: any; // generated by ngc-pre-compiler.js\n\n  // declare OUTPUTS for AOT compiler\n  public closeclick: any; // generated by ngc-pre-compiler.js\n  public content_changed: any; // generated by ngc-pre-compiler.js\n  public domready: any; // generated by ngc-pre-compiler.js\n  public position_changed: any; // generated by ngc-pre-compiler.js\n  public zindex_changed: any; // generated by ngc-pre-compiler.js\n\n  @Output() initialized$: EventEmitter<any> = new EventEmitter();\n\n  public infoWindow: google.maps.InfoWindow;\n  public objectOptions: google.maps.InfoWindowOptions = {};\n  public inputChanges$ = new Subject();\n  @ViewChild('template', {read: ViewContainerRef}) template: ViewContainerRef;\n\n  constructor(\n    private elementRef: ElementRef,\n    private nguiMap: NguiMap,\n    private nguiMapComponent: NguiMapComponent,\n  ) {\n    this.elementRef.nativeElement.style.display = 'none';\n    OUTPUTS.forEach(output => this[output] = new EventEmitter());\n  }\n\n  // Initialize this map object when map is ready\n  ngOnInit() {\n    if (this.nguiMapComponent.mapIdledOnce) { // map is ready already\n      this.initialize();\n    } else {\n      this.nguiMapComponent.mapReady$.subscribe(map => this.initialize());\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this.inputChanges$.next(changes);\n  }\n\n  // called when map is ready\n  initialize(): void {\n\n\n    this.objectOptions = this.nguiMapComponent.optionBuilder.googlizeAllInputs(INPUTS, this);\n    this.infoWindow = new google.maps.InfoWindow(this.objectOptions);\n    this.infoWindow['mapObjectName'] = 'InfoWindow';\n\n\n    // register infoWindow ids to NguiMap, so that it can be opened by id\n    if (this.elementRef.nativeElement.id) {\n      this.nguiMapComponent.infoWindows[this.elementRef.nativeElement.id] = this;\n    } else {\n      console.error('An InfoWindow must have an id. e.g. id=\"detail\"');\n    }\n\n    // set google events listeners and emits to this outputs listeners\n    this.nguiMap.setObjectEvents(OUTPUTS, this, 'infoWindow');\n\n    // update object when input changes\n    this.inputChanges$.pipe(\n      debounceTime(1000),\n      tap((changes: SimpleChanges) => this.nguiMap.updateGoogleObject(this.infoWindow, changes))\n    ).subscribe();\n\n    this.nguiMapComponent.addToMapObjectGroup('InfoWindow', this.infoWindow);\n    this.initialized$.emit(this.infoWindow);\n  }\n\n  open(anchor: google.maps.MVCObject) {\n    // set content and open it\n    this.infoWindow.setContent(this.template.element.nativeElement);\n    this.infoWindow.open(this.nguiMapComponent.map, anchor);\n  }\n  close() {\n    // check if infoWindow exists, and closes it\n    if (this.infoWindow)\n      this.infoWindow.close();\n  }\n  ngOnDestroy() {\n    this.inputChanges$.complete();\n    if (this.infoWindow) {\n      this.nguiMap.clearObjectEvents(OUTPUTS, this, 'infoWindow');\n      delete this.infoWindow;\n    }\n  }\n}\n","import {\r\n  Component,\r\n  ElementRef,\r\n  Output,\r\n  EventEmitter,\r\n  SimpleChanges, OnInit, OnDestroy, OnChanges,\r\n} from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { debounceTime, tap } from 'rxjs/operators';\r\n\r\nimport { NguiMap } from '../services/ngui-map';\r\nimport { NguiMapComponent } from './ngui-map.component';\r\n\r\nconst INPUTS = [\r\n  'position'\r\n];\r\n// to avoid DOM event conflicts map_*\r\nconst OUTPUTS = [\r\n  'animationChanged', 'click', 'clickableChanged', 'cursorChanged', 'dblclick', 'drag', 'dragend', 'draggableChanged',\r\n  'dragstart', 'flatChanged', 'iconChanged', 'mousedown', 'mouseout', 'mouseover', 'mouseup', 'positionChanged', 'rightclick',\r\n  'shapeChanged', 'titleChanged', 'visibleChanged', 'zindexChanged',\r\n  'map_click', 'map_mouseover', 'map_mouseout', 'map_mouseup', 'map_mousedown', 'map_drag', 'map_dragend'\r\n];\r\n\r\n/**\r\n * Wrapper to a create extend OverlayView at runtime, only after google maps is loaded.\r\n * Otherwise throws a google is unknown error.\r\n */\r\nfunction getCustomMarkerOverlayView(htmlEl: HTMLElement, position: any) {\r\n\r\n  class CustomMarkerOverlayView extends google.maps.OverlayView {\r\n\r\n    private htmlEl: HTMLElement;\r\n    private position: any;\r\n    private zIndex: string;\r\n    private visible: boolean = true;\r\n\r\n    constructor(htmlEl: HTMLElement, position: any) {\r\n      super();\r\n      this.htmlEl = htmlEl;\r\n      this.position = position;\r\n    }\r\n\r\n    onAdd(): void {\r\n      this.getPanes().overlayMouseTarget.appendChild(this.htmlEl);\r\n\r\n      // required for correct display inside google maps container\r\n      this.htmlEl.style.position = 'absolute';\r\n    }\r\n\r\n    draw(): void {\r\n      this.setPosition(this.position);\r\n      this.setZIndex(this.zIndex);\r\n      this.setVisible(this.visible);\r\n    }\r\n\r\n    onRemove(): void {\r\n      //\r\n    }\r\n\r\n    getPosition() {\r\n      return this.position;\r\n    }\r\n\r\n    setPosition = (position?: any) => {\r\n      this.htmlEl.style.visibility = 'hidden';\r\n\r\n      if (position.constructor.name === 'Array') {\r\n        this.position = new google.maps.LatLng(position[0], position[1]);\r\n      } else if (typeof position === 'string') {\r\n        let geocoder = new google.maps.Geocoder();\r\n\r\n        geocoder.geocode({address: position}, (results, status) => {\r\n          if (status === google.maps.GeocoderStatus.OK) {\r\n\r\n            this.setPosition(results[0].geometry.location);\r\n          } else {\r\n\r\n          }\r\n        });\r\n      } else if (position && typeof position.lng === 'function') {\r\n        this.position = position;\r\n      }\r\n\r\n      if (this.getProjection() && typeof this.position.lng === 'function') {\r\n        let positionOnMap = () => {\r\n          let projection = this.getProjection();\r\n          if (!projection) {\r\n            return;\r\n          }\r\n          let posPixel = projection.fromLatLngToDivPixel(this.position);\r\n          let x = Math.round(posPixel.x - (this.htmlEl.offsetWidth / 2));\r\n          let y = Math.round(posPixel.y - this.htmlEl.offsetHeight / 2);\r\n          this.htmlEl.style.left = x + 'px';\r\n          this.htmlEl.style.top = y + 'px';\r\n          this.htmlEl.style.visibility = 'visible';\r\n        };\r\n\r\n        if (this.htmlEl.offsetWidth && this.htmlEl.offsetHeight) {\r\n          positionOnMap();\r\n        } else {\r\n          setTimeout(() => positionOnMap());\r\n        }\r\n      }\r\n    }\r\n\r\n    setZIndex(zIndex: string): void {\r\n      zIndex && (this.zIndex = zIndex); /* jshint ignore:line */\r\n      this.htmlEl.style.zIndex = this.zIndex;\r\n    }\r\n\r\n    setVisible(visible: boolean) {\r\n      this.htmlEl.style.display = visible ? 'inline-block' : 'none';\r\n      this.visible = visible;\r\n    }\r\n  }\r\n\r\n  return new CustomMarkerOverlayView(htmlEl, position);\r\n}\r\n\r\n@Component({\r\n  selector: 'ngui-map > custom-marker',\r\n  inputs: INPUTS,\r\n  outputs: OUTPUTS,\r\n  template: `\r\n    <ng-content></ng-content>\r\n  `,\r\n})\r\n\r\nexport class CustomMarker implements OnInit, OnDestroy, OnChanges {\n  // declare INPUTS for AOT compiler\n  public position: any; // generated by ngc-pre-compiler.js\n\n  // declare OUTPUTS for AOT compiler\n  public animationChanged: any; // generated by ngc-pre-compiler.js\n  public click: any; // generated by ngc-pre-compiler.js\n  public clickableChanged: any; // generated by ngc-pre-compiler.js\n  public cursorChanged: any; // generated by ngc-pre-compiler.js\n  public dblclick: any; // generated by ngc-pre-compiler.js\n  public drag: any; // generated by ngc-pre-compiler.js\n  public dragend: any; // generated by ngc-pre-compiler.js\n  public draggableChanged: any; // generated by ngc-pre-compiler.js\n  public dragstart: any; // generated by ngc-pre-compiler.js\n  public flatChanged: any; // generated by ngc-pre-compiler.js\n  public iconChanged: any; // generated by ngc-pre-compiler.js\n  public mousedown: any; // generated by ngc-pre-compiler.js\n  public mouseout: any; // generated by ngc-pre-compiler.js\n  public mouseover: any; // generated by ngc-pre-compiler.js\n  public mouseup: any; // generated by ngc-pre-compiler.js\n  public positionChanged: any; // generated by ngc-pre-compiler.js\n  public rightclick: any; // generated by ngc-pre-compiler.js\n  public shapeChanged: any; // generated by ngc-pre-compiler.js\n  public titleChanged: any; // generated by ngc-pre-compiler.js\n  public visibleChanged: any; // generated by ngc-pre-compiler.js\n  public zindexChanged: any; // generated by ngc-pre-compiler.js\n  public map_click: any; // generated by ngc-pre-compiler.js\n  public map_mouseover: any; // generated by ngc-pre-compiler.js\n  public map_mouseout: any; // generated by ngc-pre-compiler.js\n  public map_mouseup: any; // generated by ngc-pre-compiler.js\n  public map_mousedown: any; // generated by ngc-pre-compiler.js\n  public map_drag: any; // generated by ngc-pre-compiler.js\n  public map_dragend: any; // generated by ngc-pre-compiler.js\n\r\n  @Output() initialized$: EventEmitter<any> = new EventEmitter();\r\n\r\n  public inputChanges$ = new Subject();\r\n\r\n  private el: HTMLElement;\r\n  private mapObject: any;\r\n\r\n  constructor(private nguiMapComponent: NguiMapComponent,\r\n              private elementRef: ElementRef,\r\n              private nguiMap: NguiMap) {\r\n    this.elementRef.nativeElement.style.display = 'none';\r\n    OUTPUTS.forEach(output => this[output] = new EventEmitter());\r\n  }\r\n\r\n  // Initialize this map object when map is ready\r\n  ngOnInit() {\r\n    if (this.nguiMapComponent.mapIdledOnce) { // map is ready already\r\n      this.initialize();\r\n    } else {\r\n      this.nguiMapComponent.mapReady$.subscribe(map => this.initialize());\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    this.inputChanges$.next(changes);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.inputChanges$.complete();\r\n    this.nguiMapComponent.removeFromMapObjectGroup('CustomMarker', this.mapObject);\r\n\r\n    if (this.mapObject) {\r\n      this.nguiMap.clearObjectEvents(OUTPUTS, this, 'mapObject');\r\n    }\r\n  }\r\n\r\n  private initialize(): void {\r\n\r\n    this.el = this.elementRef.nativeElement;\r\n\r\n    this.mapObject = getCustomMarkerOverlayView(this.el, this['position']);\r\n    this.mapObject.setMap(this.nguiMapComponent.map);\r\n\r\n    // set google events listeners and emits to this outputs listeners\r\n    this.nguiMap.setObjectEvents(OUTPUTS, this, 'mapObject');\r\n\r\n    // update object when input changes\r\n    this.inputChanges$.pipe(\r\n      debounceTime(1000),\r\n      tap((changes: SimpleChanges) => this.nguiMap.updateGoogleObject(this.mapObject, changes)),\r\n    ).subscribe();\r\n\r\n    this.nguiMapComponent.addToMapObjectGroup('CustomMarker', this.mapObject);\r\n    this.initialized$.emit(this.mapObject);\r\n  }\r\n\r\n}\r\n","import { Directive } from '@angular/core';\n\nimport { BaseMapDirective } from './base-map-directive';\nimport { NguiMapComponent } from '../components/ngui-map.component';\n\nconst INPUTS = [\n  'center', 'clickable', 'draggable', 'editable', 'fillColor', 'fillOpacity', 'map', 'radius',\n  'strokeColor', 'strokeOpacity', 'strokePosition', 'strokeWeight', 'visible', 'zIndex', 'options',\n  // ngui-map specific inputs\n  'geoFallbackCenter'\n];\nconst OUTPUTS = [\n  'centerChanged', 'click', 'dblclick', 'drag', 'dragend', 'dragstart',\n  'mousedown', 'mousemove', 'mouseout', 'mouseover', 'mouseup', 'radiusChanged', 'rightclick',\n];\n\n@Directive({\n  selector: 'ngui-map>circle, ngui-map>map-circle',\n  inputs: INPUTS,\n  outputs: OUTPUTS,\n})\nexport class Circle extends BaseMapDirective {\n  // declare INPUTS for AOT compiler\n  public center: any; // generated by ngc-pre-compiler.js\n  public clickable: any; // generated by ngc-pre-compiler.js\n  public draggable: any; // generated by ngc-pre-compiler.js\n  public editable: any; // generated by ngc-pre-compiler.js\n  public fillColor: any; // generated by ngc-pre-compiler.js\n  public fillOpacity: any; // generated by ngc-pre-compiler.js\n  public map: any; // generated by ngc-pre-compiler.js\n  public radius: any; // generated by ngc-pre-compiler.js\n  public strokeColor: any; // generated by ngc-pre-compiler.js\n  public strokeOpacity: any; // generated by ngc-pre-compiler.js\n  public strokePosition: any; // generated by ngc-pre-compiler.js\n  public strokeWeight: any; // generated by ngc-pre-compiler.js\n  public visible: any; // generated by ngc-pre-compiler.js\n  public zIndex: any; // generated by ngc-pre-compiler.js\n  public options: any; // generated by ngc-pre-compiler.js\n  public geoFallbackCenter: any; // generated by ngc-pre-compiler.js\n\n  // declare OUTPUTS for AOT compiler\n  public centerChanged: any; // generated by ngc-pre-compiler.js\n  public click: any; // generated by ngc-pre-compiler.js\n  public dblclick: any; // generated by ngc-pre-compiler.js\n  public drag: any; // generated by ngc-pre-compiler.js\n  public dragend: any; // generated by ngc-pre-compiler.js\n  public dragstart: any; // generated by ngc-pre-compiler.js\n  public mousedown: any; // generated by ngc-pre-compiler.js\n  public mousemove: any; // generated by ngc-pre-compiler.js\n  public mouseout: any; // generated by ngc-pre-compiler.js\n  public mouseover: any; // generated by ngc-pre-compiler.js\n  public mouseup: any; // generated by ngc-pre-compiler.js\n  public radiusChanged: any; // generated by ngc-pre-compiler.js\n  public rightclick: any; // generated by ngc-pre-compiler.js\n\n  public mapObject: google.maps.Circle;\n  public objectOptions: google.maps.CircleOptions = <google.maps.CircleOptions>{};\n\n  constructor(private nguiMapComp: NguiMapComponent) {\n    super(nguiMapComp, 'Circle', INPUTS, OUTPUTS);\n  }\n\n  initialize(): void {\n    super.initialize();\n    this.setCenter();\n  }\n\n  setCenter(): void {\n    if (!this['center']) {\n      this._subscriptions.push(this.nguiMapComp.geolocation.getCurrentPosition().subscribe(\n        center => {\n\n          let latLng = new google.maps.LatLng(center.coords.latitude, center.coords.longitude);\n          this.mapObject.setCenter(latLng);\n        },\n        error => {\n          console.error('ngui-map, error in finding the current position');\n          this.mapObject.setCenter(this.objectOptions['geoFallbackCenter'] || new google.maps.LatLng(0, 0));\n        }\n      ));\n    } else if (typeof this['center'] === 'string') {\n      this._subscriptions.push(this.nguiMapComp.geoCoder.geocode({address: this['center']}).subscribe(\n        results => {\n\n          this.mapObject.setCenter(results[0].geometry.location);\n        },\n        error => {\n          console.error('ngui-map, error in finding location from', this['center']);\n          this.mapObject.setCenter(this.objectOptions['geoFallbackCenter'] || new google.maps.LatLng(0, 0));\n        }\n      ));\n    }\n  }\n}\n","import { Directive } from '@angular/core';\n\nimport { BaseMapDirective } from './base-map-directive';\nimport { NguiMapComponent } from '../components/ngui-map.component';\n\nconst INPUTS = ['controlPosition', 'controls', 'drawingMode', 'featureFactory', 'style', 'geoJson', 'geoJsonUrl'];\nconst OUTPUTS = [\n  'addfeature', 'click', 'dblclick', 'mousedown', 'mouseout', 'mouseover',\n  'mouseup', 'removefeature', 'removeproperty', 'rightclick', 'setgeometry', 'setproperty'\n];\n\n@Directive({\n  selector: 'ngui-map > data-layer',\n  inputs: INPUTS,\n  outputs: OUTPUTS,\n})\nexport class DataLayer extends BaseMapDirective {\n  // declare INPUTS for AOT compiler\n  public controlPosition: any; // generated by ngc-pre-compiler.js\n  public controls: any; // generated by ngc-pre-compiler.js\n  public drawingMode: any; // generated by ngc-pre-compiler.js\n  public featureFactory: any; // generated by ngc-pre-compiler.js\n  public style: any; // generated by ngc-pre-compiler.js\n  public geoJson: any; // generated by ngc-pre-compiler.js\n  public geoJsonUrl: any; // generated by ngc-pre-compiler.js\n\n  // declare OUTPUTS for AOT compiler\n  public addfeature: any; // generated by ngc-pre-compiler.js\n  public click: any; // generated by ngc-pre-compiler.js\n  public dblclick: any; // generated by ngc-pre-compiler.js\n  public mousedown: any; // generated by ngc-pre-compiler.js\n  public mouseout: any; // generated by ngc-pre-compiler.js\n  public mouseover: any; // generated by ngc-pre-compiler.js\n  public mouseup: any; // generated by ngc-pre-compiler.js\n  public removefeature: any; // generated by ngc-pre-compiler.js\n  public removeproperty: any; // generated by ngc-pre-compiler.js\n  public rightclick: any; // generated by ngc-pre-compiler.js\n  public setgeometry: any; // generated by ngc-pre-compiler.js\n  public setproperty: any; // generated by ngc-pre-compiler.js\n\n  constructor(nguiMapComponent: NguiMapComponent) {\n    super(nguiMapComponent, 'Data', INPUTS, OUTPUTS);\n  }\n\n  // only called when map is ready\n  initialize(): void {\n    if (this['geoJson']) {\n      // addGeoJson from an object\n\n      this.nguiMapComponent.map.data.addGeoJson(this['geoJson']);\n    } else if (this['geoJsonUrl']) {\n      // loadGeoJson from a URL\n\n      this.nguiMapComponent.map.data.loadGeoJson(this['geoJsonUrl']);\n    }\n    else {\n      this.objectOptions = this.optionBuilder.googlizeAllInputs(this.inputs, this);\n\n      this.nguiMapComponent.map.data.add(this.objectOptions);\n    }\n\n    // unlike others, data belongs to map. e.g., map.data.loadGeoJson(), map.data.add()\n    this.mapObject = this.nguiMapComponent.map.data;\n\n    // set google events listeners and emits to this outputs listeners\n    this.nguiMap.setObjectEvents(this.outputs, this, 'mapObject');\n\n    this.nguiMapComponent.addToMapObjectGroup(this.mapObjectName, this.mapObject);\n    this.initialized$.emit(this.mapObject);\n  }\n}","import { Input, Directive, SimpleChanges, OnChanges, OnDestroy } from '@angular/core';\n\nimport { BaseMapDirective } from './base-map-directive';\nimport { NguiMapComponent } from '../components/ngui-map.component';\nimport { NavigatorGeolocation } from '../services/navigator-geolocation';\n\nconst INPUTS = [\n  'directions', 'draggable', 'hideRouteList', 'infoWindow', 'panel', 'markerOptions',\n  'polylineOptions', 'preserveViewport', 'routeIndex', 'suppressBicyclingLayer',\n  'suppressInfoWindows', 'suppressMarkers', 'suppressPolylines'\n];\nconst OUTPUTS = ['directions_changed'];\n\n@Directive({\n  selector: 'ngui-map > directions-renderer',\n  inputs: INPUTS,\n  outputs: OUTPUTS,\n})\nexport class DirectionsRenderer extends BaseMapDirective implements OnChanges, OnDestroy {\n  // declare INPUTS for AOT compiler\n  public directions: any; // generated by ngc-pre-compiler.js\n  public draggable: any; // generated by ngc-pre-compiler.js\n  public hideRouteList: any; // generated by ngc-pre-compiler.js\n  public infoWindow: any; // generated by ngc-pre-compiler.js\n  public panel: any; // generated by ngc-pre-compiler.js\n  public markerOptions: any; // generated by ngc-pre-compiler.js\n  public polylineOptions: any; // generated by ngc-pre-compiler.js\n  public preserveViewport: any; // generated by ngc-pre-compiler.js\n  public routeIndex: any; // generated by ngc-pre-compiler.js\n  public suppressBicyclingLayer: any; // generated by ngc-pre-compiler.js\n  public suppressInfoWindows: any; // generated by ngc-pre-compiler.js\n  public suppressMarkers: any; // generated by ngc-pre-compiler.js\n  public suppressPolylines: any; // generated by ngc-pre-compiler.js\n\n  // declare OUTPUTS for AOT compiler\n  public directions_changed: any; // generated by ngc-pre-compiler.js\n\n  // tslint:disable-next-line\n  @Input('directions-request') directionsRequest: google.maps.DirectionsRequest;\n\n  directionsService: google.maps.DirectionsService;\n  directionsRenderer: google.maps.DirectionsRenderer;\n\n  constructor(\n    nguiMapComponent: NguiMapComponent,\n    public geolocation: NavigatorGeolocation\n  ) {\n    super(nguiMapComponent, 'DirectionsRenderer', INPUTS, OUTPUTS);\n  }\n\n  // only called when map is ready\n  initialize(): void {\n    this.objectOptions = this.optionBuilder.googlizeAllInputs(this.inputs, this);\n    if (typeof this.objectOptions['panel'] === 'string') { // find a Node for panel\n      this.objectOptions['panel'] = document.querySelector(this.objectOptions['panel']);\n    }\n\n\n\n    this.directionsService = new google.maps.DirectionsService();\n    this.directionsRenderer = new google.maps.DirectionsRenderer(this.objectOptions);\n\n    this.directionsRenderer.setMap(this.nguiMapComponent.map);\n\n    // set google events listeners and emidirectionsRenderer to this outputs listeners\n    this.showDirections(this.directionsRequest);\n\n    this.nguiMap.setObjectEvents(this.outputs, this, 'directionsRenderer');\n\n    this.nguiMapComponent.addToMapObjectGroup(this.mapObjectName, this.mapObject);\n    this.initialized$.emit(this.directionsRenderer);\n  }\n\n\n  ngOnChanges(changes: SimpleChanges) {\n    let newOptions = {};\n    for (let key in changes) {\n      if (this.inputs.indexOf(key) !== -1) {\n        newOptions[key] = this.optionBuilder.googlize(changes[key].currentValue);\n      }\n    }\n    if (changes['directionsRequest'] && this.directionsRenderer) {\n      this.directionsService && this.showDirections(this.directionsRequest);\n    }\n  }\n\n  showDirections(directionsRequest: google.maps.DirectionsRequest) {\n    this.directionsService.route(directionsRequest,\n      (response: any, status: any) =>  {\n        // in some-case the callback is called during destroy component,\n        // we should make sure directionsRenderer is still defined (cancelling `route` callback is not possible).\n        if (!this.directionsRenderer) {\n          return;\n        }\n\n        if (status === google.maps.DirectionsStatus.OK) {\n          this.directionsRenderer.setDirections(response);\n        } else {\n          console.error('Directions request failed due to ' + status);\n        }\n      }\n    );\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this.nguiMap.clearObjectEvents(this.outputs, this, 'directionsRenderer');\n  }\n}","import { Directive } from '@angular/core';\n\nimport { BaseMapDirective } from './base-map-directive';\nimport { NguiMapComponent } from '../components/ngui-map.component';\n\nconst INPUTS = [\n  'options',\n  'circleOptions', 'drawingControl', 'drawingControlOptions', 'drawingMode',\n  'map', 'markerOptions', 'polygonOptions', 'polylineOptions', 'rectangleOptions'\n];\nconst OUTPUTS = [\n  'circlecomplete', 'markercomplete', 'overlaycomplete',\n  'polygoncomplete', 'polylinecomplete', 'rectanglecomplete'\n];\n\n@Directive({\n  selector: 'ngui-map > drawing-manager',\n  inputs: INPUTS,\n  outputs: OUTPUTS,\n})\nexport class DrawingManager extends BaseMapDirective {\n  // declare INPUTS for AOT compiler\n  public options: any; // generated by ngc-pre-compiler.js\n  public circleOptions: any; // generated by ngc-pre-compiler.js\n  public drawingControl: any; // generated by ngc-pre-compiler.js\n  public drawingControlOptions: any; // generated by ngc-pre-compiler.js\n  public drawingMode: any; // generated by ngc-pre-compiler.js\n  public map: any; // generated by ngc-pre-compiler.js\n  public markerOptions: any; // generated by ngc-pre-compiler.js\n  public polygonOptions: any; // generated by ngc-pre-compiler.js\n  public polylineOptions: any; // generated by ngc-pre-compiler.js\n  public rectangleOptions: any; // generated by ngc-pre-compiler.js\n\n  // declare OUTPUTS for AOT compiler\n  public circlecomplete: any; // generated by ngc-pre-compiler.js\n  public markercomplete: any; // generated by ngc-pre-compiler.js\n  public overlaycomplete: any; // generated by ngc-pre-compiler.js\n  public polygoncomplete: any; // generated by ngc-pre-compiler.js\n  public polylinecomplete: any; // generated by ngc-pre-compiler.js\n  public rectanglecomplete: any; // generated by ngc-pre-compiler.js\n\n  constructor(nguiMapComp: NguiMapComponent) {\n    super(nguiMapComp, 'DrawingManager', INPUTS, OUTPUTS);\n    this.libraryName = 'drawing';\n  }\n}\n","import { Directive } from '@angular/core';\n\nimport { BaseMapDirective } from './base-map-directive';\nimport { NguiMapComponent } from '../components/ngui-map.component';\n\nconst INPUTS = [ 'url', 'bounds', 'clickable', 'opacity' ];\nconst OUTPUTS = [ 'click', 'dblclick' ];\n\n@Directive({\n  selector: 'ngui-map > ground-overlay',\n  inputs: INPUTS,\n  outputs: OUTPUTS,\n})\nexport class GroundOverlay extends BaseMapDirective {\n  // declare INPUTS for AOT compiler\n  public url: any; // generated by ngc-pre-compiler.js\n  public bounds: any; // generated by ngc-pre-compiler.js\n  public clickable: any; // generated by ngc-pre-compiler.js\n  public opacity: any; // generated by ngc-pre-compiler.js\n\n  // declare OUTPUTS for AOT compiler\n  public click: any; // generated by ngc-pre-compiler.js\n  public dblclick: any; // generated by ngc-pre-compiler.js\n\n  public mapObject: google.maps.GroundOverlay;\n  public objectOptions: google.maps.GroundOverlayOptions = <google.maps.GroundOverlayOptions>{};\n\n  constructor(nguiMapComp: NguiMapComponent) {\n    super(nguiMapComp, 'GroundOverlay', INPUTS, OUTPUTS);\n  }\n\n  // re-declaring initialize function. called when map is ready\n  initialize(): void {\n    // url, bounds are not the options of GroundOverlay\n    this.objectOptions = this.optionBuilder.googlizeAllInputs(['clickable', 'opacity'], this);\n\n\n    // noinspection TypeScriptUnresolvedFunction\n    this.mapObject = new google.maps.GroundOverlay(this['url'], this['bounds'], this.objectOptions);\n    this.mapObject.setMap(this.nguiMapComponent.map);\n    this.mapObject['mapObjectName'] = this.mapObjectName;\n\n    // set google events listeners and emits to this outputs listeners\n    this.nguiMap.setObjectEvents(this.outputs, this, 'mapObject');\n\n    this.nguiMapComponent.addToMapObjectGroup(this.mapObjectName, this.mapObject);\n    this.initialized$.emit(this.mapObject);\n  }\n}\n","import { Directive } from '@angular/core';\n\nimport { BaseMapDirective } from './base-map-directive';\nimport { NguiMapComponent } from '../components/ngui-map.component';\n\nconst INPUTS = [ 'data', 'dissipating', 'gradient', 'maxIntensity', 'opacity', 'radius', 'options' ];\nconst OUTPUTS = [];\n\n@Directive({\n  selector: 'ngui-map > heatmap-layer',\n  inputs: INPUTS,\n  outputs: OUTPUTS,\n})\nexport class HeatmapLayer extends BaseMapDirective {\n  // declare INPUTS for AOT compiler\n  public data: any; // generated by ngc-pre-compiler.js\n  public dissipating: any; // generated by ngc-pre-compiler.js\n  public gradient: any; // generated by ngc-pre-compiler.js\n  public maxIntensity: any; // generated by ngc-pre-compiler.js\n  public opacity: any; // generated by ngc-pre-compiler.js\n  public radius: any; // generated by ngc-pre-compiler.js\n  public options: any; // generated by ngc-pre-compiler.js\n\n  // declare OUTPUTS for AOT compiler\n\n\n  public libraryName = 'visualization';\n\n  constructor(nguiMapComp: NguiMapComponent) {\n    super(nguiMapComp, 'HeatmapLayer', INPUTS, OUTPUTS);\n  }\n}\n","import { Directive } from '@angular/core';\n\nimport { BaseMapDirective } from './base-map-directive';\nimport { NguiMapComponent } from '../components/ngui-map.component';\n\nconst INPUTS = [ 'clickable', 'preserveViewport', 'screenOverlays', 'suppressInfoWindows', 'url', 'zIndex', 'options' ];\nconst OUTPUTS = [ 'click', 'defaultviewport_changed', 'status_changed' ];\n\n@Directive({\n  selector: 'ngui-map > kml-layer',\n  inputs: INPUTS,\n  outputs: OUTPUTS,\n})\nexport class KmlLayer extends BaseMapDirective {\n  // declare INPUTS for AOT compiler\n  public clickable: any; // generated by ngc-pre-compiler.js\n  public preserveViewport: any; // generated by ngc-pre-compiler.js\n  public screenOverlays: any; // generated by ngc-pre-compiler.js\n  public suppressInfoWindows: any; // generated by ngc-pre-compiler.js\n  public url: any; // generated by ngc-pre-compiler.js\n  public zIndex: any; // generated by ngc-pre-compiler.js\n  public options: any; // generated by ngc-pre-compiler.js\n\n  // declare OUTPUTS for AOT compiler\n  public click: any; // generated by ngc-pre-compiler.js\n  public defaultviewport_changed: any; // generated by ngc-pre-compiler.js\n  public status_changed: any; // generated by ngc-pre-compiler.js\n\n  constructor(nguiMapComp: NguiMapComponent) {\n    super(nguiMapComp, 'KmlLayer', INPUTS, OUTPUTS);\n  }\n}\n","import {Directive, OnInit} from '@angular/core';\n\nimport { BaseMapDirective } from './base-map-directive';\nimport { NguiMapComponent } from '../components/ngui-map.component';\n\nconst INPUTS = [\n  'anchorPoint', 'animation', 'clickable', 'cursor', 'draggable', 'icon', 'label', 'opacity',\n  'optimized', 'place', 'position', 'shape', 'title', 'visible', 'zIndex', 'options',\n  // ngui-map specific inputs\n  'geoFallbackPosition'\n];\nconst OUTPUTS = [\n  'animationChanged', 'click', 'clickableChanged', 'cursorChanged', 'dblclick', 'drag', 'dragend', 'draggableChanged',\n  'dragstart', 'flatChanged', 'iconChanged', 'mousedown', 'mouseout', 'mouseover', 'mouseup', 'positionChanged', 'rightclick',\n  'shapeChanged', 'titleChanged', 'visibleChanged', 'zindexChanged'\n];\n\n@Directive({\n  selector: 'ngui-map > marker',\n  inputs: INPUTS,\n  outputs: OUTPUTS,\n})\nexport class Marker extends BaseMapDirective implements OnInit {\n  // declare INPUTS for AOT compiler\n  public anchorPoint: any; // generated by ngc-pre-compiler.js\n  public animation: any; // generated by ngc-pre-compiler.js\n  public clickable: any; // generated by ngc-pre-compiler.js\n  public cursor: any; // generated by ngc-pre-compiler.js\n  public draggable: any; // generated by ngc-pre-compiler.js\n  public icon: any; // generated by ngc-pre-compiler.js\n  public label: any; // generated by ngc-pre-compiler.js\n  public opacity: any; // generated by ngc-pre-compiler.js\n  public optimized: any; // generated by ngc-pre-compiler.js\n  public place: any; // generated by ngc-pre-compiler.js\n  public position: any; // generated by ngc-pre-compiler.js\n  public shape: any; // generated by ngc-pre-compiler.js\n  public title: any; // generated by ngc-pre-compiler.js\n  public visible: any; // generated by ngc-pre-compiler.js\n  public zIndex: any; // generated by ngc-pre-compiler.js\n  public options: any; // generated by ngc-pre-compiler.js\n  public geoFallbackPosition: any; // generated by ngc-pre-compiler.js\n\n  // declare OUTPUTS for AOT compiler\n  public animationChanged: any; // generated by ngc-pre-compiler.js\n  public click: any; // generated by ngc-pre-compiler.js\n  public clickableChanged: any; // generated by ngc-pre-compiler.js\n  public cursorChanged: any; // generated by ngc-pre-compiler.js\n  public dblclick: any; // generated by ngc-pre-compiler.js\n  public drag: any; // generated by ngc-pre-compiler.js\n  public dragend: any; // generated by ngc-pre-compiler.js\n  public draggableChanged: any; // generated by ngc-pre-compiler.js\n  public dragstart: any; // generated by ngc-pre-compiler.js\n  public flatChanged: any; // generated by ngc-pre-compiler.js\n  public iconChanged: any; // generated by ngc-pre-compiler.js\n  public mousedown: any; // generated by ngc-pre-compiler.js\n  public mouseout: any; // generated by ngc-pre-compiler.js\n  public mouseover: any; // generated by ngc-pre-compiler.js\n  public mouseup: any; // generated by ngc-pre-compiler.js\n  public positionChanged: any; // generated by ngc-pre-compiler.js\n  public rightclick: any; // generated by ngc-pre-compiler.js\n  public shapeChanged: any; // generated by ngc-pre-compiler.js\n  public titleChanged: any; // generated by ngc-pre-compiler.js\n  public visibleChanged: any; // generated by ngc-pre-compiler.js\n  public zindexChanged: any; // generated by ngc-pre-compiler.js\n\n  public mapObject: google.maps.Marker;\n  public objectOptions: google.maps.MarkerOptions = <google.maps.MarkerOptions>{};\n\n  constructor(private nguiMapComp: NguiMapComponent) {\n    super(nguiMapComp, 'Marker', INPUTS, OUTPUTS);\n\n  }\n\n  // Initialize this map object when map is ready\n  ngOnInit() {\n    if (this.nguiMapComponent.mapIdledOnce) { // map is ready already\n      this.initialize();\n    } else {\n      this.nguiMapComponent.mapReady$.subscribe(map => this.initialize());\n    }\n  }\n\n  initialize(): void {\n    super.initialize();\n    this.setPosition();\n  }\n\n  setPosition(): void {\n    if (!this['position']) {\n      this._subscriptions.push(this.nguiMapComp.geolocation.getCurrentPosition().subscribe(\n        position => {\n\n          let latLng = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);\n          this.mapObject.setPosition(latLng);\n        },\n        error => {\n          console.error('ngui-map, error finding the current location');\n          this.mapObject.setPosition(this.objectOptions['geoFallbackPosition'] || new google.maps.LatLng(0, 0));\n        }\n      ));\n    } else if (typeof this['position'] === 'string') {\n      this._subscriptions.push(this.nguiMapComp.geoCoder.geocode({address: this['position']}).subscribe(\n        results => {\n\n          this.mapObject.setPosition(results[0].geometry.location);\n        },\n        error => {\n          console.error('ngui-map, error finding the location from', this['position']);\n          this.mapObject.setPosition(this.objectOptions['geoFallbackPosition'] || new google.maps.LatLng(0, 0));\n        }\n      ));\n    }\n  }\n}\n","import {\n  Input,\n  Output,\n  Directive,\n  EventEmitter,\n  ElementRef,\n} from '@angular/core';\n\nimport { NgMapApiLoader } from '../services/api-loader';\nimport { OptionBuilder } from '../services/option-builder';\nimport { missingLibraryError } from '../services/util';\nimport { first } from 'rxjs/operators';\n\n@Directive({\n  selector: '[places-auto-complete]'\n})\nexport class PlacesAutoComplete {\n  @Input() bounds: any;\n  @Input() componentRestrictions: any;\n  @Input() types: string[];\n\n  @Output('place_changed') place_changed: EventEmitter<any> = new EventEmitter();\n  @Output() initialized$: EventEmitter<any> = new EventEmitter();\n\n  public objectOptions: any;\n  public autocomplete: google.maps.places.Autocomplete;\n\n  constructor(\n    public optionBuilder: OptionBuilder,\n    public elementRef: ElementRef,\n    public apiLoader: NgMapApiLoader,\n  ) {\n    apiLoader.load();\n    apiLoader.api$\n      .pipe(first())\n      .subscribe(() => this.initialize());\n  }\n\n  // only called when map is ready\n  initialize = (): void => {\n    this.objectOptions =\n      this.optionBuilder.googlizeAllInputs(['bounds', 'componentRestrictions', 'types'], this);\n\n\n    if (!google.maps.places) {\n      throw missingLibraryError('PlacesAutoComplete', 'places');\n    }\n\n    this.autocomplete = new google.maps.places.Autocomplete(\n      this.elementRef.nativeElement,\n      this.objectOptions\n    );\n\n\n    this.autocomplete.addListener('place_changed', place => {\n      this.place_changed.emit(this.autocomplete.getPlace());\n    });\n\n    this.initialized$.emit(this.autocomplete);\n  }\n}\n","import { Directive } from '@angular/core';\n\nimport { BaseMapDirective } from './base-map-directive';\nimport { NguiMapComponent } from '../components/ngui-map.component';\n\nconst INPUTS = [\n  'clickable', 'draggable', 'editable', 'fillColor', 'fillOpacity', 'geodesic', 'paths',\n  'strokeColor', 'strokeOpacity', 'strokePosition', 'strokeWeight', 'visible', 'zIndex', 'options',\n];\nconst OUTPUTS = [\n  'click', 'dblclick', 'drag', 'dragend', 'dragstart', 'mousedown',\n  'mousemove', 'mouseout', 'mouseover', 'mouseup', 'rightclick',\n];\n\n@Directive({\n  selector: 'ngui-map>polygon, ngui-map>map-polygon',\n  inputs: INPUTS,\n  outputs: OUTPUTS,\n})\nexport class Polygon extends BaseMapDirective {\n  // declare INPUTS for AOT compiler\n  public clickable: any; // generated by ngc-pre-compiler.js\n  public draggable: any; // generated by ngc-pre-compiler.js\n  public editable: any; // generated by ngc-pre-compiler.js\n  public fillColor: any; // generated by ngc-pre-compiler.js\n  public fillOpacity: any; // generated by ngc-pre-compiler.js\n  public geodesic: any; // generated by ngc-pre-compiler.js\n  public paths: any; // generated by ngc-pre-compiler.js\n  public strokeColor: any; // generated by ngc-pre-compiler.js\n  public strokeOpacity: any; // generated by ngc-pre-compiler.js\n  public strokePosition: any; // generated by ngc-pre-compiler.js\n  public strokeWeight: any; // generated by ngc-pre-compiler.js\n  public visible: any; // generated by ngc-pre-compiler.js\n  public zIndex: any; // generated by ngc-pre-compiler.js\n  public options: any; // generated by ngc-pre-compiler.js\n\n  // declare OUTPUTS for AOT compiler\n  public click: any; // generated by ngc-pre-compiler.js\n  public dblclick: any; // generated by ngc-pre-compiler.js\n  public drag: any; // generated by ngc-pre-compiler.js\n  public dragend: any; // generated by ngc-pre-compiler.js\n  public dragstart: any; // generated by ngc-pre-compiler.js\n  public mousedown: any; // generated by ngc-pre-compiler.js\n  public mousemove: any; // generated by ngc-pre-compiler.js\n  public mouseout: any; // generated by ngc-pre-compiler.js\n  public mouseover: any; // generated by ngc-pre-compiler.js\n  public mouseup: any; // generated by ngc-pre-compiler.js\n  public rightclick: any; // generated by ngc-pre-compiler.js\n\n  constructor(nguiMapComp: NguiMapComponent) {\n    super(nguiMapComp, 'Polygon', INPUTS, OUTPUTS);\n  }\n}\n","import { Directive } from '@angular/core';\n\nimport { BaseMapDirective } from './base-map-directive';\nimport { NguiMapComponent } from '../components/ngui-map.component';\n\nconst INPUTS = [\n  'clickable', 'draggable', 'editable', 'geodesic', 'icons', 'path', 'strokeColor',\n  'strokeOpacity', 'strokeWeight', 'visible', 'zIndex', 'options'\n];\nconst OUTPUTS = [\n  'click', 'dblclick', 'drag', 'dragend', 'dragstart', 'mousedown',\n  'mousemove', 'mouseout', 'mouseover', 'mouseup', 'rightclick'\n];\n\n@Directive({\n  selector: 'ngui-map > polyline',\n  inputs: INPUTS,\n  outputs: OUTPUTS,\n})\nexport class Polyline extends BaseMapDirective {\n  // declare INPUTS for AOT compiler\n  public clickable: any; // generated by ngc-pre-compiler.js\n  public draggable: any; // generated by ngc-pre-compiler.js\n  public editable: any; // generated by ngc-pre-compiler.js\n  public geodesic: any; // generated by ngc-pre-compiler.js\n  public icons: any; // generated by ngc-pre-compiler.js\n  public path: any; // generated by ngc-pre-compiler.js\n  public strokeColor: any; // generated by ngc-pre-compiler.js\n  public strokeOpacity: any; // generated by ngc-pre-compiler.js\n  public strokeWeight: any; // generated by ngc-pre-compiler.js\n  public visible: any; // generated by ngc-pre-compiler.js\n  public zIndex: any; // generated by ngc-pre-compiler.js\n  public options: any; // generated by ngc-pre-compiler.js\n\n  // declare OUTPUTS for AOT compiler\n  public click: any; // generated by ngc-pre-compiler.js\n  public dblclick: any; // generated by ngc-pre-compiler.js\n  public drag: any; // generated by ngc-pre-compiler.js\n  public dragend: any; // generated by ngc-pre-compiler.js\n  public dragstart: any; // generated by ngc-pre-compiler.js\n  public mousedown: any; // generated by ngc-pre-compiler.js\n  public mousemove: any; // generated by ngc-pre-compiler.js\n  public mouseout: any; // generated by ngc-pre-compiler.js\n  public mouseover: any; // generated by ngc-pre-compiler.js\n  public mouseup: any; // generated by ngc-pre-compiler.js\n  public rightclick: any; // generated by ngc-pre-compiler.js\n\n  constructor(nguiMapComp: NguiMapComponent) {\n    super(nguiMapComp, 'Polyline', INPUTS, OUTPUTS);\n  }\n}\n","import {Directive, OnDestroy} from '@angular/core';\n\nimport { BaseMapDirective } from './base-map-directive';\nimport { NguiMapComponent } from '../components/ngui-map.component';\n\nconst INPUTS = [\n  'selector', 'options',\n  'addressControl', 'addressControlOptions', 'clickToGo', 'disableDefaultUI', 'disableDoubleClickZoom',\n  'enableCloseButton', 'fullscreenControl', 'fullscreenControlOptions', 'imageDateControl', 'linksControl',\n  'motionTracking', 'motionTrackingControl', 'panControl', 'panControlOptions', 'pano',\n  'position', 'pov', 'scrollwheel', 'showRoadLabels', 'visible', 'zoomControl', 'zoomControlOptions'\n];\nconst OUTPUTS = [\n  'closeclick', 'pano_changed', 'position_changed', 'pov_changed', 'resize', 'status_changed',\n  'visible_changed', 'zoom_changed'\n];\n\n@Directive({\n  selector: 'ngui-map > street-view-panorama',\n  inputs: INPUTS,\n  outputs: OUTPUTS,\n})\nexport class StreetViewPanorama extends BaseMapDirective implements OnDestroy {\n  // declare INPUTS for AOT compiler\n  public selector: any; // generated by ngc-pre-compiler.js\n  public options: any; // generated by ngc-pre-compiler.js\n  public addressControl: any; // generated by ngc-pre-compiler.js\n  public addressControlOptions: any; // generated by ngc-pre-compiler.js\n  public clickToGo: any; // generated by ngc-pre-compiler.js\n  public disableDefaultUI: any; // generated by ngc-pre-compiler.js\n  public disableDoubleClickZoom: any; // generated by ngc-pre-compiler.js\n  public enableCloseButton: any; // generated by ngc-pre-compiler.js\n  public fullscreenControl: any; // generated by ngc-pre-compiler.js\n  public fullscreenControlOptions: any; // generated by ngc-pre-compiler.js\n  public imageDateControl: any; // generated by ngc-pre-compiler.js\n  public linksControl: any; // generated by ngc-pre-compiler.js\n  public motionTracking: any; // generated by ngc-pre-compiler.js\n  public motionTrackingControl: any; // generated by ngc-pre-compiler.js\n  public panControl: any; // generated by ngc-pre-compiler.js\n  public panControlOptions: any; // generated by ngc-pre-compiler.js\n  public pano: any; // generated by ngc-pre-compiler.js\n  public position: any; // generated by ngc-pre-compiler.js\n  public pov: any; // generated by ngc-pre-compiler.js\n  public scrollwheel: any; // generated by ngc-pre-compiler.js\n  public showRoadLabels: any; // generated by ngc-pre-compiler.js\n  public visible: any; // generated by ngc-pre-compiler.js\n  public zoomControl: any; // generated by ngc-pre-compiler.js\n  public zoomControlOptions: any; // generated by ngc-pre-compiler.js\n\n  // declare OUTPUTS for AOT compiler\n  public closeclick: any; // generated by ngc-pre-compiler.js\n  public pano_changed: any; // generated by ngc-pre-compiler.js\n  public position_changed: any; // generated by ngc-pre-compiler.js\n  public pov_changed: any; // generated by ngc-pre-compiler.js\n  public resize: any; // generated by ngc-pre-compiler.js\n  public status_changed: any; // generated by ngc-pre-compiler.js\n  public visible_changed: any; // generated by ngc-pre-compiler.js\n  public zoom_changed: any; // generated by ngc-pre-compiler.js\n\n  constructor(nguiMapComp: NguiMapComponent) {\n    super(nguiMapComp, 'StreetViewPanorama', INPUTS, OUTPUTS);\n  }\n\n  // only called when map is ready\n  initialize(): void {\n    this.objectOptions = this.optionBuilder.googlizeAllInputs(this.inputs, this);\n\n\n    let element: HTMLElement;\n    if (this.objectOptions.selector) {\n      // noinspection TypeScriptValidateTypes\n      element = document.querySelector(this['selector']);\n      delete this.objectOptions.selector;\n    } else {\n      element = this.nguiMapComponent.el;\n    }\n\n    // will be set after geocoded\n    typeof this.objectOptions.position === 'string' && (delete this.objectOptions.position);\n\n    this.mapObject = new google.maps[this.mapObjectName](element, this.objectOptions);\n    this.mapObject['mapObjectName'] = this.mapObjectName;\n    this.mapObject['nguiMapComponent'] = this.nguiMapComponent;\n\n    // set google events listeners and emits to this outputs listeners\n    this.nguiMap.setObjectEvents(this.outputs, this, 'mapObject');\n\n    this.nguiMapComponent.addToMapObjectGroup(this.mapObjectName, this.mapObject);\n    this.initialized$.emit(this.mapObject);\n  }\n\n  // When destroyed, remove event listener, and delete this object to prevent memory leak\n  ngOnDestroy() {\n    if (this.nguiMapComponent.el) {\n      this.nguiMap.clearObjectEvents(this.outputs, this, 'mapObject');\n    }\n  }\n}","import { Directive } from '@angular/core';\nimport { BaseMapDirective } from './base-map-directive';\nimport { NguiMapComponent } from '../components/ngui-map.component';\n\nconst INPUTS = ['autoRefresh', 'options' ];\nconst OUTPUTS = [ ];\n\n@Directive({\n  selector: 'ngui-map > traffic-layer',\n  inputs: INPUTS,\n  outputs: OUTPUTS,\n})\nexport class TrafficLayer extends BaseMapDirective {\n  // declare INPUTS for AOT compiler\n  public autoRefresh: any; // generated by ngc-pre-compiler.js\n  public options: any; // generated by ngc-pre-compiler.js\n\n  // declare OUTPUTS for AOT compiler\n\n\n  constructor(nguiMapComp: NguiMapComponent) {\n    super(nguiMapComp, 'TrafficLayer', INPUTS, OUTPUTS);\n  }\n}","import { Directive } from '@angular/core';\n\nimport { BaseMapDirective } from './base-map-directive';\nimport { NguiMapComponent } from '../components/ngui-map.component';\n\nconst INPUTS = [];\nconst OUTPUTS = [ ];\n\n@Directive({\n  selector: 'ngui-map > transit-layer',\n  inputs: INPUTS,\n  outputs: OUTPUTS,\n})\nexport class TransitLayer extends BaseMapDirective {\n  // declare INPUTS for AOT compiler\n\n\n  // declare OUTPUTS for AOT compiler\n\n\n  constructor(nguiMapComp: NguiMapComponent) {\n    super(nguiMapComp, 'TransitLayer', INPUTS, OUTPUTS);\n  }\n}","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { OptionBuilder } from './services/option-builder';\nimport { GeoCoder } from './services/geo-coder';\nimport { NavigatorGeolocation } from './services/navigator-geolocation';\nimport { NG_MAP_CONFIG_TOKEN, ConfigOption } from './services/config';\nimport { NgMapApiLoader, NgMapAsyncCallbackApiLoader } from './services/api-loader';\n\nimport { NguiMapComponent } from './components/ngui-map.component';\nimport { InfoWindow } from './components/info-window';\nimport { CustomMarker } from './components/custom-marker';\n\nimport { BicyclingLayer } from './directives/bicycling-layer';\nimport { Circle } from './directives/circle';\nimport { DataLayer } from './directives/data-layer';\nimport { DirectionsRenderer } from './directives/directions-renderer';\nimport { DrawingManager } from './directives/drawing-manager';\nimport { GroundOverlay } from './directives/ground-overlay';\nimport { HeatmapLayer } from './directives/heatmap-layer';\nimport { KmlLayer } from './directives/kml-layer';\nimport { Marker } from './directives/marker';\nimport { NguiMap } from './services/ngui-map';\nimport { PlacesAutoComplete } from './directives/places-auto-complete';\nimport { Polygon } from './directives/polygon';\nimport { Polyline } from './directives/polyline';\nimport { StreetViewPanorama } from './directives/street-view-panorama';\nimport { TrafficLayer } from './directives/traffic-layer';\nimport { TransitLayer } from './directives/transit-layer';\n\nconst COMPONENTS_DIRECTIVES = [\n  NguiMapComponent, InfoWindow,\n  Marker, Circle, CustomMarker, Polygon, InfoWindow, Polyline, GroundOverlay,\n  TransitLayer, TrafficLayer, HeatmapLayer, BicyclingLayer, KmlLayer, DataLayer,\n  StreetViewPanorama, PlacesAutoComplete, DirectionsRenderer,\n  DrawingManager,\n];\n\n@NgModule({\n  imports: [ CommonModule ],\n  declarations: COMPONENTS_DIRECTIVES,\n  exports: [COMPONENTS_DIRECTIVES],\n  providers: [\n    GeoCoder,\n    NavigatorGeolocation,\n    NguiMap,\n    OptionBuilder,\n    {provide: NgMapApiLoader, useClass: NgMapAsyncCallbackApiLoader},\n  ]\n})\nexport class NguiMapModule {\n  static forRoot(config: ConfigOption = {}): ModuleWithProviders {\n    return {\n      ngModule: NguiMapModule,\n      providers: [\n        { provide: NG_MAP_CONFIG_TOKEN, useValue: config }\n      ],\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}